/*===========================================================================
	  C++ class	definitions	exported from UnrealScript.
	  This is automatically	generated by the tools.
	  DO NOT modify	this manually! Edit	the	corresponding .uc files	instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef GAMEPLAY_API
#define GAMEPLAY_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern GAMEPLAY_API	FName GAMEPLAY_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AltFire)
AUTOGENERATE_NAME(BreakGrapple)
AUTOGENERATE_NAME(EnergyBarrierCollision)
AUTOGENERATE_NAME(Fire)
AUTOGENERATE_NAME(GetAltWeapon)
AUTOGENERATE_NAME(GetGrappleData)
AUTOGENERATE_NAME(GetOtherGrappleCount)
AUTOGENERATE_NAME(GetOtherGrappleData)
AUTOGENERATE_NAME(GetTeamAlignment)
AUTOGENERATE_NAME(GetTeamColor)
AUTOGENERATE_NAME(HavokVehicleHasChanged)
AUTOGENERATE_NAME(IsFriendly)
AUTOGENERATE_NAME(LoadCategories)
AUTOGENERATE_NAME(NextVersion)
AUTOGENERATE_NAME(OnChangeAirborne)
AUTOGENERATE_NAME(OnChangeCollisionMaterial)
AUTOGENERATE_NAME(OnChangeEffects)
AUTOGENERATE_NAME(OnChangeMovement)
AUTOGENERATE_NAME(OnChangeSkiInput)
AUTOGENERATE_NAME(OnChangeUnderwater)
AUTOGENERATE_NAME(OnChangeWater)
AUTOGENERATE_NAME(OnMovementCollision)
AUTOGENERATE_NAME(OnMovementCollisionDamage)
AUTOGENERATE_NAME(OnMovementCrushingDamage)
AUTOGENERATE_NAME(OnMovementJump)
AUTOGENERATE_NAME(OnShotFired)
AUTOGENERATE_NAME(ProcessBurnDamage)
AUTOGENERATE_NAME(ProcessRepair)
AUTOGENERATE_NAME(SendClientAdjustment)
AUTOGENERATE_NAME(SetNaturalRopeLength)
AUTOGENERATE_NAME(SetWeapon)
AUTOGENERATE_NAME(UpdateVehicle)
AUTOGENERATE_NAME(VehicleStateReceived)
AUTOGENERATE_NAME(VehicleUpdateParams)
AUTOGENERATE_NAME(cleanupAI)
AUTOGENERATE_NAME(collisionDamage)
AUTOGENERATE_NAME(getAimLocation)
AUTOGENERATE_NAME(getViewRotationFromMotor)
AUTOGENERATE_NAME(isActive)
AUTOGENERATE_NAME(isDamaged)
AUTOGENERATE_NAME(isDamagedAtThreshold)
AUTOGENERATE_NAME(isDisabled)
AUTOGENERATE_NAME(isFemale)
AUTOGENERATE_NAME(isPowered)
AUTOGENERATE_NAME(isUpright)
AUTOGENERATE_NAME(onTeamChange)
AUTOGENERATE_NAME(releaseAltFire)
AUTOGENERATE_NAME(releaseFire)
AUTOGENERATE_NAME(setDeployable)
AUTOGENERATE_NAME(setZoomed)
AUTOGENERATE_NAME(toss)
AUTOGENERATE_NAME(updateCameraRotation)
AUTOGENERATE_NAME(updateSensors)

#ifndef NAMES_ONLY

// Enum GroundMovementModeType is declared in "..\Gameplay\Classes\CharacterController\PlayerCharacterController.uc"
enum GroundMovementModeType
{
	 GroundMovementMode_Any  =0,
	 GroundMovementMode_Sprint=1,
	 GroundMovementMode_Run  =2,
	 GroundMovementMode_Walk =3,
	 GroundMovementMode_Stand=4,
	 GroundMovementMode_MAX  =5,
};
// Enum AlertnessModeType is declared in "..\Gameplay\Classes\CharacterController\PlayerCharacterController.uc"
enum AlertnessModeType
{
	 AlertnessMode_Default   =0,
	 AlertnessMode_Combat    =1,
	 AlertnessMode_Alert     =2,
	 AlertnessMode_Neutral   =3,
	 AlertnessMode_MAX       =4,
};
// Enum EDigitalAxisInput is declared in "..\Gameplay\Classes\CharacterController\PlayerCharacterController.uc"
enum EDigitalAxisInput
{
	 DAI_Zero                =0,
	 DAI_Positive            =1,
	 DAI_Negative            =2,
	 DAI_MAX                 =3,
};
// Struct FClientAdjustment	is declared	in "..\Gameplay\Classes\CharacterController\PlayerCharacterController.uc"
struct GAMEPLAY_API FClientAdjustment
{
    FLOAT TimeStamp;
    FLOAT Accumulator;
    FLOAT energy;
    FName NewState;
    BYTE Movement;
    FVector startLoc;
    FVector EndLoc;
    FVector newVel;
};

// Struct FDynamicTurretRotationProcessingOutput	is declared	in "..\Gameplay\Classes\CharacterController\PlayerCharacterController.uc"
struct GAMEPLAY_API FDynamicTurretRotationProcessingOutput
{
    FRotator worldSpaceNoRollRotation;
    FRotator vehicleSpaceRotation;
};


// "event"	function whose parameters correspond to	"struct APlayerCharacterController_eventSendClientAdjustment_Parms"	is declared	in "..\Gameplay\Classes\CharacterController\PlayerCharacterController.uc"
struct APlayerCharacterController_eventSendClientAdjustment_Parms
{
};


// "event"	function whose parameters correspond to	"struct AEquippable_eventreleaseFire_Parms"	is declared	in "..\Gameplay\Classes\Equipment\Equippable.uc"
struct AEquippable_eventreleaseFire_Parms
{
	  BITFIELD bClientOnly;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AEquippable_eventFire_Parms"	is declared	in "..\Gameplay\Classes\Equipment\Equippable.uc"
struct AEquippable_eventFire_Parms
{
	  BITFIELD _fireOnce;
	  BITFIELD ReturnValue;
};
// Enum eDeployableInfo is declared in "..\Gameplay\Classes\Equipment\Deployable\Deployable.uc"
enum eDeployableInfo
{
	 DeployableInfo_Ok       =0,
	 DeployableInfo_TooFar   =1,
	 DeployableInfo_NoSurface=2,
	 DeployableInfo_Blocked  =3,
	 DeployableInfo_SameTypeTooNear=4,
	 DeployableInfo_InvalidTargetObject=5,
	 DeployableInfo_BadState =6,
	 DeployableInfo_MAX      =7,
};


// "event"	function whose parameters correspond to	"struct AWeapon_eventreleaseAltFire_Parms"	is declared	in "..\Gameplay\Classes\Equipment\Weapon\Weapon.uc"
struct AWeapon_eventreleaseAltFire_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AWeapon_eventAltFire_Parms"	is declared	in "..\Gameplay\Classes\Equipment\Weapon\Weapon.uc"
struct AWeapon_eventAltFire_Parms
{
	  BITFIELD _fireOnce;
	  BITFIELD ReturnValue;
};

// Struct FTagBindingMap	is declared	in "..\Gameplay\Classes\HUD\TribesHUDBase.uc"
struct GAMEPLAY_API FTagBindingMap
{
    FStringNoInit Tag;
    FStringNoInit BindingText;
    FStringNoInit BoundKey;
};


// Enum EScalabilitySetting is declared in "..\Gameplay\Classes\Physics\DynamicObject.uc"
enum EScalabilitySetting
{
	 DS_NoDynamics           =0,
	 DS_Full                 =1,
	 DS_MAX                  =2,
};

// "event"	function whose parameters correspond to	"struct ADynamicObject_eventNextVersion_Parms"	is declared	in "..\Gameplay\Classes\Physics\DynamicObject.uc"
struct ADynamicObject_eventNextVersion_Parms
{
};

// Enum enumBaseType is declared in "..\Gameplay\Classes\Info\BaseInfo.uc"
enum enumBaseType
{
	 BaseType_Primary        =0,
	 BaseType_Secondary      =1,
	 BaseType_Mobile         =2,
	 BaseType_MAX            =3,
};

// Enum EMusicType is declared in "..\Gameplay\Classes\Info\MusicInfo.uc"
enum EMusicType
{
	 MS_NoMusic              =0,
	 MS_ExplorationMusic     =1,
	 MS_IntroMusic           =2,
	 MS_CombatMusic          =3,
	 MS_TensionMusic         =4,
	 MS_MAX                  =5,
};
// Struct FDynamicMusicOptions	is declared	in "..\Gameplay\Classes\Info\MusicInfo.uc"
struct GAMEPLAY_API FDynamicMusicOptions
{
    FLOAT FadeInTime;
    FLOAT FadeOutTime;
    FLOAT MinLifetime;
};



// Struct FRoleData	is declared	in "..\Gameplay\Classes\Info\TeamInfo.uc"
struct GAMEPLAY_API FRoleData
{
    class UClass* Role;
    class UMesh* Mesh;
    class UMesh* femaleMesh;
    class UClass* jetpack;
    class UClass* femaleJetpack;
    class UMesh* armsMesh;
    class UMaterial* armorIcon;
};

// Constant MAX_RESPAWN_VEHICLES_DEFINE is declared in "..\Gameplay\Classes\Info\TeamInfo.uc"
#define UCONST_MAX_RESPAWN_VEHICLES_DEFINE 10

// "event"	function whose parameters correspond to	"struct ATeamInfo_eventupdateSensors_Parms"	is declared	in "..\Gameplay\Classes\Info\TeamInfo.uc"
struct ATeamInfo_eventupdateSensors_Parms
{
};



// "event"	function whose parameters correspond to	"struct ACharacterMotor_eventsetZoomed_Parms"	is declared	in "..\Gameplay\Classes\Motor\CharacterMotor.uc"
struct ACharacterMotor_eventsetZoomed_Parms
{
	  BITFIELD bZoomed;
};
// "event"	function whose parameters correspond to	"struct ACharacterMotor_eventsetDeployable_Parms"	is declared	in "..\Gameplay\Classes\Motor\CharacterMotor.uc"
struct ACharacterMotor_eventsetDeployable_Parms
{
	  class ADeployable* D;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ACharacterMotor_eventSetWeapon_Parms"	is declared	in "..\Gameplay\Classes\Motor\CharacterMotor.uc"
struct ACharacterMotor_eventSetWeapon_Parms
{
	  class AWeapon* W;
	  BITFIELD ReturnValue;
};

// "event"	function whose parameters correspond to	"struct ATurretMotor_eventsetZoomed_Parms"	is declared	in "..\Gameplay\Classes\Motor\TurretMotor.uc"
struct ATurretMotor_eventsetZoomed_Parms
{
	  BITFIELD bZoomed;
};





// Enum EUseablePointValid is declared in "..\Gameplay\Classes\Rook\Rook.uc"
enum EUseablePointValid
{
	 UP_Unused               =0,
	 UP_NotValid             =1,
	 UP_Valid                =2,
	 UP_MAX                  =3,
};
// Enum AlertnessLevels is declared in "..\Gameplay\Classes\Rook\Rook.uc"
enum AlertnessLevels
{
	 ALERTNESS_Neutral       =0,
	 ALERTNESS_Alert         =1,
	 ALERTNESS_Combat        =2,
	 ALERTNESS_MAX           =3,
};
// Struct FDamageComponent	is declared	in "..\Gameplay\Classes\Rook\Rook.uc"
struct GAMEPLAY_API FDamageComponent
{
    class UClass* objectType;
    FName attachmentPoint;
    class ADynamicObject* objectInstance;
};

// Constant MAX_USEABLE_POINTS is declared in "..\Gameplay\Classes\Rook\Rook.uc"
#define UCONST_MAX_USEABLE_POINTS 10
// Constant N_PAST_POSITIONS is declared in "..\Gameplay\Classes\Rook\Rook.uc"
#define UCONST_N_PAST_POSITIONS 4
// Constant DAMAGE_OVERKILL is declared in "..\Gameplay\Classes\Rook\Rook.uc"
#define UCONST_DAMAGE_OVERKILL -50.0f

// "event"	function whose parameters correspond to	"struct ARook_eventIsFriendly_Parms"	is declared	in "..\Gameplay\Classes\Rook\Rook.uc"
struct ARook_eventIsFriendly_Parms
{
	  class ARook* otherGuy;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ARook_eventcleanupAI_Parms"	is declared	in "..\Gameplay\Classes\Rook\Rook.uc"
struct ARook_eventcleanupAI_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ARook_eventOnShotFired_Parms"	is declared	in "..\Gameplay\Classes\Rook\Rook.uc"
struct ARook_eventOnShotFired_Parms
{
	  class AProjectile* Projectile;
};
// "event"	function whose parameters correspond to	"struct ARook_eventonTeamChange_Parms"	is declared	in "..\Gameplay\Classes\Rook\Rook.uc"
struct ARook_eventonTeamChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct ARook_eventProcessBurnDamage_Parms"	is declared	in "..\Gameplay\Classes\Rook\Rook.uc"
struct ARook_eventProcessBurnDamage_Parms
{
	  FLOAT Delta;
};
// "event"	function whose parameters correspond to	"struct ARook_eventProcessRepair_Parms"	is declared	in "..\Gameplay\Classes\Rook\Rook.uc"
struct ARook_eventProcessRepair_Parms
{
	  FLOAT Delta;
};

// "event"	function whose parameters correspond to	"struct ABaseDevice_eventisPowered_Parms"	is declared	in "..\Gameplay\Classes\Rook\BaseDevice\BaseDevice.uc"
struct ABaseDevice_eventisPowered_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ABaseDevice_eventisDisabled_Parms"	is declared	in "..\Gameplay\Classes\Rook\BaseDevice\BaseDevice.uc"
struct ABaseDevice_eventisDisabled_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ABaseDevice_eventisDamaged_Parms"	is declared	in "..\Gameplay\Classes\Rook\BaseDevice\BaseDevice.uc"
struct ABaseDevice_eventisDamaged_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ABaseDevice_eventisDamagedAtThreshold_Parms"	is declared	in "..\Gameplay\Classes\Rook\BaseDevice\BaseDevice.uc"
struct ABaseDevice_eventisDamagedAtThreshold_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ABaseDevice_eventisActive_Parms"	is declared	in "..\Gameplay\Classes\Rook\BaseDevice\BaseDevice.uc"
struct ABaseDevice_eventisActive_Parms
{
	  BITFIELD ReturnValue;
};
// Enum eBakeAnimationState is declared in "..\Gameplay\Classes\Rook\BaseDevice\EmergencyStation.uc"
enum eBakeAnimationState
{
	 BAS_End                 =0,
	 BAS_Start               =1,
	 BAS_Baking              =2,
	 BAS_MAX                 =3,
};


// Struct FQueueElement	is declared	in "..\Gameplay\Classes\Rook\BaseDevice\InventoryStation\InventoryStation.uc"
struct GAMEPLAY_API FQueueElement
{
    class ACharacter* Character;
    class AInventoryStationAccess* access;
    INT accessIndex;
    INT extensionIndex;
    BITFIELD accessible:1;
};



// Struct FTurretEntryData	is declared	in "..\Gameplay\Classes\Rook\BaseDevice\Turret.uc"
struct GAMEPLAY_API FTurretEntryData
{
    FLOAT Radius;
    FLOAT height;
    class UClass* turretEntryClass;
};





// Struct FHavokCarryableReplicationState	is declared	in "..\Gameplay\Classes\MPActor\MPCarryable.uc"
struct GAMEPLAY_API FHavokCarryableReplicationState
{
    FVector Position;
    FQuat Rotation;
    FVector LinVel;
    FVector AngVel;
    BITFIELD bNewState:1;
};

// Constant MPC_ANGULAR_VELOCITY_INVERSE_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\MPActor\MPCarryable.uc"
#define UCONST_MPC_ANGULAR_VELOCITY_INVERSE_ACCURACY_FACTOR 0.001
// Constant MPC_ANGULAR_VELOCITY_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\MPActor\MPCarryable.uc"
#define UCONST_MPC_ANGULAR_VELOCITY_ACCURACY_FACTOR 1000
// Constant MPC_LINEAR_VELOCITY_INVERSE_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\MPActor\MPCarryable.uc"
#define UCONST_MPC_LINEAR_VELOCITY_INVERSE_ACCURACY_FACTOR 0.01
// Constant MPC_LINEAR_VELOCITY_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\MPActor\MPCarryable.uc"
#define UCONST_MPC_LINEAR_VELOCITY_ACCURACY_FACTOR 100

// "event"	function whose parameters correspond to	"struct AMPCarryable_eventEnergyBarrierCollision_Parms"	is declared	in "..\Gameplay\Classes\MPActor\MPCarryable.uc"
struct AMPCarryable_eventEnergyBarrierCollision_Parms
{
};
// "event"	function whose parameters correspond to	"struct AMPCarryable_eventtoss_Parms"	is declared	in "..\Gameplay\Classes\MPActor\MPCarryable.uc"
struct AMPCarryable_eventtoss_Parms
{
};
// Enum MovementState is declared in "..\Gameplay\Classes\Character\Ragdoll.uc"
enum MovementState
{
	 MovementState_Stand     =0,
	 MovementState_Walk      =1,
	 MovementState_Run       =2,
	 MovementState_Sprint    =3,
	 MovementState_Ski       =4,
	 MovementState_Slide     =5,
	 MovementState_Stop      =6,
	 MovementState_Airborne  =7,
	 MovementState_AirControl=8,
	 MovementState_Thrust    =9,
	 MovementState_Swim      =10,
	 MovementState_Float     =11,
	 MovementState_Skim      =12,
	 MovementState_ZeroGravity=13,
	 MovementState_Elevator  =14,
	 MovementState_MAX       =15,
};

// Enum EClientPainType is declared in "..\Gameplay\Classes\Character\Character.uc"
enum EClientPainType
{
	 CLIENTPAIN_Hurt         =0,
	 CLIENTPAIN_BigHurt      =1,
	 CLIENTPAIN_Death        =2,
	 CLIENTPAIN_Cratered     =3,
	 CLIENTPAIN_Burnt        =4,
	 CLIENTPAIN_MAX          =5,
};
// Enum GroundMovementLevels is declared in "..\Gameplay\Classes\Character\Character.uc"
enum GroundMovementLevels
{
	 GM_Any                  =0,
	 GM_Sprint               =1,
	 GM_Run                  =2,
	 GM_Walk                 =3,
	 GM_None                 =4,
	 GM_MAX                  =5,
};
// Enum JetCompetencyLevels is declared in "..\Gameplay\Classes\Character\Character.uc"
enum JetCompetencyLevels
{
	 JC_Default              =0,
	 JC_None                 =1,
	 JC_LevelNovice          =2,
	 JC_LevelMedium          =3,
	 JC_LevelExpert          =4,
	 JC_MAX                  =5,
};
// Enum SkiCompetencyLevels is declared in "..\Gameplay\Classes\Character\Character.uc"
enum SkiCompetencyLevels
{
	 SC_Default              =0,
	 SC_None                 =1,
	 SC_LevelNovice          =2,
	 SC_LevelMedium          =3,
	 SC_LevelExpert          =4,
	 SC_MAX                  =5,
};
// Enum HitPosition is declared in "..\Gameplay\Classes\Character\Character.uc"
enum HitPosition
{
	 HP_IGNORE               =0,
	 HP_HEAD                 =1,
	 HP_FRONT                =2,
	 HP_BACK                 =3,
	 HP_MAX                  =4,
};
// Enum AnimationStateEnum is declared in "..\Gameplay\Classes\Character\Character.uc"
enum AnimationStateEnum
{
	 AnimationState_None     =0,
	 AnimationState_Stand    =1,
	 AnimationState_Walk     =2,
	 AnimationState_Run      =3,
	 AnimationState_Sprint   =4,
	 AnimationState_Ski      =5,
	 AnimationState_Slide    =6,
	 AnimationState_Stop     =7,
	 AnimationState_Airborne =8,
	 AnimationState_AirControl=9,
	 AnimationState_Thrust   =10,
	 AnimationState_Swim     =11,
	 AnimationState_Count    =12,
	 AnimationState_MAX      =13,
};
// Enum MovementDirectionalInput is declared in "..\Gameplay\Classes\Character\Character.uc"
enum MovementDirectionalInput
{
	 MovementInput_Zero      =0,
	 MovementInput_Positive  =1,
	 MovementInput_Negative  =2,
	 MovementInput_MAX       =3,
};
// Struct FQuickChatInfo	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct GAMEPLAY_API FQuickChatInfo
{
    BITFIELD bSwitch:1;
    FStringNoInit TagID;
};

// Constant ROPE_MESH_LENGTH is declared in "..\Gameplay\Classes\Character\Character.uc"
#define UCONST_ROPE_MESH_LENGTH 512
// Constant NUM_WEAPON_SLOTS is declared in "..\Gameplay\Classes\Character\Character.uc"
#define UCONST_NUM_WEAPON_SLOTS 3
// Constant GM_Walk_Int is declared in "..\Gameplay\Classes\Character\Character.uc"
#define UCONST_GM_Walk_Int 3
// Constant GM_Run_Int is declared in "..\Gameplay\Classes\Character\Character.uc"
#define UCONST_GM_Run_Int 2
// Constant GM_Sprint_Int is declared in "..\Gameplay\Classes\Character\Character.uc"
#define UCONST_GM_Sprint_Int 1
// Constant GM_Any_Int is declared in "..\Gameplay\Classes\Character\Character.uc"
#define UCONST_GM_Any_Int 0
// Constant DAMAGE_LARGE is declared in "..\Gameplay\Classes\Character\Character.uc"
#define UCONST_DAMAGE_LARGE 50.0f

// "event"	function whose parameters correspond to	"struct ACharacter_eventisFemale_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventisFemale_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventSetNaturalRopeLength_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventSetNaturalRopeLength_Parms
{
	  FLOAT Length;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventGetOtherGrappleData_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventGetOtherGrappleData_Parms
{
	  INT Index;
	  class ACharacter* Other;
	  FLOAT naturalLength;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventGetOtherGrappleCount_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventGetOtherGrappleCount_Parms
{
	  INT Count;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventGetGrappleData_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventGetGrappleData_Parms
{
	  class AActor* attachedTo;
	  FVector attachedPoint;
	  FLOAT naturalLength;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventBreakGrapple_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventBreakGrapple_Parms
{
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventOnChangeEffects_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventOnChangeEffects_Parms
{
	  BYTE previousMovementState;
	  BYTE currentMovementState;
	  BITFIELD previousAirborne;
	  BITFIELD currentAirborne;
	  BITFIELD previousWater;
	  BITFIELD currentWater;
	  BITFIELD previousUnderWater;
	  BITFIELD currentUnderWater;
	  INT previousMaterial;
	  INT currentMaterial;
	  BITFIELD previousSkiInput;
	  BITFIELD currentSkiInput;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventOnChangeMovement_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventOnChangeMovement_Parms
{
	  BYTE Previous;
	  BYTE Current;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventOnChangeSkiInput_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventOnChangeSkiInput_Parms
{
	  BITFIELD Previous;
	  BITFIELD Current;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventOnChangeCollisionMaterial_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventOnChangeCollisionMaterial_Parms
{
	  INT Previous;
	  INT Current;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventOnChangeUnderwater_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventOnChangeUnderwater_Parms
{
	  BITFIELD Previous;
	  BITFIELD Current;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventOnChangeWater_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventOnChangeWater_Parms
{
	  BITFIELD Previous;
	  BITFIELD Current;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventOnChangeAirborne_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventOnChangeAirborne_Parms
{
	  BITFIELD Previous;
	  BITFIELD Current;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventOnMovementJump_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventOnMovementJump_Parms
{
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventOnMovementCrushingDamage_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventOnMovementCrushingDamage_Parms
{
	  FLOAT Damage;
	  class APawn* Source;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventOnMovementCollisionDamage_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventOnMovementCollisionDamage_Parms
{
	  FLOAT Damage;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventOnMovementCollision_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventOnMovementCollision_Parms
{
	  FVector point;
	  FVector Normal;
	  FVector Impulse;
	  INT Material;
};
// "event"	function whose parameters correspond to	"struct ACharacter_eventGetAltWeapon_Parms"	is declared	in "..\Gameplay\Classes\Character\Character.uc"
struct ACharacter_eventGetAltWeapon_Parms
{
	  class AWeapon* ReturnValue;
};
// Enum SpeedPackUseCategories is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
enum SpeedPackUseCategories
{
	 SP_ON_FIRST_ATTACK      =0,
	 SP_WHEN_CLOSE           =1,
	 SP_ESTHER               =2,
	 SP_MAX                  =3,
};
// Enum GrenadeUseCategories is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
enum GrenadeUseCategories
{
	 GU_NONE                 =0,
	 GU_NEVER                =1,
	 GU_USE                  =2,
	 GU_MAX                  =3,
};
// Enum PainReactionCategories is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
enum PainReactionCategories
{
	 PR_NONE                 =0,
	 PR_FLINCH               =1,
	 PR_FREEZE               =2,
	 PR_MAX                  =3,
};
// Enum DodgingCategories is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
enum DodgingCategories
{
	 DODGING_POOR            =0,
	 DODGING_GOOD            =1,
	 DODGING_MAX             =2,
};
// Enum CombatMovementCategories is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
enum CombatMovementCategories
{
	 CM_SIDE_STEP            =0,
	 CM_SEEK_COVER           =1,
	 CM_ZIGZAG               =2,
	 CM_DONT_REPOSITION      =3,
	 CM_MAX                  =4,
};
// Enum CombatRangeCategories is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
enum CombatRangeCategories
{
	 CR_STAND_GROUND         =0,
	 CR_CLOSE_TO_RANGE       =1,
	 CR_STAY_AT_RANGE        =2,
	 CR_FLANKING             =3,
	 CR_DRAW_OUT             =4,
	 CR_MAX                  =5,
};
// Enum FiringWhileMovingStates is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
enum FiringWhileMovingStates
{
	 FWM_NEVER               =0,
	 FWM_POOR                =1,
	 FWM_GOOD                =2,
	 FWM_MAX                 =3,
};
// Constant SPEEDPACK_DISTANCE is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
#define UCONST_SPEEDPACK_DISTANCE 1500.0f
// Constant DODGING_DELAY_TIME is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
#define UCONST_DODGING_DELAY_TIME 0.5f
// Constant PAIN_REACTION_FREEZE_TIME is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
#define UCONST_PAIN_REACTION_FREEZE_TIME 1.5f
// Constant PAIN_REACTION_FLINCH_TIME is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
#define UCONST_PAIN_REACTION_FLINCH_TIME 1.0f
// Constant MAX_BUMP_TIME is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
#define UCONST_MAX_BUMP_TIME 1.0f
// Constant MIN_BUMP_TIME is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
#define UCONST_MIN_BUMP_TIME 0.3f


// Enum VehiclePositionType is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
enum VehiclePositionType
{
	 VP_DRIVER               =0,
	 VP_GUNNER               =1,
	 VP_LEFT_GUNNER          =2,
	 VP_RIGHT_GUNNER         =3,
	 VP_INVENTORY_STATION_ONE=4,
	 VP_INVENTORY_STATION_TWO=5,
	 VP_INVENTORY_STATION_THREE=6,
	 VP_INVENTORY_STATION_FOUR=7,
	 VP_NULL                 =8,
	 VP_MAX                  =9,
};
// Struct FVehiclePosition	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct GAMEPLAY_API FVehiclePosition
{
    BYTE Type;
    class ACharacter* occupant;
    BITFIELD wantsToGetOut:1;
    BITFIELD hideOccupant:1;
    BITFIELD thirdPersonCamera:1;
    BITFIELD lookAtInheritPitch:1;
    class ARook* toBePossessed;
    FName occupantControllerState;
    FVector firstPersonCameraLocation;
    FVector firstPersonWeaponLocation;
    FName enterAnimation;
    FName exitAnimation;
    FName occupiedAnimation;
    FName unoccupiedAnimation;
    class AWeapon* oldOccupantWeapon;
    FVector occupantRelativeLocation;
    FRotator occupantRelativeRotation;
    INT ManifestXPosition;
    INT ManifestYPosition;
    BITFIELD bNotLabelledInManifest:1;
    FName occupantConnection;
    FName occupantAnimation;
};

// Struct FVehicleEntryData	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct GAMEPLAY_API FVehicleEntryData
{
    FLOAT Radius;
    FLOAT height;
    FVector Offset;
    BYTE primaryPosition;
    TArrayNoInit<BYTE> secondaryPositions;
    class UClass* entryClass;
};

// Struct FVehicleFlipTriggerData	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct GAMEPLAY_API FVehicleFlipTriggerData
{
    FLOAT Radius;
    FLOAT height;
    FVector Offset;
};

// Struct FExitData	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct GAMEPLAY_API FExitData
{
    FVector Offset;
    BYTE Position;
};

// Struct FVehicleEffect	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct GAMEPLAY_API FVehicleEffect
{
    FName EffectName;
    BITFIELD Flag:1;
    class UVehicleEffectObserver* Observer;
};

// Struct FClientOccupantEnterData	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct GAMEPLAY_API FClientOccupantEnterData
{
    class AController* Controller;
    class ACharacter* occupant;
    BYTE positionIndex;
    BITFIELD newData:1;
    BITFIELD flipFlop:1;
};

// Struct FClientPositionData	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct GAMEPLAY_API FClientPositionData
{
    class ACharacter* occupant;
};

// Struct FDesiredHavokState	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct GAMEPLAY_API FDesiredHavokState
{
    FVector Velocity;
    FVector angularVelocity;
    FVector Position;
    FQuat Rotation;
    BITFIELD ignoreRotation:1;
    BITFIELD NewState:1;
};

// Constant HEAVY_ATTEMPT_TO_PILOT is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_HEAVY_ATTEMPT_TO_PILOT 11
// Constant ENEMY_INVENTORY_STATION_PROMPT_INDEX is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_ENEMY_INVENTORY_STATION_PROMPT_INDEX 10
// Constant ENEMY_OCCUPIED_VEHICLE_PROMPT_INDEX is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_ENEMY_OCCUPIED_VEHICLE_PROMPT_INDEX 9
// Constant CANNOT_STEAL_VEHICLE_PROMPT_INDEX is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_CANNOT_STEAL_VEHICLE_PROMPT_INDEX 8
// Constant FLIP_PROMPT_INDEX is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_FLIP_PROMPT_INDEX 7
// Constant VEHICLE_PROHIBITED_OBJECT_PROMPT_INDEX is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_VEHICLE_PROHIBITED_OBJECT_PROMPT_INDEX 6
// Constant FULL_VEHICLE_PROMPT_INDEX is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_FULL_VEHICLE_PROMPT_INDEX 5
// Constant INVENTORY_STATION_PROMPT_INDEX is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_INVENTORY_STATION_PROMPT_INDEX 4
// Constant RIGHT_GUNNER_PROMPT_INDEX is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_RIGHT_GUNNER_PROMPT_INDEX 3
// Constant LEFT_GUNNER_PROMPT_INDEX is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_LEFT_GUNNER_PROMPT_INDEX 2
// Constant GUNNER_PROMPT_INDEX is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_GUNNER_PROMPT_INDEX 1
// Constant DRIVER_PROMPT_INDEX is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_DRIVER_PROMPT_INDEX 0
// Constant NUMBER_MINOR_ENTRY_SIGNALS is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_NUMBER_MINOR_ENTRY_SIGNALS 4
// Constant MAXIMUM_NUMBER_POSITIONS is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
#define UCONST_MAXIMUM_NUMBER_POSITIONS 10

// "event"	function whose parameters correspond to	"struct AVehicle_eventcollisionDamage_Parms"	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct AVehicle_eventcollisionDamage_Parms
{
	  FLOAT magnitude;
};
// "event"	function whose parameters correspond to	"struct AVehicle_eventisUpright_Parms"	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct AVehicle_eventisUpright_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AVehicle_eventgetAimLocation_Parms"	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct AVehicle_eventgetAimLocation_Parms
{
	  class APawn* Target;
	  FVector ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AVehicle_eventVehicleUpdateParams_Parms"	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct AVehicle_eventVehicleUpdateParams_Parms
{
};
// "event"	function whose parameters correspond to	"struct AVehicle_eventVehicleStateReceived_Parms"	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct AVehicle_eventVehicleStateReceived_Parms
{
};
// "event"	function whose parameters correspond to	"struct AVehicle_eventgetViewRotationFromMotor_Parms"	is declared	in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
struct AVehicle_eventgetViewRotationFromMotor_Parms
{
	  FRotator ReturnValue;
};

// Struct FWheelOutput	is declared	in "..\Gameplay\Classes\Vehicles\Common\HavokCar.uc"
struct GAMEPLAY_API FWheelOutput
{
    FLOAT skidEnergyDensity;
    FLOAT suspensionLength;
    BITFIELD groundContact:1;
};

// Struct FHavokCarReplicationState	is declared	in "..\Gameplay\Classes\Vehicles\Common\HavokCar.uc"
struct GAMEPLAY_API FHavokCarReplicationState
{
    FVector Position;
    FQuat Rotation;
    FVector LinVel;
    FVector AngVel;
    BYTE digitalThrottleInput;
    BYTE digitalStrafeInput;
    BYTE ServerSteering[2];
    BITFIELD ServerBoost:1;
    BITFIELD ServerHandbrake:1;
};

// Constant HC_ANGULAR_VELOCITY_INVERSE_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\Vehicles\Common\HavokCar.uc"
#define UCONST_HC_ANGULAR_VELOCITY_INVERSE_ACCURACY_FACTOR 0.001
// Constant HC_ANGULAR_VELOCITY_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\Vehicles\Common\HavokCar.uc"
#define UCONST_HC_ANGULAR_VELOCITY_ACCURACY_FACTOR 1000
// Constant HC_LINEAR_VELOCITY_INVERSE_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\Vehicles\Common\HavokCar.uc"
#define UCONST_HC_LINEAR_VELOCITY_INVERSE_ACCURACY_FACTOR 0.01
// Constant HC_LINEAR_VELOCITY_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\Vehicles\Common\HavokCar.uc"
#define UCONST_HC_LINEAR_VELOCITY_ACCURACY_FACTOR 100

// "event"	function whose parameters correspond to	"struct AHavokCar_eventHavokVehicleHasChanged_Parms"	is declared	in "..\Gameplay\Classes\Vehicles\Common\HavokCar.uc"
struct AHavokCar_eventHavokVehicleHasChanged_Parms
{
};
// "event"	function whose parameters correspond to	"struct AHavokCar_eventUpdateVehicle_Parms"	is declared	in "..\Gameplay\Classes\Vehicles\Common\HavokCar.uc"
struct AHavokCar_eventUpdateVehicle_Parms
{
	  FLOAT DeltaTime;
};
// Constant FORCE_DEACTIVATE_TIME is declared in "..\Gameplay\Classes\Vehicles\Buggy\Buggy.uc"
#define UCONST_FORCE_DEACTIVATE_TIME 4
// Constant FORCE_DEACTIVATE_DISTANCE is declared in "..\Gameplay\Classes\Vehicles\Buggy\Buggy.uc"
#define UCONST_FORCE_DEACTIVATE_DISTANCE 5
// Constant GUNNER_INDEX is declared in "..\Gameplay\Classes\Vehicles\Buggy\Buggy.uc"
#define UCONST_GUNNER_INDEX 1
// Constant DRIVER_INDEX is declared in "..\Gameplay\Classes\Vehicles\Buggy\Buggy.uc"
#define UCONST_DRIVER_INDEX 0

// Struct FTreadVehicleReplicationState	is declared	in "..\Gameplay\Classes\Vehicles\Common\TreadVehicle.uc"
struct GAMEPLAY_API FTreadVehicleReplicationState
{
    FVector Position;
    FQuat Rotation;
    FVector LinVel;
    FVector AngVel;
    BYTE digitalThrottleInput;
    BYTE digitalStrafeInput;
    BYTE ServerSteering[2];
    BITFIELD ServerGripping:1;
    BITFIELD softThrottleSteering:1;
};

// Constant TV_ANGULAR_VELOCITY_INVERSE_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\Vehicles\Common\TreadVehicle.uc"
#define UCONST_TV_ANGULAR_VELOCITY_INVERSE_ACCURACY_FACTOR 1
// Constant TV_ANGULAR_VELOCITY_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\Vehicles\Common\TreadVehicle.uc"
#define UCONST_TV_ANGULAR_VELOCITY_ACCURACY_FACTOR 1
// Constant TV_LINEAR_VELOCITY_INVERSE_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\Vehicles\Common\TreadVehicle.uc"
#define UCONST_TV_LINEAR_VELOCITY_INVERSE_ACCURACY_FACTOR 0.01
// Constant TV_LINEAR_VELOCITY_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\Vehicles\Common\TreadVehicle.uc"
#define UCONST_TV_LINEAR_VELOCITY_ACCURACY_FACTOR 100

// Constant GUNNER_INDEX is declared in "..\Gameplay\Classes\Vehicles\Tank\Tank.uc"
#define UCONST_GUNNER_INDEX 1
// Constant DRIVER_INDEX is declared in "..\Gameplay\Classes\Vehicles\Tank\Tank.uc"
#define UCONST_DRIVER_INDEX 0

// Enum AccelerationEffectStateEnum is declared in "..\Gameplay\Classes\Vehicles\Common\JointControlledAircraft.uc"
enum AccelerationEffectStateEnum
{
	 AES_ACCELERATING        =0,
	 AES_DECELERATING        =1,
	 AES_NONE                =2,
	 AES_MAX                 =3,
};
// Struct FAircraftState	is declared	in "..\Gameplay\Classes\Vehicles\Common\JointControlledAircraft.uc"
struct GAMEPLAY_API FAircraftState
{
    FVector Position;
    FVector Velocity;
    INT flightAngles;
    BITFIELD serverThrusting:1;
    BITFIELD serverDiving:1;
    BYTE serverStrafe;
    BYTE serverThrottle;
};

// Constant JCA_LINEAR_VELOCITY_INVERSE_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\Vehicles\Common\JointControlledAircraft.uc"
#define UCONST_JCA_LINEAR_VELOCITY_INVERSE_ACCURACY_FACTOR 0.01
// Constant JCA_LINEAR_VELOCITY_ACCURACY_FACTOR is declared in "..\Gameplay\Classes\Vehicles\Common\JointControlledAircraft.uc"
#define UCONST_JCA_LINEAR_VELOCITY_ACCURACY_FACTOR 100

// "event"	function whose parameters correspond to	"struct AJointControlledAircraft_eventupdateCameraRotation_Parms"	is declared	in "..\Gameplay\Classes\Vehicles\Common\JointControlledAircraft.uc"
struct AJointControlledAircraft_eventupdateCameraRotation_Parms
{
	  FLOAT DeltaSeconds;
};





// Struct FQuantityWeapon	is declared	in "..\Gameplay\Classes\Armor\Armor.uc"
struct GAMEPLAY_API FQuantityWeapon
{
    class UClass* typeClass;
    INT quantity;
};

// Struct FQuantityGrenades	is declared	in "..\Gameplay\Classes\Armor\Armor.uc"
struct GAMEPLAY_API FQuantityGrenades
{
    class UClass* typeClass;
    INT quantity;
};

// Struct FQuantityDeployable	is declared	in "..\Gameplay\Classes\Armor\Armor.uc"
struct GAMEPLAY_API FQuantityDeployable
{
    class UClass* typeClass;
    INT quantity;
};

// Struct FQuantityConsumable	is declared	in "..\Gameplay\Classes\Armor\Armor.uc"
struct GAMEPLAY_API FQuantityConsumable
{
    class UClass* typeClass;
    INT quantity;
};



// Enum AnimationChannelIndex is declared in "..\Gameplay\Classes\Animation\AnimationChannel.uc"
enum AnimationChannelIndex
{
	 AnimationChannel_Primary=0,
	 AnimationChannel_Primary_Forward=1,
	 AnimationChannel_Primary_Back=2,
	 AnimationChannel_Primary_Left=3,
	 AnimationChannel_Primary_Right=4,
	 AnimationChannel_Primary_Up=5,
	 AnimationChannel_Primary_Down=6,
	 AnimationChannel_Secondary=7,
	 AnimationChannel_Secondary_Forward=8,
	 AnimationChannel_Secondary_Back=9,
	 AnimationChannel_Secondary_Left=10,
	 AnimationChannel_Secondary_Right=11,
	 AnimationChannel_Secondary_Up=12,
	 AnimationChannel_Secondary_Down=13,
	 AnimationChannel_Primary_AimUp=14,
	 AnimationChannel_Primary_AimDown=15,
	 AnimationChannel_Secondary_AimUp=16,
	 AnimationChannel_Secondary_AimDown=17,
	 AnimationChannel_Arm    =18,
	 AnimationChannel_Fire   =19,
	 AnimationChannel_UpperBody=20,
	 AnimationChannel_Flinch =21,
	 AnimationChannel_Extra  =22,
	 AnimationChannel_Count  =23,
	 AnimationChannel_MAX    =24,
};





// Enum AnimationType is declared in "..\Gameplay\Classes\Animation\AnimationState.uc"
enum AnimationType
{
	 AnimationType_IdleWithTurn=0,
	 AnimationType_StrafeDirectional=1,
	 AnimationType_DisplacementDirectional=2,
	 AnimationType_VelocitySpringAndAirborneUpDown=3,
	 AnimationType_AirborneUpDown=4,
	 AnimationType_MAX       =5,
};





// Struct FDeployableInfo	is declared	in "..\Gameplay\Classes\Loadout\Loadout.uc"
struct GAMEPLAY_API FDeployableInfo
{
    class UClass* deployableClass;
    INT Amount;
};

// Struct FWeaponInfo	is declared	in "..\Gameplay\Classes\Loadout\Loadout.uc"
struct GAMEPLAY_API FWeaponInfo
{
    class UClass* weaponClass;
    INT Ammo;
};

// Struct FGrenadeInfo	is declared	in "..\Gameplay\Classes\Loadout\Loadout.uc"
struct GAMEPLAY_API FGrenadeInfo
{
    class UClass* grenadeClass;
    INT Ammo;
};

// Struct FConsumableInfo	is declared	in "..\Gameplay\Classes\Loadout\Loadout.uc"
struct GAMEPLAY_API FConsumableInfo
{
    class UClass* consumableClass;
    INT Amount;
};


// Struct FSkinPreferenceMapping	is declared	in "..\Gameplay\Classes\Loadout\CustomPlayerLoadout.uc"
struct GAMEPLAY_API FSkinPreferenceMapping
{
    class UMesh* Mesh;
    FStringNoInit Skin;
};





// Enum EIconType is declared in "..\Gameplay\Classes\Info\RadarInfo.uc"
enum EIconType
{
	 ICON_Radar              =0,
	 ICON_Viewport           =1,
	 ICON_MAX                =2,
};
// Enum EColorType is declared in "..\Gameplay\Classes\Info\RadarInfo.uc"
enum EColorType
{
	 COLOR_UserPref          =0,
	 COLOR_Relative          =1,
	 COLOR_Team              =2,
	 COLOR_Neutral           =3,
	 COLOR_Absolute          =4,
	 COLOR_MAX               =5,
};
// Struct FMaterialDef	is declared	in "..\Gameplay\Classes\Info\RadarInfo.uc"
struct GAMEPLAY_API FMaterialDef
{
    class UMaterial* Material;
    FMatCoords Coords;
    FColor DrawColor;
    FLOAT Alpha;
    BITFIELD bFlashing:1;
    FLOAT flashFrequency;
};


// Enum EMessageType is declared in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
enum EMessageType
{
	 MessageType_Global      =0,
	 MessageType_Ally        =1,
	 MessageType_Enemy       =2,
	 MessageType_Subtitle    =3,
	 MessageType_System      =4,
	 MessageType_StatHigh    =5,
	 MessageType_StatMedium  =6,
	 MessageType_StatLow     =7,
	 MessageType_StatPenalty =8,
	 MAX_MESSAGE_TYPES       =9,
	 MessageType_MAX         =10,
};
// Enum EDirectionType is declared in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
enum EDirectionType
{
	 DAMAGE_Front            =0,
	 DAMAGE_Rear             =1,
	 DAMAGE_Left             =2,
	 DAMAGE_Right            =3,
	 DAMAGE_Top              =4,
	 DAMAGE_Bottom           =5,
	 MAX_DAMAGE_DIRECTIONS   =6,
	 DAMAGE_MAX              =7,
};
// Enum ePackState is declared in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
enum ePackState
{
	 PS_Recharging           =0,
	 PS_Active               =1,
	 PS_Ready                =2,
	 PS_MAX                  =3,
};
// Enum ETeamAlignment is declared in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
enum ETeamAlignment
{
	 TA_Neutral              =0,
	 TA_Friendly             =1,
	 TA_Enemy                =2,
	 TA_MAX                  =3,
};
// Struct FHUDWeaponInfo	is declared	in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
struct GAMEPLAY_API FHUDWeaponInfo
{
    class UClass* Type;
    INT Ammo;
    FStringNoInit HotKey;
    BITFIELD bCanFire:1;
    FLOAT refireTime;
    FLOAT timeSinceLastFire;
    FLOAT Spread;
};

// Struct FSpawnPointData	is declared	in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
struct GAMEPLAY_API FSpawnPointData
{
    BITFIELD bValid:1;
    FStringNoInit SpawnPointName;
    FVector SpawnPointLocation;
};

// Struct FHUDPositionData	is declared	in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
struct GAMEPLAY_API FHUDPositionData
{
    INT posX;
    INT posY;
    BITFIELD bOccupiedByPlayer:1;
    BITFIELD bOccupied:1;
    BITFIELD bNotLabelled:1;
    FStringNoInit SwitchHotKey;
};

// Struct FPOIInfo	is declared	in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
struct GAMEPLAY_API FPOIInfo
{
    class UClass* radarInfoClass;
    FVector Location;
    FStringNoInit LabelText;
};

// Struct FClientObjectiveInfo	is declared	in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
struct GAMEPLAY_API FClientObjectiveInfo
{
    class UClass* radarInfoClass;
    FStringNoInit Description;
    BYTE status;
    BYTE Type;
    BITFIELD bFlashing:1;
    BYTE State;
    BITFIELD IsFriendly:1;
    class UClass* TeamInfoClass;
};

// Struct FClientObjectiveActorInfo	is declared	in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
struct GAMEPLAY_API FClientObjectiveActorInfo
{
    BYTE objectiveDataIndex;
    BITFIELD IsFriendly:1;
    class UClass* TeamInfoClass;
    FLOAT XPosition;
    FLOAT YPosition;
    FLOAT Distance;
    INT height;
    INT ScreenX;
    INT ScreenY;
    BITFIELD bFlashing:1;
};

// Struct FMarkerData	is declared	in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
struct GAMEPLAY_API FMarkerData
{
    class UClass* Type;
    INT ScreenX;
    INT ScreenY;
    BYTE State;
    BITFIELD Friendly:1;
    class UClass* Team;
};

// Struct FHUDMessage	is declared	in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
struct GAMEPLAY_API FHUDMessage
{
    FStringNoInit Text;
    BYTE Type;
};

// Struct FEventMessage	is declared	in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
struct GAMEPLAY_API FEventMessage
{
    FStringNoInit StringOne;
    BYTE StringOneType;
    FStringNoInit StringTwo;
    BYTE StringTwoType;
    class UMaterial* IconMaterial;
};

// Constant MAX_SPAWN_AREAS is declared in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
#define UCONST_MAX_SPAWN_AREAS 20

// "event"	function whose parameters correspond to	"struct UClientSideCharacter_eventGetTeamColor_Parms"	is declared	in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
struct UClientSideCharacter_eventGetTeamColor_Parms
{
	  BYTE alignment;
	  BITFIELD bHighlight;
	  class UClass* ObjectTeam;
	  FColor ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UClientSideCharacter_eventGetTeamAlignment_Parms"	is declared	in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
struct UClientSideCharacter_eventGetTeamAlignment_Parms
{
	  class APlayerCharacterController* localController;
	  class APlayerReplicationInfo* PRI;
	  BYTE ReturnValue;
};

// Struct FSpeakerRef	is declared	in "..\Gameplay\Classes\SpeechManager\SpeakerRecord.uc"
struct GAMEPLAY_API FSpeakerRef
{
    class ACharacter* Character;
    class APlayerReplicationInfo* PRI;
    BITFIELD bAnnouncer:1;
};


// Enum EChannelID is declared in "..\Gameplay\Classes\SpeechManager\SpeechCategory.uc"
enum EChannelID
{
	 CHANNEL_Movement        =0,
	 CHANNEL_Dynamic         =1,
	 CHANNEL_QuickChat       =2,
	 CHANNEL_Announcer       =3,
	 CHANNEL_Scripted        =4,
	 MAX_CHANNELS            =5,
	 CHANNEL_MAX             =6,
};
// Struct FSpeechPoolMap	is declared	in "..\Gameplay\Classes\SpeechManager\SpeechCategory.uc"
struct GAMEPLAY_API FSpeechPoolMap
{
    FName Tag;
    FStringNoInit File;
};



// "event"	function whose parameters correspond to	"struct USpeechCategoryManager_eventLoadCategories_Parms"	is declared	in "..\Gameplay\Classes\SpeechManager\SpeechCategoryManager.uc"
struct USpeechCategoryManager_eventLoadCategories_Parms
{
};
// Enum ESubtitleType is declared in "..\Gameplay\Classes\SpeechManager\SpeechChannel.uc"
enum ESubtitleType
{
	 SUBTITLE_None           =0,
	 SUBTITLE_Cutscene       =1,
	 SUBTITLE_Announcer      =2,
	 SUBTITLE_MAX            =3,
};


// Enum eTribesGameState is declared in "..\Gameplay\Classes\GUI\TribesGUIConfig.uc"
enum eTribesGameState
{
	 GAMESTATE_None          =0,
	 GAMESTATE_EntryLoading  =1,
	 GAMESTATE_LevelLoading  =2,
	 GAMESTATE_CutsceneMissionStart=3,
	 GAMESTATE_CutsceneMissionEnd=4,
	 GAMESTATE_PreGame       =5,
	 GAMESTATE_MidGame       =6,
	 GAMESTATE_PostGame      =7,
	 GAMESTATE_ClientTravel  =8,
	 GAMESTATE_MAX           =9,
};

// Struct FMutatorRecord	is declared	in "..\Gameplay\Classes\xAdmin\xUtil.uc"
struct GAMEPLAY_API FMutatorRecord
{
    FStringNoInit ClassName;
    class UClass* mutClass;
    FStringNoInit GroupName;
    FStringNoInit FriendlyName;
    FStringNoInit Description;
    BYTE bActivated;
};



// Class	APlayerCharacterController is declared in "..\Gameplay\Classes\CharacterController\PlayerCharacterController.uc"
class GAMEPLAY_API	APlayerCharacterController	: public APlayerController
{
public:
    BYTE bObjectives;
    BYTE bZoom;
    BYTE bQuickChat;
    BYTE bDropWeapon;
    BYTE bLoadoutSelection;
    class ARook* Rook;
    class ACharacter* Character;
    TArrayNoInit<class USavedMove*> TribesSavedMoves;
    TArrayNoInit<class USavedMove*> TribesFreeMoves;
    class USavedMove* TribesPendingMove;
    FVector replayFromStartLocation;
    FVector replayFromEndLocation;
    FLOAT replayFromAccumulator;
    FVector replayFromVelocity;
    FLOAT replayFromEnergy;
    BYTE replayFromMovement;
    INT replicateMoveCalls;
    INT combinedMoves;
    INT correctedMoves;
    INT dualMoves;
    FLOAT ExactPing;
    FLOAT TimeMarginSlack;
    FLOAT lastReplicationCallTime;
    BITFIELD bDebugSpeedhack:1;
    FLOAT SpeedhackLastAppTime;
    FLOAT SpeedhackLastComparison;
    FLOAT SpeedhackComparison;
    FStringNoInit currentHUDClass;
    INT debugLogLevel;
    FClientAdjustment PendingAdjustment;
    class UTribesHUDManager* HUDManager;
    FStringNoInit spectatorHUDClass;
    FStringNoInit countdownHUDClass;
    FStringNoInit gameEndHUDClass;
    FStringNoInit respawnHUDClass;
    FStringNoInit vehicleHUDClass;
    FStringNoInit turretHUDClass;
    FStringNoInit waitRoundEndHUDClass;
    FStringNoInit waitGameStartHUDClass;
    FStringNoInit commandHUDClass;
    TArrayNoInit<FString> MutedPlayerList;
    FStringNoInit GUIPackage;
    FStringNoInit SPEscapeMenuClass;
    FStringNoInit MPEscapeMenuClass;
    FStringNoInit MPStatsClass;
    FStringNoInit MPWeaponStatsClass;
    FStringNoInit MPGameStatsClass;
    FStringNoInit MPAdminClass;
    FStringNoInit HelpScreenClass;
    class UCinematicOverlay* CinematicOverlay;
    class ASensorListNode* detectedFriendlyList;
    class ASensorListNode* detectedEnemyList;
    BITFIELD commandHUDVisible:1;
    FLOAT radarZoomScale;
    class UClientSideCharacter* clientSideChar;
    TArrayNoInit<class AActor*> RenderedRooks;
    BITFIELD bForcedRespawn:1;
    FStringNoInit inventoryStationMenuClass;
    INT animationDebugCounter;
    INT movementDebugCounter;
    BYTE alertnessMode;
    FLOAT alertnessDecayTime;
    BYTE groundMovementMode;
    class ULoadout* currentLoadout;
    TArrayNoInit<FLOAT> radarZoomScales;
    INT radarZoomIndex;
    TArrayNoInit<FLOAT> zoomedFOVs;
    TArrayNoInit<FLOAT> zoomedMouseScale;
    TArrayNoInit<FLOAT> zoomMagnificationLevels;
    FLOAT zoomSpeed;
    INT ZoomLevel;
    FLOAT maxSpectatorZoom;
    FLOAT minSpectatorZoom;
    TArrayNoInit<INT> ChatWindowSizes;
    INT ChatWindowSizeIndex;
    TArrayNoInit<INT> SPChatWindowSizes;
    INT SPChatWindowSizeIndex;
    FVector InvExtCamOffset;
    BITFIELD bTeamMarkerColors:1;
    BITFIELD bHideFirstPersonWeapon:1;
    class AActor* lastIdentified;
    FLOAT lastIdentifiedDuration;
    FVector lastIdentifiedHitLocation;
    FLOAT m_identifyTime;
    FLOAT m_identifyFrequency;
    FLOAT m_identifyRange;
    FLOAT IdentifyRadius;
    FStringNoInit ResolutionString;
    INT ResolutionX;
    INT ResolutionY;
    class AActor* lastHurt;
    class UClass* lastWeaponClass;
    class UInventoryStationInteraction* inventoryStationInterface;
    class AInventoryStationAccess* InventoryStation;
    class AResupplyStation* currentResupply;
    BITFIELD inventoryStationWaitingForCharacter:1;
    class AInventoryStationAccess* inventoryStationWaitingForCharacterInput;
    BITFIELD bWasUsingDeployable:1;
    FVector damageFlashColor;
    FLOAT damageFlashScale;
    FLOAT maxFlashThreshold;
    FLOAT minFlashThreshold;
    FLOAT damageFlashMultiplier;
    class APlayerControllerCamera* controllingCamera;
    class ARoundInfo* RoundInfo;
    class ABaseInfo* spawnBase;
    FLOAT respawnDelay;
    INT livesLeft;
    BITFIELD bWaitingForRoundEnd:1;
    BITFIELD bUseEnabled:1;
    FLOAT objectivesUpdateRate;
    class AObjectivesList* objectives;
    class AUseableObject* CurrentUseableObject;
    class AUseableObject* PromptingUseableObject;
    class UClass* PromptingObjectClass;
    class UClass* PromptingDataClass;
    FVector PromptingObjectLocation;
    BYTE PromptingObjectPromptIndex;
    BITFIELD PromptingObjectCanBeUsed:1;
    class AInventoryStationAccess* CurrentUseableInventoryAccess;
    FStringNoInit lowPriorityPromptText;
    FLOAT lowPriorityPromptTimeout;
    class ATalkingHeadCamera* currentTalkingHeadCam;
    class AScript* talkingHeadScript;
    BITFIELD bCountDown:1;
    FLOAT countDown;
    INT ChatCount;
    FLOAT LastValidChatTime;
    FLOAT ChatSpamMutedTime;
    INT MaxMessageTextLength;
    BITFIELD ChatSpamGuardEnabled:1;
    INT ChatSpamMaxMessages;
    FLOAT ChatSpamThresholdTime;
    FLOAT ChatSpamMutePeriod;
    FStringNoInit vehiclePositionSwitchOneKey;
    FStringNoInit vehiclePositionSwitchTwoKey;
    FStringNoInit vehiclePositionSwitchThreeKey;
    FStringNoInit gameStatsKey;
    FStringNoInit myStatsKey;
    FStringNoInit adminKey;
    FStringNoInit respawnKey;
    TArrayNoInit<FSkinPreferenceMapping> skinPreferences;
    BITFIELD bJustRespawned:1;
    class UClass* armorClassBeforeInventoryAccess;
    class UPlayerCamera* Camera;
    FName introCameraOldState;
    class AScript* introCameraScript;
    BITFIELD bOldBehindView:1;
    TArrayNoInit<class APointOfInterest*> PointsOfInterest;
	   DECLARE_FUNCTION(execResetSpeedhack);
	   DECLARE_FUNCTION(execdynamicTurretRotationProcessing);
	   DECLARE_FUNCTION(execCheckSpeedHack);
	  void	eventSendClientAdjustment()
	  {
		   ProcessEvent(FindFunctionChecked(GAMEPLAY_SendClientAdjustment),NULL);
	  }
	   DECLARE_CLASS(APlayerCharacterController,APlayerController,0|CLASS_Config,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(APlayerCharacterController)
};

// Class	AEquipment is declared in "..\Gameplay\Classes\Equipment\Equipment.uc"
class GAMEPLAY_API	AEquipment	: public AActor
{
public:
    BITFIELD bCanDrop:1;
    FLOAT droppedElasticity;
    INT dropVelocity;
    FStringNoInit Prompt;
    FStringNoInit localizedName;
    FStringNoInit infoString;
    class UMaterial* inventoryIcon;
    class UMaterial* hudIcon;
    FMatCoords hudIconCoords;
    class UMaterial* hudRefireIcon;
    FMatCoords hudRefireIconCoords;
    class UMaterial* attentionFXMaterial;
    FLOAT attentionFXSpacing;
    FLOAT attentionFXDuration;
    BITFIELD bCanPickup:1;
    BITFIELD bDropped:1;
    BITFIELD bHeld:1;
    class AEquipment* Next;
    class AEquipment* Prev;
    FName heldStartState;
    BITFIELD bPlayPickupSound:1;
    BITFIELD sensorUpdateFlag:1;
    FLOAT nextAttentionTime;
    FLOAT attentionLeft;
    class AEquipmentSpawnPoint* spawnPoint;
    BYTE awaitingPickupPhysics;
    class AEquipmentPickupProxy* pickupProxy;
    FLOAT pickupRadius;
	   DECLARE_CLASS(AEquipment,AActor,0,Gameplay)
	virtual UBOOL Tick(FLOAT DeltaTime, enum ELevelTick TickType);
};

// Class	AEquippable is declared in "..\Gameplay\Classes\Equipment\Equippable.uc"
class GAMEPLAY_API	AEquippable	: public AEquipment
{
public:
    class UMesh* firstPersonMesh;
    class UMesh* thirdPersonMesh;
    class UMesh* firstPersonAltMesh;
    class UMesh* thirdPersonAltMesh;
    class UStaticMesh* thirdPersonStaticMesh;
    class UStaticMesh* thirdPersonAltStaticMesh;
    FVector thirdPersonAttachmentOffset;
    FName thirdPersonAttachmentBone;
    FVector firstPersonOffset;
    FVector firstPersonAltOffset;
    FLOAT firstPersonBobMultiplier;
    FLOAT firstPersonTraceLength;
    FVector firstPersonTraceExtent;
    FLOAT firstPersonAltTraceLength;
    FVector firstPersonAltTraceExtent;
    BITFIELD bFirstPersonUseTrace:1;
    FStringNoInit animPrefix;
    BITFIELD automaticallyHold:1;
    FLOAT firstPersonInterpStep;
    FLOAT firstPersonInterpTarget;
    FLOAT firstPersonInterpCurrent;
    FLOAT unequipDuration;
    FLOAT equipDuration;
    class IIFiringMotor* rookMotor;
    BITFIELD bMeshChangeOK:1;
    class ARook* rookOwner;
    BITFIELD bIsFirstPerson:1;
    FLOAT startEquippingTime;
    BYTE fireCount;
    BYTE localFireCount;
    BYTE demoFireCount;
    BYTE localDemoFireCount;
    BITFIELD equipped:1;
    FLOAT equipDurationCounter;
    FVector equippablePos;
    FName fireState;
    FName releaseFireState;
    BITFIELD attemptedAttach:1;
    class UClass* animClass;
    FStringNoInit equippedArmAnim;
    BITFIELD bPlayedCharacterEquipAnim:1;
	  BITFIELD	eventreleaseFire(BITFIELD bClientOnly)
	  {
        AEquippable_eventreleaseFire_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.bClientOnly=bClientOnly;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_releaseFire),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventFire(BITFIELD _fireOnce)
	  {
        AEquippable_eventFire_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms._fireOnce=_fireOnce;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_Fire),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(AEquippable,AEquipment,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(AEquippable)
};

// Class	ADeployable is declared in "..\Gameplay\Classes\Equipment\Deployable\Deployable.uc"
class GAMEPLAY_API	ADeployable	: public AEquippable
{
public:
    FLOAT deployRange;
    BITFIELD bCanDeployOnWall:1;
    FLOAT exclusiveRange;
    BITFIELD bCanBeStolen:1;
    BITFIELD bDeployed:1;
    BITFIELD bIsInStation:1;
    class ATeamInfo* Team;
    BITFIELD bDeploying:1;
    class UMaterial* hudReticuleOk;
    FLOAT hudReticuleOkWidth;
    FLOAT hudReticuleOkHeight;
    FLOAT hudReticuleOkCenterX;
    FLOAT hudReticuleOkCenterY;
    class UMaterial* hudReticuleBad;
    FLOAT hudReticuleBadWidth;
    FLOAT hudReticuleBadHeight;
    FLOAT hudReticuleBadCenterX;
    FLOAT hudReticuleBadCenterY;
    FRotator deployRotOffset;
    FName thirdPersonInventoryAttachmentBone;
    FVector thirdPersonInventoryAttachmentOffset;
    FName originalAttachmentBone;
    FName deployedQuickChatTag;
    BYTE lastTestResult;
	   DECLARE_CLASS(ADeployable,AEquippable,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ADeployable)
};

// Class	AWeapon is declared in "..\Gameplay\Classes\Equipment\Weapon\Weapon.uc"
class GAMEPLAY_API	AWeapon	: public AEquippable
{
public:
    INT ammoCount;
    INT ammoUsage;
    FLOAT roundsPerSecond;
    BITFIELD bNeedIdleFX:1;
    class UClass* projectileClass;
    FName projectileSpawnBone;
    FVector projectileSpawnOffset;
    FLOAT projectileVelocity;
    FLOAT projectileInheritedVelFactor;
    TArrayNoInit<class UMaterial*> emptyMaterials;
    class UClass* aimClass;
    FRotator AIspread;
    FLOAT AIAccelerationModifier;
    BITFIELD bGenerateMissSpeechEvents:1;
    class UMaterial* hudReticule;
    FLOAT hudReticuleWidth;
    FLOAT hudReticuleHeight;
    FLOAT hudReticuleCenterX;
    FLOAT hudReticuleCenterY;
    FLOAT lastFireTime;
    FLOAT startEquippingTime;
    BITFIELD fireOnce:1;
    BITFIELD bFiredWeapon:1;
    BITFIELD noAmmo:1;
    FName fireAnimation;
    BITFIELD bMelee:1;
    FStringNoInit fireAnimSubString;
    INT localAmmoCount;
    FLOAT speedPackScale;
    BITFIELD pickupDelay:1;
    BITFIELD localPickupDelay:1;
    BITFIELD bBeingSwitched:1;
	   DECLARE_FUNCTION(execAIAimTrace);
	   DECLARE_FUNCTION(execaimTrace);
	  BITFIELD	eventreleaseAltFire()
	  {
        AWeapon_eventreleaseAltFire_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_releaseAltFire),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventAltFire(BITFIELD _fireOnce)
	  {
        AWeapon_eventAltFire_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms._fireOnce=_fireOnce;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_AltFire),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(AWeapon,AEquippable,0|CLASS_Config,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(AWeapon)
};

// Class	ATurretWeapon is declared in "..\Gameplay\Classes\Equipment\Weapon\TurretWeapon.uc"
class GAMEPLAY_API	ATurretWeapon	: public AWeapon
{
public:
	   DECLARE_CLASS(ATurretWeapon,AWeapon,0|CLASS_Config,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ATurretWeapon)
};

// Class	ATribesHUDBase is declared in "..\Gameplay\Classes\HUD\TribesHUDBase.uc"
class GAMEPLAY_API	ATribesHUDBase	: public AHUD
{
public:
    BITFIELD bAllowCommandHUDSwitching:1;
    BITFIELD bShowCursor:1;
    class APlayerCharacterController* Controller;
    class UClientSideCharacter* clientSideChar;
    FStringNoInit quickKeyText;
    TArrayNoInit<FTagBindingMap> TagBindings;
	   DECLARE_FUNCTION(execReplacePromptKeyBinds);
	   DECLARE_CLASS(ATribesHUDBase,AHUD,0|CLASS_Transient|CLASS_Config,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ATribesHUDBase)
};

// Class	ADynamicObject is declared in "..\Gameplay\Classes\Physics\DynamicObject.uc"
class GAMEPLAY_API	ADynamicObject	: public AHavokActor
{
public:
    FLOAT Mass;
    FLOAT Elasticity;
    FLOAT friction;
    FLOAT LinearDamping;
    FLOAT AngularDamping;
    FLOAT Health;
    BITFIELD Invulnerable:1;
    BITFIELD Blocking:1;
    BITFIELD Stationary:1;
    BITFIELD Enabled:1;
    BITFIELD Shadows:1;
    BITFIELD Volatile:1;
    BITFIELD Freeze:1;
    BITFIELD FadeOut:1;
    BITFIELD LimitedLife:1;
    FLOAT lifetime;
    BITFIELD Explosion:1;
    FLOAT ExplosionForce;
    TArrayNoInit<class UClass*> Children;
    TArrayNoInit<class UClass*> Explosions;
    TArrayNoInit<class UColorModifier*> Style;
    BITFIELD StyleCreated:1;
    BITFIELD FadingOut:1;
    FLOAT FadeOutAlpha;
    FLOAT FadeOutTime;
    FLOAT FadeOutLength;
    BITFIELD NextVersionPending:1;
    BITFIELD NextVersionCalled:1;
	   DECLARE_FUNCTION(execGetExplosionSocketName);
	   DECLARE_FUNCTION(execGetChildSocketName);
	   DECLARE_FUNCTION(execInitialize);
	   DECLARE_FUNCTION(execLoadSkinsFromMaterials);
	   DECLARE_FUNCTION(execGetScalabilitySetting);
	   DECLARE_FUNCTION(execsetNativeActorData);
	  void	eventNextVersion()
	  {
		   ProcessEvent(FindFunctionChecked(GAMEPLAY_NextVersion),NULL);
	  }
	   DECLARE_CLASS(ADynamicObject,AHavokActor,0,Gameplay)
	virtual void initialiseHavokDataObject();	
	virtual void HavokPreSyncCallback(const FVector& deltaPos);
};

// Class	AFlightControlJoint is declared in "..\Gameplay\Classes\Vehicles\Common\FlightControlJoint.uc"
class GAMEPLAY_API	AFlightControlJoint	: public AHavok6DOFConstraint
{
public:
	   DECLARE_CLASS(AFlightControlJoint,AHavok6DOFConstraint,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(AFlightControlJoint)
};

// Class	ABaseInfo is declared in "..\Gameplay\Classes\Info\BaseInfo.uc"
class GAMEPLAY_API	ABaseInfo	: public AInfo
{
public:
    class ATeamInfo* Team;
    BYTE baseType;
    FStringNoInit Description;
    class ASpawnArray* SpawnArray;
    FVector SpawnArrayLocation;
    class AMPCarryableContainer* container;
    TArrayNoInit<class ABaseDevice*> devices;
    TArrayNoInit<class APowerGenerator*> generators;
    TArrayNoInit<class APlayerStart*> playerStarts;
    TArrayNoInit<class APowerIndicator*> powerIndicators;
    BITFIELD bValidRespawnBase:1;
    class ATeamInfo* m_oldTeam;
    BITFIELD m_bPowered:1;
	   DECLARE_CLASS(ABaseInfo,AInfo,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ABaseInfo)
};

// Class	AMusicInfo is declared in "..\Gameplay\Classes\Info\MusicInfo.uc"
class GAMEPLAY_API	AMusicInfo	: public AMusicManagerBase
{
public:
    FStringNoInit IntroMusic;
    FStringNoInit ExplorationMusic;
    FStringNoInit CombatMusic;
    FStringNoInit TensionMusic;
    FDynamicMusicOptions CombatMusicOptions;
    FDynamicMusicOptions TensionMusicOptions;
    FLOAT IntroMusicFadeOutTime;
    BYTE CurrentMusicType;
    FLOAT CurrentSongTimer;
    FLOAT CurrentSongFadeTime;
    BITFIELD TriggeredIntroMusic:1;
    FLOAT CurrentMusicLength;
    INT CurrentSongHandle;
	   DECLARE_FUNCTION(execGetMusicDuration);
	   DECLARE_CLASS(AMusicInfo,AMusicManagerBase,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(AMusicInfo)
};

// Class	ASkinInfo is declared in "..\Gameplay\Classes\Info\SkinInfo.uc"
class GAMEPLAY_API	ASkinInfo	: public AInfo
{
public:
    TArrayNoInit<class UMaterial*> meshSkins;
    TArrayNoInit<class UMaterial*> jetpackSkins;
    TArrayNoInit<class UMaterial*> armsSkins;
    class UMesh* applicableMesh;
	   DECLARE_FUNCTION(execloadAllSkins);
	   DECLARE_CLASS(ASkinInfo,AInfo,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ASkinInfo)
};

// Class	ATeamInfo is declared in "..\Gameplay\Classes\Info\TeamInfo.uc"
class GAMEPLAY_API	ATeamInfo	: public AInfo
{
public:
    TArrayNoInit<FRoleData> combatRoleData;
    FStringNoInit localizedName;
    class UMaterial* ownershipMaterial;
    class UMaterial* baseDeviceIllumMaterial;
    class UMaterial* altOwnershipMaterial;
    class UMaterial* altBaseDeviceIllumMaterial;
    FColor territoryTendrilColor;
    FLOAT objectivesUpdateRate;
    class AObjectivesList* objectives;
    INT Score;
    BITFIELD bWonLastRound:1;
    INT MAX_BASES;
    TArrayNoInit<class ABaseInfo*> bases;
    class ABaseInfo* respawnBases[10];
    FStringNoInit respawnBaseNames[10];
    FVector respawnBaseLocations[10];
    INT MAX_RESPAWN_VEHICLES;
    class AVehicle* respawnVehicles[10];
    TArrayNoInit<class ASensorTower*> sensorGrid;
    FLOAT sensorGridRate;
    FLOAT LastUpdateTime;
    TArrayNoInit<class ARook*> detectedEnemies;
    TArrayNoInit<class ARook*> detectedFriendlies;
    BITFIELD bSensorGridFunctional:1;
    INT numPlayerStarts;
    class UMaterial* buggySkin;
    class UMaterial* podSkin;
    class UMaterial* tankSkin;
    class UMaterial* assaultShipSkin;
    class ATeamInfo* onlyDamagedByTeam;
    BITFIELD bNoMoreCarryables:1;
    FColor TeamColor;
    FColor TeamHighlightColor;
    FColor relativeFriendlyTeamColor;
    FColor relativeFriendlyHighlightColor;
    FColor relativeEnemyTeamColor;
    FColor relativeEnemyHighlightColor;
    INT TeamIndex;
	   DECLARE_FUNCTION(exectickSensors);
	  void	eventupdateSensors()
	  {
		   ProcessEvent(FindFunctionChecked(GAMEPLAY_updateSensors),NULL);
	  }
	   DECLARE_CLASS(ATeamInfo,AInfo,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ATeamInfo)
};

// Class	AInventoryStationPlatform is declared in "..\Gameplay\Classes\Rook\BaseDevice\InventoryStation\InventoryStationPlatform.uc"
class GAMEPLAY_API	AInventoryStationPlatform	: public AActor
{
public:
    class AInventoryStation* ownerInventoryStation;
	   DECLARE_CLASS(AInventoryStationPlatform,AActor,0,Gameplay)
	virtual UMaterial* GetSkin( INT Index );

	virtual void PostRenderCallback(UBOOL InMainScene);
};

// Class	AMotor is declared in "..\Gameplay\Classes\Motor\Motor.uc"
class GAMEPLAY_API	AMotor	: public AActor
{
public:
	   DECLARE_CLASS(AMotor,AActor,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(AMotor)
};

// Class	ACharacterMotor is declared in "..\Gameplay\Classes\Motor\CharacterMotor.uc"
class GAMEPLAY_API	ACharacterMotor	: public AMotor
{
public:
    class ACharacter* Character;
    FName switchingToState;
    class AWeapon* switchToWeapon;
    class AWeapon* lastUsedWeapon;
    class ADeployable* switchToDeployable;
    FLOAT unequipDuration;
    BITFIELD bFirePressed:1;
	   DECLARE_FUNCTION(execreleaseFire);
	   DECLARE_FUNCTION(execreleaseAltFire);
	   DECLARE_FUNCTION(execAltFire);
	   DECLARE_FUNCTION(execFire);
	   DECLARE_FUNCTION(execGetViewRotation);
	   DECLARE_FUNCTION(execgetMoveYawDelta);
	   DECLARE_FUNCTION(execgetMoveRotation);
	   DECLARE_FUNCTION(execSetViewRotation);
	   DECLARE_FUNCTION(execsetAIMoveRotation);
	   DECLARE_FUNCTION(execsetMoveRotation);
	   DECLARE_FUNCTION(execmoveCharacter);
	  void	eventsetZoomed(BITFIELD bZoomed)
	  {
        ACharacterMotor_eventsetZoomed_Parms Parms;
		   Parms.bZoomed=bZoomed;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_setZoomed),&Parms);
	  }
	  BITFIELD	eventsetDeployable(class ADeployable* D)
	  {
        ACharacterMotor_eventsetDeployable_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.D=D;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_setDeployable),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventSetWeapon(class AWeapon* W)
	  {
        ACharacterMotor_eventSetWeapon_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.W=W;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_SetWeapon),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(ACharacterMotor,AMotor,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ACharacterMotor)
};

// Class	ATurretMotor is declared in "..\Gameplay\Classes\Motor\TurretMotor.uc"
class GAMEPLAY_API	ATurretMotor	: public AMotor
{
public:
    class ATurret* Turret;
	   DECLARE_FUNCTION(execreleaseFire);
	   DECLARE_FUNCTION(execFire);
	   DECLARE_FUNCTION(execGetViewRotation);
	   DECLARE_FUNCTION(execgetViewTarget);
	   DECLARE_FUNCTION(execSetViewTarget);
	  void	eventsetZoomed(BITFIELD bZoomed)
	  {
        ATurretMotor_eventsetZoomed_Parms Parms;
		   Parms.bZoomed=bZoomed;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_setZoomed),&Parms);
	  }
	   DECLARE_CLASS(ATurretMotor,AMotor,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ATurretMotor)
};

// Class	AVehicleMotor is declared in "..\Gameplay\Classes\Motor\VehicleMotor.uc"
class GAMEPLAY_API	AVehicleMotor	: public AMotor
{
public:
    class AVehicle* Vehicle;
    FVector currentSteering;
	   DECLARE_CLASS(AVehicleMotor,AMotor,0,Gameplay)
	static const float RADIANS_TO_UNREAL;
	virtual void driveVehicle(const FVector& steering, const FVector& direction);
	virtual void stop();
	virtual void rotateToward(const FVector& target);
};

// Class	AAircraftMotor is declared in "..\Gameplay\Classes\Motor\AircraftMotor.uc"
class GAMEPLAY_API	AAircraftMotor	: public AVehicleMotor
{
public:
    class AJointControlledAircraft* aircraft;
	   DECLARE_CLASS(AAircraftMotor,AVehicleMotor,0,Gameplay)
	virtual void driveVehicle(const FVector& steering, const FVector& direction);
	virtual void rotateToward(const FVector& target);
	virtual void steerAircraft(const FRotator& steering);
};

// Class	APodMotor is declared in "..\Gameplay\Classes\Motor\PodMotor.uc"
class GAMEPLAY_API	APodMotor	: public AAircraftMotor
{
public:
	   DECLARE_CLASS(APodMotor,AAircraftMotor,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(APodMotor)
};

// Class	ACarMotor is declared in "..\Gameplay\Classes\Motor\CarMotor.uc"
class GAMEPLAY_API	ACarMotor	: public AVehicleMotor
{
public:
    class ACar* Car;
	   DECLARE_CLASS(ACarMotor,AVehicleMotor,0,Gameplay)
	virtual void driveVehicle(const FVector& steering, const FVector& direction);
};

// Class	ABuggyMotor is declared in "..\Gameplay\Classes\Motor\BuggyMotor.uc"
class GAMEPLAY_API	ABuggyMotor	: public ACarMotor
{
public:
	   DECLARE_CLASS(ABuggyMotor,ACarMotor,0,Gameplay)
	virtual void driveVehicle(const FVector& steering, const FVector& direction);
};

// Class	ARook is declared in "..\Gameplay\Classes\Rook\Rook.uc"
class GAMEPLAY_API	ARook	: public APawn
{
public:
    FLOAT healthMaximum;
    FStringNoInit HUDType;
    BITFIELD bCanRepair:1;
    class ATeamInfo* m_team;
    class ATeamInfo* m_localTeam;
    class ASquadInfo* m_squad;
    class UTribesVisionNotifier* vision;
    class UHearingNotifier* hearing;
    class UShotNotifier* ShotNotifier;
    FLOAT PeripheralVisionZAngle;
    FLOAT SightRadiusToPlayer;
    BYTE AI_LOD_LevelMP;
    FLOAT AI_LOD_ActivationDistance;
    FLOAT AI_LOD_DeactivationDistance;
    BITFIELD bAIThreat:1;
    FLOAT shotAngularDeviation;
    FLOAT shotAngularDeviationMP;
    FRange shotLeadAbility;
    FRange shotLeadAbilityMP;
    FLOAT reactionDelay;
    FLOAT reactionDelayMP;
    FLOAT visionMemory;
    BYTE Alertness;
    INT AI_LOD_deactivation_exemption_ticks;
    FVector pastPositions[4];
    INT pastPositionsIndex;
    FLOAT pastPositionsTimeAccu;
    class APawn* attacker;
    FLOAT expectedImpactTime;
    FLOAT lastShotFiredTime;
    BITFIELD bUnobstructedLOF:1;
    BITFIELD bDeferredAICleanup:1;
    FLOAT tickTime;
    FLOAT tickTimeOrg;
    FRange tickTimeUpdateRange;
    class UTyrion_ResourceBase* vehicleAI;
    class UTyrion_ResourceBase* mountAI;
    BITFIELD bShowLOADebug:1;
    BITFIELD bShowSensingDebug:1;
    FVector loaStartPoint;
    FVector loaEndPoint;
    FVector loaStartPoint2;
    FVector loaEndPoint2;
    BITFIELD loaHit:1;
    BITFIELD bShowTyrionCharacterDebug:1;
    BITFIELD bShowTyrionMovementDebug:1;
    BITFIELD bShowTyrionWeaponDebug:1;
    BITFIELD bShowTyrionHeadDebug:1;
    BITFIELD bShowNavigationDebug:1;
    BITFIELD bShowJSDebug:1;
    FVector estLocation;
    FVector movementForce;
    BITFIELD bShowSquadDebug:1;
    FVector desiredLocation;
    BITFIELD logAlertnessChanges:1;
    FLOAT ShadowLightDistance;
    FLOAT MaxShadowTraceDistance;
    BITFIELD bCanBeSensed:1;
    BITFIELD bIsDetectableByEnemies:1;
    BITFIELD sensorUpdateFlag:1;
    FLOAT lastDetectedTime;
    BITFIELD bAlwaysMarked:1;
    class UClass* radarInfoClass;
    TArrayNoInit<class ACharacter*> repairers;
    TArrayNoInit<FDamageComponent> damageComponents;
    BYTE clientDamageComponentMask;
    BYTE damageComponentMask;
    FLOAT componentBreakThreshold;
    FName playerControllerState;
    BITFIELD bUseAlternateOwnershipMaterial:1;
    BITFIELD bUseAlternateSelfIllumMaterial:1;
    FName teamSelfIllumSkinName;
    class APawn* flameSource;
    class UClass* flameDamageType;
    FLOAT flameDamagePerSecond;
    FLOAT flameDamageReductionPerSecond;
    class UClass* personalShieldClass;
    class AShield* personalShield;
    FLOAT teamDamagePercentage;
    BITFIELD effectLogging:1;
    TArrayNoInit<FString> loopingEffects;
    FLOAT grapplerRetentionScale;
    FLOAT repDepLastRateAddition;
    FLOAT repDepRepairRate;
    FLOAT repPakLastRateAddition;
    FLOAT repPakRepairRate;
    FVector UseablePoints[10];
    BYTE UseablePointsValid[10];
    BITFIELD teamSpecificHavokCollisionFiltering:1;
    class ATeamInfo* m_lastTeam;
	   DECLARE_FUNCTION(execIsInVisionCone);
	   DECLARE_FUNCTION(execgroundPredictedLocation);
	   DECLARE_FUNCTION(execpredictedLocation);
	   DECLARE_FUNCTION(execaverageVelocity);
	   DECLARE_FUNCTION(execupdatePastPositions);
	   DECLARE_FUNCTION(execdamageComponentsOnIncreaseHealth);
	   DECLARE_FUNCTION(execdamageComponentsOnDamage);
	   DECLARE_FUNCTION(execcreateDamageComponent);
	   DECLARE_FUNCTION(execbreakDamageComponent);
	   DECLARE_FUNCTION(execupdateHavokCollisionFilter);
	  BITFIELD	eventIsFriendly(class ARook* otherGuy)
	  {
        ARook_eventIsFriendly_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.otherGuy=otherGuy;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_IsFriendly),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventcleanupAI()
	  {
        ARook_eventcleanupAI_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_cleanupAI),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventOnShotFired(class AProjectile* Projectile)
	  {
        ARook_eventOnShotFired_Parms Parms;
		   Parms.Projectile=Projectile;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_OnShotFired),&Parms);
	  }
	  void	eventonTeamChange()
	  {
		   ProcessEvent(FindFunctionChecked(GAMEPLAY_onTeamChange),NULL);
	  }
	  void	eventProcessBurnDamage(FLOAT Delta)
	  {
        ARook_eventProcessBurnDamage_Parms Parms;
		   Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_ProcessBurnDamage),&Parms);
	  }
	  void	eventProcessRepair(FLOAT Delta)
	  {
        ARook_eventProcessRepair_Parms Parms;
		   Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_ProcessRepair),&Parms);
	  }
	   DECLARE_CLASS(ARook,APawn,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ARook)
};

// Class	ABaseDevice is declared in "..\Gameplay\Classes\Rook\BaseDevice\BaseDevice.uc"
class GAMEPLAY_API	ABaseDevice	: public ARook
{
public:
    class ABaseInfo* ownerBase;
    class UMaterial* DestroyedDiffuse;
    FLOAT functionalHealthThreshold;
    FLOAT damagedHealthThreshold;
    class UClass* destroyedExplosionClass;
    class UClass* baseDeviceMessageClass;
    class UClass* secondaryBaseDeviceMessageClass;
    FStringNoInit localizedName;
    BITFIELD bInitialization:1;
    BITFIELD bPowered:1;
    BITFIELD m_bSwitchedOn:1;
    BITFIELD bWasDeployed:1;
    BITFIELD bCurrentlyDeploying:1;
    BITFIELD bHasOpenAnim:1;
    class ACharacter* deployer;
    INT m_ownershipMaterialIdx;
    INT lastUnderAttackTime;
    INT lastOfflineTime;
    INT lastOnlineTime;
    class APawn* lastAttacker;
    FName savedAnim;
    BITFIELD bLoopSavedAnim:1;
    INT OWNERSHIP_MATERIAL_UNDISCOVERED;
    INT OWNERSHIP_MATERIAL_NOT_FOUND;
	  BITFIELD	eventisPowered()
	  {
        ABaseDevice_eventisPowered_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_isPowered),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventisDisabled()
	  {
        ABaseDevice_eventisDisabled_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_isDisabled),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventisDamaged()
	  {
        ABaseDevice_eventisDamaged_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_isDamaged),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventisDamagedAtThreshold()
	  {
        ABaseDevice_eventisDamagedAtThreshold_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_isDamagedAtThreshold),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventisActive()
	  {
        ABaseDevice_eventisActive_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_isActive),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(ABaseDevice,ARook,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ABaseDevice)
};

// Class	AEmergencyStation is declared in "..\Gameplay\Classes\Rook\BaseDevice\EmergencyStation.uc"
class GAMEPLAY_API	AEmergencyStation	: public ABaseDevice
{
public:
    FLOAT accessPointOffset;
    FLOAT accessRadius;
    FLOAT accessHeight;
    class UMaterial* activeLightSkin;
    INT activeLightSkinSlot;
    class UClass* repairPackClass;
    class UClass* accessClass;
    FLOAT respawnDelay;
    class AEmergencyStationAccess* access;
    BITFIELD bForceIconVisible:1;
    BYTE AnimationState;
	   DECLARE_CLASS(AEmergencyStation,ABaseDevice,0,Gameplay)
	virtual UBOOL canBeSeenBy(APawn* pawn) {return false;}	// AI's can't see EmergencyStation's
};

// Class	AEnergyBarrier is declared in "..\Gameplay\Classes\Rook\BaseDevice\EnergyBarrier.uc"
class GAMEPLAY_API	AEnergyBarrier	: public ABaseDevice
{
public:
	   DECLARE_CLASS(AEnergyBarrier,ABaseDevice,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(AEnergyBarrier)
};

// Class	AInventoryStation is declared in "..\Gameplay\Classes\Rook\BaseDevice\InventoryStation\InventoryStation.uc"
class GAMEPLAY_API	AInventoryStation	: public ABaseDevice
{
public:
    INT numberAccessPoints;
    FName baseSocketName;
    class AInventoryStationPlatform* accessPointOne;
    class AInventoryStationPlatform* accessPointTwo;
    class AInventoryStationPlatform* accessPointThree;
    class AInventoryStationPlatform* accessPointFour;
    class AInventoryStationPlatform* localAccessPoints[4];
    TArrayNoInit<class AInventoryStationAccess*> accesses;
    TArrayNoInit<FName> accessPoses;
    TArrayNoInit<FName> extensionPoses;
    class UClass* accessClass;
    FLOAT accessRadius;
    FLOAT accessHeight;
    INT targetAccessIndex;
    INT targetExtensionIndex;
    INT packedIndices;
    INT localPackedIndices;
    BITFIELD repeatSwitch:1;
    BITFIELD localRepeatSwitch:1;
    INT loadoutChangeIndex;
    INT localLoadoutChangeIndex;
    BITFIELD loadoutChangeSwitch:1;
    BITFIELD localLoadoutChangeSwitch:1;
    BITFIELD bDamaged:1;
    FLOAT receiveDamageRadius;
    FLOAT delaySeconds;
    FLOAT armRetractDelayFraction;
    FLOAT armTurnDelayFraction;
    FLOAT armExtendDelayFraction;
    TArrayNoInit<FQueueElement> accessQueue;
	   DECLARE_CLASS(AInventoryStation,ABaseDevice,0,Gameplay)
	virtual void Spawned();
};

// Class	ASwitchStation is declared in "..\Gameplay\Classes\Rook\BaseDevice\SwitchStation\SwitchStation.uc"
class GAMEPLAY_API	ASwitchStation	: public ABaseDevice
{
public:
    FLOAT useableObjectCollisionHeight;
    FLOAT useableObjectCollisionRadius;
	   DECLARE_CLASS(ASwitchStation,ABaseDevice,0,Gameplay)
	virtual UBOOL canBeSeenBy(APawn* pawn) {return false;}	// AI's can't see SwitchStation's
};

// Class	ATurret is declared in "..\Gameplay\Classes\Rook\BaseDevice\Turret.uc"
class GAMEPLAY_API	ATurret	: public ABaseDevice
{
public:
    class ATurretMotor* Motor;
    class ACharacter* Driver;
    BITFIELD bGetOut:1;
    FRotator initialRotation;
    FLOAT currentPitch;
    FLOAT currentYaw;
    INT targetPitch;
    INT targetYaw;
    class UClass* weaponClass;
    FName driverAnimation;
    BITFIELD bCanBeManned:1;
    INT seatedCollisionHeight;
    INT seatedCollisionRadius;
    FLOAT MaxViewPitch;
    FLOAT MaxViewYaw;
    FLOAT ViewRate;
    FLOAT AIViewRate;
    FName rootBone;
    FName seatBone;
    FName pitchBone;
    INT yawOffset;
    INT yawAxis;
    INT pitchAxis;
    BITFIELD bFlipYawDisplay:1;
    BITFIELD bFlipPitchDisplay:1;
    INT oldCollisionHeight;
    INT oldCollisionRadius;
    class AWeapon* Weapon;
    class AWeapon* oldDriverWeapon;
    BITFIELD bWasBehindView:1;
    FTurretEntryData Entry;
    class ATurretEntry* TurretEntry;
	   DECLARE_CLASS(ATurret,ABaseDevice,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ATurret)
};

// Class	ADeployedTurret is declared in "..\Gameplay\Classes\Rook\BaseDevice\DeployedTurret.uc"
class GAMEPLAY_API	ADeployedTurret	: public ATurret
{
public:
    class AController* deployerController;
	   DECLARE_CLASS(ADeployedTurret,ATurret,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ADeployedTurret)
};

// Class	AVehicleSpawnPoint is declared in "..\Gameplay\Classes\Rook\BaseDevice\VehicleSpawnPoint.uc"
class GAMEPLAY_API	AVehicleSpawnPoint	: public ABaseDevice
{
public:
    class UClass* VehicleClass;
    FLOAT spawnDuration;
    FLOAT abandonmentDesturctionStartRadius;
    FLOAT abandonmentDesturctionPeriod;
    FLOAT spawnOffsetHeight;
    BITFIELD bAllowSpawnedVehicleStealing:1;
    class AVehicle* spawnedVehicle;
    FLOAT spawnStartTime;
    INT Index;
    FVector direction;
    FLOAT spawnAnimationLength;
    FName AnimationName;
    FLOAT dummy;
    FVector spawnOffset;
    FName localAnimationName;
    BITFIELD bTearOffAnimation:1;
	   DECLARE_FUNCTION(execspawnVehicle);
	   DECLARE_CLASS(AVehicleSpawnPoint,ABaseDevice,0,Gameplay)
	virtual void PlayReplicatedAnim();
};

// Class	AMPActor is declared in "..\Gameplay\Classes\MPActor\MPActor.uc"
class GAMEPLAY_API	AMPActor	: public ARook
{
public:
    FStringNoInit localizedName;
    BITFIELD bAllowSpectators:1;
    FStringNoInit primaryFriendlyObjectiveDesc;
    FStringNoInit primaryEnemyObjectiveDesc;
    FStringNoInit primaryNeutralObjectiveDesc;
    class UClass* defendStat;
    class UClass* attackStat;
    INT defendRadius;
    INT attackRadius;
    FName idleAnim;
    class UClass* secondaryMessageClass;
    TArrayNoInit<class APlayerCharacterController*> spectatorList;
	   DECLARE_CLASS(AMPActor,ARook,0,Gameplay)
	// stats recording
	virtual UBOOL Tick(float deltaSeconds, ELevelTick tickType);
};

// Class	AMPCarryable is declared in "..\Gameplay\Classes\MPActor\MPCarryable.uc"
class GAMEPLAY_API	AMPCarryable	: public AMPActor
{
public:
    INT maxCarried;
    TArrayNoInit<class UClass*> denominations;
    FLOAT returnTime;
    FLOAT minRespawnTime;
    FLOAT maxRespawnTime;
    FLOAT existenceTime;
    class UMaterial* hudIcon;
    FMatCoords hudIconCoords;
    FLOAT selfPickupTimeout;
    INT stopSpeed;
    FLOAT Elasticity;
    FLOAT Spread;
    BYTE droppedPhysics;
    BITFIELD bRandomizeStartingRotation:1;
    FLOAT maxTimeCarried;
    FLOAT damagePerSecondAfterMaxTimeCarried;
    TArrayNoInit<FVector> randomStartingLocations;
    FName attachmentSocket;
    FVector offsetCOM;
    BITFIELD bIsWeaponType:1;
    BITFIELD bAllowThroughEnergyBarriers:1;
    class UStaticMesh* staticMeshWhileCarried;
    class UMesh* meshWhileCarried;
    FName carriedAnimation;
    BITFIELD bCanBeGrappledInField:1;
    BITFIELD bCanBeGrappledAtHome:1;
    BITFIELD bDontReplicateEffects:1;
    BITFIELD bCanBringIntoVehicle:1;
    FLOAT extraMass;
    BITFIELD bBlockActorsWhenDropped:1;
    FLOAT inheritedVelocityFactor;
    class UClass* CarryableMessageClass;
    class UClass* pickupStat;
    class UClass* carrierKillStat;
    FName pickupEffectEvent;
    FName dropEffectEvent;
    FName thrownEffectEvent;
    FName returnedHomeEffectEvent;
    FName preReturnEffectEvent;
    FName carryingEffectEvent;
    FName idlingEffectEvent;
    FName throwingEffectEvent;
    FName idlingHomeEffectEvent;
    INT numCarried;
    FVector homeLocation;
    FRotator homeRotation;
    class ACharacter* carrier;
    class ACharacter* lastCarrier;
    class AController* carrierController;
    FLOAT timeDropped;
    FLOAT timePickedUp;
    BITFIELD bHome:1;
    class ATimer* existenceTimer;
    BITFIELD bHotPotato:1;
    class AMPCarryableContainer* homeContainer;
    FLOAT lastEnergyBarrierCollisionTime;
    FLOAT timeBetweenEnergyBarrierCollisions;
    FRotator pickupRotation;
    BITFIELD bInitialization:1;
    BITFIELD bCarriedEffect:1;
    BITFIELD bLocalCarriedEffect:1;
    BITFIELD bHomeEffect:1;
    BITFIELD bPreReturnEffect:1;
    BITFIELD bLocalPreReturnEffect:1;
    BITFIELD bLocalHomeEffect:1;
    BITFIELD bThrowingEffect:1;
    BITFIELD bLocalThrowingEffect:1;
    BITFIELD bWasDropped:1;
    BITFIELD bOldWasDropped:1;
    class UClass* carriedObjectClass;
    FLOAT maximumNetUpdateInterval;
    FLOAT minimumNetUpdateInterval;
    FLOAT maximumNextNetUpdateTime;
    FLOAT minimumNextNetUpdateTime;
    FHavokCarryableReplicationState ReplicationState;
    FLOAT lastStateReceiveTime;
    BITFIELD bInitialized:1;
    FDesiredHavokState currentDesiredHavokState;
    FLOAT clientInterpolationPeriod;
    FLOAT clientInterpolationSnapDistance;
	   DECLARE_FUNCTION(execforceNetDirty);
	  void	eventEnergyBarrierCollision()
	  {
		   ProcessEvent(FindFunctionChecked(GAMEPLAY_EnergyBarrierCollision),NULL);
	  }
	  void	eventtoss()
	  {
		   ProcessEvent(FindFunctionChecked(GAMEPLAY_toss),NULL);
	  }
	   DECLARE_CLASS(AMPCarryable,AMPActor,0|CLASS_Config,Gameplay)
	virtual void TickSimulated( FLOAT DeltaSeconds );
	virtual void TickAuthoritative( FLOAT DeltaSeconds );

	virtual bool HavokInitActor();
	virtual void HavokQuitActor();

	class HkClientInterpolationControl* clientInterpolationControl;
};

// Class	ARagdoll is declared in "..\Gameplay\Classes\Character\Ragdoll.uc"
class GAMEPLAY_API	ARagdoll	: public ARook
{
public:
    FLOAT ragdollLifeSpan;
    class UClass* HavokParamsClass;
    BITFIELD bPlayedDeath:1;
    FLOAT jetpackDuration;
    FLOAT jetpackLinearForce;
    FLOAT jetpackTwirlyForce;
    FLOAT ragdollScale;
    FLOAT ragdollMaximumImpulse;
    BITFIELD disableJetpackDeath:1;
    FLOAT ragdollDeathLift;
    BITFIELD jetpack:1;
    FLOAT jetpackTime;
    BITFIELD ragdollTouchedGround:1;
    INT ragdollTickCount;
    FVector TearOffLocation;
    BITFIELD bTearOffLocationValid:1;
    FVector ragdollInheritedVelocity;
    BYTE Movement;
	   DECLARE_CLASS(ARagdoll,ARook,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ARagdoll)
};

// Class	ACharacter is declared in "..\Gameplay\Classes\Character\Character.uc"
class GAMEPLAY_API	ACharacter	: public ARagdoll
{
public:
    FLOAT MovementSpeed;
    FLOAT movementVerticalSpeed;
    FLOAT movementHorizontalSpeed;
    FLOAT movementTangentialSpeed;
    FLOAT movementDirectionalSpeed;
    FLOAT movementAltitude;
    BITFIELD movementCollided:1;
    BITFIELD movementClose:1;
    BITFIELD movementTouching:1;
    BITFIELD movementGrounded:1;
    BITFIELD movementAirborne:1;
    BITFIELD movementWater:1;
    BITFIELD movementUnderWater:1;
    BITFIELD movementZeroGravity:1;
    BITFIELD movementElevator:1;
    BITFIELD movementResting:1;
    BITFIELD movementDynamic:1;
    BITFIELD movementPushing:1;
    FVector movementNormal;
    FLOAT movementWaterPenetration;
    FLOAT movementSplashChaos;
    FLOAT movementImpulseChaos;
    FLOAT movementSphereRadius;
    FLOAT movementSphyllRadius;
    FLOAT movementSphyllHalfHeight;
    INT movementGroundState;
    INT movementCollisionMaterial;
    BITFIELD movementThrusting:1;
    BITFIELD movementOldThrusting:1;
    FVector movementDisplacement;
    FLOAT movementDisplacementRate;
    FVector movementStrafe;
    FVector movementOldVelocity;
    BITFIELD movementSkiInput:1;
    FLOAT movementKnockbackScale;
    FLOAT movementExtraMass;
    BITFIELD movementFrozen:1;
    FLOAT lastMovementDamageTime;
    FLOAT lastMovementCollisionTime;
    BITFIELD blockMovementDamage:1;
    class UMaterial* collisionMaterialObject;
    BYTE movementSimProxyPitch;
    BYTE movementSimProxyInputX;
    BYTE movementSimProxyInputY;
    BITFIELD movementSimProxyInputThrust:1;
    BITFIELD movementSimProxyInputJump:1;
    BITFIELD movementSimProxyInputSki:1;
    FLOAT walkAnimationSpeed;
    FLOAT runAnimationSpeed;
    FLOAT sprintAnimationSpeed;
    FName neutralAimAnimationRootBone;
    FName alertAimAnimationRootBone;
    FName combatAimAnimationRootBone;
    FName upperBodyAnimationRootBone;
    FName armAnimationRootBone;
    class UAnimationManager* AnimationManager;
    TArrayNoInit<class UAnimationState*> animationStates;
    TArrayNoInit<class UAnimationChannel*> animationChannels;
    class UAnimationLayer* primaryAnimationLayer;
    class UAnimationLayer* secondaryAnimationLayer;
    class UAnimationSpring* animationHeightSpring;
    class UAnimationSpring* animationVelocitySpring;
    BITFIELD m_bManualAnimation:1;
    BITFIELD m_bOldManualAnimation:1;
    FLOAT vehicleTeamCrushingDamageModifier;
    FStringNoInit VoiceSetPackageName;
    FStringNoInit CharacterNameLocalisationTag;
    FStringNoInit CharacterName;
    FStringNoInit playerNameMP;
    FLOAT packDrawScale;
    class UMaterial* invicibilityMaterial;
    BYTE previousPhysics;
    BITFIELD bTempInvincible:1;
    BITFIELD bLocalTempInvincible:1;
    BITFIELD bHiddenVehicleOccupant:1;
    class ATribesReplicationInfo* TribesReplicationInfo;
    class ACharacterMotor* Motor;
    class AWeapon* Weapon;
    FName weaponBone;
    BITFIELD weaponPlayingArmAnimation:1;
    FLOAT weaponNotHeldTime;
    class AWeapon* altWeapon;
    class AWeapon* fallbackWeapon;
    class AWeapon* weaponSlots[3];
    FName eyeBoneName;
    INT eyeBoneIndex;
    FVector eyeBoneOffset;
    class AController* lastPossessor;
    FLOAT HeadHeight;
    BITFIELD bGodMode:1;
    class UClass* loadoutClass;
    class UClass* armorClass;
    class ULoadout* Loadout;
    BITFIELD bDisallowEquipmentDropOnDeath:1;
    class AEquipment* m_equipmentHead;
    class AEquipment* potentialEquipment;
    BITFIELD bDontAllowCarryablePickups:1;
    BITFIELD bDontInteractWithTerritories:1;
    class AMPCarryable* carryableReference;
    TArrayNoInit<class AMPCarryable*> carryables;
    INT numCarryables;
    class AMPCarryableThrower* pseudoWeapon;
    INT numPermanentCarryables;
    INT lastCarryableNumber;
    BITFIELD bCanZoom:1;
    BITFIELD bZoomed:1;
    BITFIELD bDontAllowCommandScreen:1;
    BYTE jetCompetency;
    BYTE skiCompetency;
    BITFIELD bApplyHealthFilter:1;
    class UClass* CombatRole;
    class UClass* localCombatRole;
    FName needToPlayArmAnim;
    BITFIELD bDisableSkiing:1;
    BITFIELD bDisableJetting:1;
    FName jetpackBone;
    class Ajetpack* jetpack;
    class AArms* Arms;
    BITFIELD regenerationActive:1;
    INT regenerationRateHealthPerSecond;
    BITFIELD shieldActive:1;
    FLOAT shieldFractionDamageBlocked;
    class APack* Pack;
    class UClass* heldPackClass;
    class UClass* localPackClass;
    FName packLeftBone;
    FName packRightBone;
    class AStaticMeshAttachment* leftPack;
    class AStaticMeshAttachment* rightPack;
    BITFIELD bActivatingEffect:1;
    BITFIELD bLocalActivatingEffect:1;
    BITFIELD bActiveEffect:1;
    BITFIELD bLocalActiveEffect:1;
    BITFIELD bDeactivatingEffect:1;
    BITFIELD bLocalDeactivatingEffect:1;
    BITFIELD bActivatingEffectStarted:1;
    BITFIELD bLocalActivatingEffectStarted:1;
    BITFIELD bActiveEffectStarted:1;
    BITFIELD bLocalActiveEffectStarted:1;
    BITFIELD bUnactivatingEffect:1;
    BITFIELD bLocalUnactivatingEffect:1;
    BITFIELD bUnactiveEffect:1;
    BITFIELD bLocalUnactiveEffect:1;
    BITFIELD bUndeactivatingEffect:1;
    BITFIELD bLocalUndeactivatingEffect:1;
    BITFIELD bUnactivatingEffectStarted:1;
    BITFIELD bLocalUnactivatingEffectStarted:1;
    BITFIELD bUnactiveEffectStarted:1;
    BITFIELD bLocalUnactiveEffectStarted:1;
    BITFIELD bSpawningAtVehicle:1;
    class ADeployable* Deployable;
    FLOAT healthInjectionRatePerSecond;
    FLOAT healthInjectionAmount;
    class ACharacterVisualisation* visualisation;
    class UClass* grapplerClass;
    class AGrapplerProjectile* proj;
    class AGrapplerRope* rope;
    FLOAT ropeNaturalLength;
    TArrayNoInit<class ACharacter*> grapplerCharacters;
    BITFIELD bAttached:1;
    BITFIELD bLocalAttached:1;
    BITFIELD bReelIn:1;
    class APawn* lastHitObject;
    BITFIELD bObjectHit:1;
    BITFIELD bLocalObjectHit:1;
    BITFIELD bHitRegistered:1;
    BITFIELD bIsLocalCharacter:1;
    FStringNoInit movementConfiguration;
    FLOAT energy;
    FLOAT energyMinimum;
    FLOAT energyMaximum;
    FLOAT energyRechargeRate;
    FLOAT energyRechargeScale;
    FLOAT energyWeaponDepleted;
    BITFIELD bZoomOutOnSpawn:1;
    class UClass* userSkinClass;
    FLOAT localHealth;
    BYTE clientPainType;
    FQuickChatInfo QCAnimData;
    FQuickChatInfo LocalQCAnimData;
    FQuickChatInfo QCTalkData;
    FQuickChatInfo LocalQCTalkData;
	   DECLARE_FUNCTION(execisTouchingEnergyBarrier);
	   DECLARE_FUNCTION(execropeObstructionTrace);
	   DECLARE_FUNCTION(execGravity);
	   DECLARE_FUNCTION(execgetAirSpace);
	   DECLARE_FUNCTION(execisInAir);
	   DECLARE_FUNCTION(execsetupVisionBone);
	   DECLARE_FUNCTION(execcheckManualAnimation);
	   DECLARE_FUNCTION(execgetMount);
	   DECLARE_FUNCTION(execgetDrivenVehicle);
	   DECLARE_FUNCTION(execdebugMovement);
	   DECLARE_FUNCTION(execforceMovement);
	   DECLARE_FUNCTION(execprefixMovement);
	   DECLARE_FUNCTION(execenergyRequiredToJet);
	  BITFIELD	eventisFemale()
	  {
        ACharacter_eventisFemale_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_isFemale),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventSetNaturalRopeLength(FLOAT Length)
	  {
        ACharacter_eventSetNaturalRopeLength_Parms Parms;
		   Parms.Length=Length;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_SetNaturalRopeLength),&Parms);
	  }
	  void	eventGetOtherGrappleData(INT Index, class ACharacter*& Other, FLOAT& naturalLength)
	  {
        ACharacter_eventGetOtherGrappleData_Parms Parms;
		   Parms.Index=Index;
		   Parms.Other=Other;
		   Parms.naturalLength=naturalLength;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_GetOtherGrappleData),&Parms);
		   Other=Parms.Other;
		   naturalLength=Parms.naturalLength;
	  }
	  void	eventGetOtherGrappleCount(INT& Count)
	  {
        ACharacter_eventGetOtherGrappleCount_Parms Parms;
		   Parms.Count=Count;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_GetOtherGrappleCount),&Parms);
		   Count=Parms.Count;
	  }
	  BITFIELD	eventGetGrappleData(class AActor*& attachedTo, FVector& attachedPoint, FLOAT& naturalLength)
	  {
        ACharacter_eventGetGrappleData_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.attachedTo=attachedTo;
		   Parms.attachedPoint=attachedPoint;
		   Parms.naturalLength=naturalLength;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_GetGrappleData),&Parms);
		   attachedTo=Parms.attachedTo;
		   attachedPoint=Parms.attachedPoint;
		   naturalLength=Parms.naturalLength;
		   return Parms.ReturnValue;
	  }
	  void	eventBreakGrapple()
	  {
		   ProcessEvent(FindFunctionChecked(GAMEPLAY_BreakGrapple),NULL);
	  }
	  void	eventOnChangeEffects(BYTE previousMovementState, BYTE currentMovementState, BITFIELD previousAirborne, BITFIELD currentAirborne, BITFIELD previousWater, BITFIELD currentWater, BITFIELD previousUnderWater, BITFIELD currentUnderWater, INT previousMaterial, INT currentMaterial, BITFIELD previousSkiInput, BITFIELD currentSkiInput)
	  {
        ACharacter_eventOnChangeEffects_Parms Parms;
		   Parms.previousMovementState=previousMovementState;
		   Parms.currentMovementState=currentMovementState;
		   Parms.previousAirborne=previousAirborne;
		   Parms.currentAirborne=currentAirborne;
		   Parms.previousWater=previousWater;
		   Parms.currentWater=currentWater;
		   Parms.previousUnderWater=previousUnderWater;
		   Parms.currentUnderWater=currentUnderWater;
		   Parms.previousMaterial=previousMaterial;
		   Parms.currentMaterial=currentMaterial;
		   Parms.previousSkiInput=previousSkiInput;
		   Parms.currentSkiInput=currentSkiInput;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_OnChangeEffects),&Parms);
	  }
	  void	eventOnChangeMovement(BYTE Previous, BYTE Current)
	  {
        ACharacter_eventOnChangeMovement_Parms Parms;
		   Parms.Previous=Previous;
		   Parms.Current=Current;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_OnChangeMovement),&Parms);
	  }
	  void	eventOnChangeSkiInput(BITFIELD Previous, BITFIELD Current)
	  {
        ACharacter_eventOnChangeSkiInput_Parms Parms;
		   Parms.Previous=Previous;
		   Parms.Current=Current;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_OnChangeSkiInput),&Parms);
	  }
	  void	eventOnChangeCollisionMaterial(INT Previous, INT Current)
	  {
        ACharacter_eventOnChangeCollisionMaterial_Parms Parms;
		   Parms.Previous=Previous;
		   Parms.Current=Current;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_OnChangeCollisionMaterial),&Parms);
	  }
	  void	eventOnChangeUnderwater(BITFIELD Previous, BITFIELD Current)
	  {
        ACharacter_eventOnChangeUnderwater_Parms Parms;
		   Parms.Previous=Previous;
		   Parms.Current=Current;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_OnChangeUnderwater),&Parms);
	  }
	  void	eventOnChangeWater(BITFIELD Previous, BITFIELD Current)
	  {
        ACharacter_eventOnChangeWater_Parms Parms;
		   Parms.Previous=Previous;
		   Parms.Current=Current;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_OnChangeWater),&Parms);
	  }
	  void	eventOnChangeAirborne(BITFIELD Previous, BITFIELD Current)
	  {
        ACharacter_eventOnChangeAirborne_Parms Parms;
		   Parms.Previous=Previous;
		   Parms.Current=Current;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_OnChangeAirborne),&Parms);
	  }
	  void	eventOnMovementJump()
	  {
		   ProcessEvent(FindFunctionChecked(GAMEPLAY_OnMovementJump),NULL);
	  }
	  void	eventOnMovementCrushingDamage(FLOAT Damage, class APawn* Source)
	  {
        ACharacter_eventOnMovementCrushingDamage_Parms Parms;
		   Parms.Damage=Damage;
		   Parms.Source=Source;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_OnMovementCrushingDamage),&Parms);
	  }
	  void	eventOnMovementCollisionDamage(FLOAT Damage)
	  {
        ACharacter_eventOnMovementCollisionDamage_Parms Parms;
		   Parms.Damage=Damage;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_OnMovementCollisionDamage),&Parms);
	  }
	  void	eventOnMovementCollision(FVector point, FVector Normal, FVector Impulse, INT Material)
	  {
        ACharacter_eventOnMovementCollision_Parms Parms;
		   Parms.point=point;
		   Parms.Normal=Normal;
		   Parms.Impulse=Impulse;
		   Parms.Material=Material;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_OnMovementCollision),&Parms);
	  }
	  class AWeapon*	eventGetAltWeapon()
	  {
        ACharacter_eventGetAltWeapon_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_GetAltWeapon),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(ACharacter,ARagdoll,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ACharacter)
};

// Class	ABaseAICharacter is declared in "..\Gameplay\Classes\Character\BaseAICharacter.uc"
class GAMEPLAY_API	ABaseAICharacter	: public ACharacter
{
public:
    class UClass* jetpackClass;
    class UMesh* armsMesh;
    FLOAT healthModifier;
    BYTE firingWhileMovingState;
    BYTE combatRangeCategory;
    BYTE combatMovementCategory;
    BYTE dodgingCategory;
    BYTE painReactionCategory;
    BYTE grenadeUseCategory;
    BYTE speedPackUseCategory;
    FLOAT tauntAnimFrequency;
    BITFIELD bCanSeeIntoWater:1;
    BITFIELD bUsePackActiveEffect:1;
    BITFIELD bTaunt:1;
    BITFIELD bLogEnergyUsage:1;
    FLOAT noAttackUntil;
    FLOAT noMovementUntil;
    FLOAT firstBumpTime;
    class AActor* lastBumpActor;
	   DECLARE_CLASS(ABaseAICharacter,ACharacter,0,Gameplay)
	virtual UBOOL shouldLookForPawns();
};

// Class	APlayerCharacter is declared in "..\Gameplay\Classes\Character\PlayerCharacter.uc"
class GAMEPLAY_API	APlayerCharacter	: public ACharacter
{
public:
	   DECLARE_CLASS(APlayerCharacter,ACharacter,0,Gameplay)
	UBOOL CanSee(APawn* Other);
	void LookForPawns();
};

// Class	AVehicle is declared in "..\Gameplay\Classes\Vehicles\Common\Vehicle.uc"
class GAMEPLAY_API	AVehicle	: public ARook
{
public:
    FLOAT lastStateReceiveTime;
    TArrayNoInit<FVehiclePosition> positions;
    INT driverIndex;
    FLOAT inverseCosUprightAngle;
    TArrayNoInit<FVehicleEntryData> Entries;
    TArrayNoInit<class AVehicleEntry*> vehicleEntries;
    TArrayNoInit<FVehicleFlipTriggerData> flipTriggers;
    TArrayNoInit<class AVehicleFlipTrigger*> vehicleFlipTriggers;
    class UClass* motorClass;
    class UClass* destroyedExplosionClass;
    FLOAT StrafeInput;
    FLOAT ThrottleInput;
    FRotator RotationInput;
    FLOAT ThrustInput;
    BITFIELD DiveInput:1;
    BITFIELD customInertiaTensor:1;
    FVector customInertiaTensorDiagonal;
    FLOAT minimumCollisionDamageMagnitude;
    FLOAT collisionDamageMagnitudeScale;
    BITFIELD bCollisionDamageEnabled:1;
    FLOAT settledUpsideDownCosAngle;
    FLOAT settledUpsideDownSpeed;
    BITFIELD bVehicleCameraTrace:1;
    FVector vehicleCameraTraceExtents;
    BITFIELD bSettledUpsideDown:1;
    FLOAT healthModifier;
    TArrayNoInit<BYTE> doNotEjectOnFlip;
    BITFIELD clientInterpolationHard:1;
    BITFIELD Spawning:1;
    BITFIELD bFlipping:1;
    class UClass* currentSwitchClass;
    TArrayNoInit<FExitData> exits;
    FLOAT clientInterpolationSnapDistance;
    FLOAT clientInterpolationPeriod;
    TArrayNoInit<FName> animationFinishThenLoop;
    FLOAT maximumNetUpdateInterval;
    FLOAT maximumNextNetUpdateTime;
    FLOAT flipRotationStrength;
    FLOAT flipRotationDamping;
    FLOAT flipPushUpImpulse;
    FLOAT flipPushUpDuration;
    FLOAT flipMaximumRotationDuration;
    FLOAT flipRotateTime;
    FLOAT flipRotationTimeOut;
    BITFIELD bShowPhysicsDebug:1;
    BITFIELD bGodMode:1;
    BITFIELD bDisablePositionSwitching:1;
    BITFIELD abandonmentDestruction:1;
    FLOAT abandonmentDestructionPeriod;
    FLOAT currentAbandonmentDuration;
    class ATeamInfo* lastOccupantTeam;
    FLOAT TopSpeed;
    BITFIELD stayUprightEnabled:1;
    FLOAT stayUprightDamping;
    FLOAT stayUprightStrength;
    INT driverMinimumPitch;
    INT driverMaximumPitch;
    FLOAT minimumObstacleLookAhead;
    FLOAT obstacleLookAheadVeloocityScale;
    FLOAT distanceToMaximumDurationScale;
    FLOAT driveYawCoefficient;
    FLOAT drivePitchCoefficient;
    FLOAT cornerSlowDownDistance;
    FLOAT cornerSlowDownMinimumCosAngle;
    FLOAT cornerSlowDownSpeedCoefficient;
    BITFIELD stopForEnemies:1;
    FLOAT cameraDistance;
    FVector TPCameraLookAt;
    FLOAT TPCameraDistance;
    BITFIELD bDrawDriverInTP:1;
    FVector cachedCameraLocation;
    FName rootBone;
    class UClass* driverWeaponClass;
    class AWeapon* driverWeapon;
    FLOAT waterDamagePerSecond;
    FVector localMoveDestination;
    BITFIELD dampingPlusEnabled:1;
    FLOAT dampingPlusXY;
    FLOAT dampingPlusPositiveZ;
    FLOAT dampingPlusNegativeZ;
    BITFIELD retriggerEffectEvents:1;
    FClientOccupantEnterData minorPositionEntrySignals[4];
    FClientPositionData clientPositions[10];
    FClientPositionData localClientPositions[10];
    INT throttleForwardEffectIndex;
    INT throttleBackEffectIndex;
    INT strafeLeftEffectIndex;
    INT strafeRightEffectIndex;
    INT engineIdlingEffectIndex;
    INT thrustingEffectIndex;
    INT throttleForwardOrThrustEffectIndex;
    INT strafeLeftOrThrustEffectIndex;
    INT strafeRightOrThrustEffectIndex;
    TArrayNoInit<FVehicleEffect> Effects;
    class AVehicleMotor* Motor;
    class ATeamInfo* localTeam;
    class UClass* destructionObjectClass;
    BITFIELD bHasBeenOccupied:1;
    BITFIELD bCanBeStolen:1;
    class UMaterial* ManifestLayoutMaterial;
    FStringNoInit driverPrompt;
    FStringNoInit gunnerPrompt;
    FStringNoInit leftGunnerPrompt;
    FStringNoInit rightGunnerPrompt;
    FStringNoInit inventoryStationPrompt;
    FStringNoInit fullVehiclePrompt;
    FStringNoInit vehicleProhibitedObjectPrompt;
    FStringNoInit flipPrompt;
    FStringNoInit cannotStealPrompt;
    FStringNoInit enemyOccupiedPrompt;
    FStringNoInit enemyInventoryStationPrompt;
    FStringNoInit heavyAttemptedToPilot;
    FLOAT heavyAttemptedToPilotSwitchPromptDuration;
    FStringNoInit localizedName;
    BITFIELD bInvincible:1;
    FLOAT loseInitialInvincibilityTime;
    FLOAT initialInvincibilityDuration;
    class UMaterial* invicibilityMaterial;
    FLOAT velocityInheritOnExitScale;
    class UClass* CrushingDamageTypeClass;
    FDesiredHavokState currentDesiredHavokState;
	   DECLARE_FUNCTION(execgetAngle);
	   DECLARE_FUNCTION(execgetHighByte);
	   DECLARE_FUNCTION(execgetLowByte);
	   DECLARE_FUNCTION(execisHavokCompletelyInitialised);
	   DECLARE_FUNCTION(execvehicleTransitionTrace);
	   DECLARE_FUNCTION(execvehicleTrace);
	   DECLARE_FUNCTION(execcameraTrace);
	   DECLARE_FUNCTION(execperformFlip);
	   DECLARE_FUNCTION(execforceNetDirty);
	   DECLARE_FUNCTION(execGraphData);
	  void	eventcollisionDamage(FLOAT magnitude)
	  {
        AVehicle_eventcollisionDamage_Parms Parms;
		   Parms.magnitude=magnitude;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_collisionDamage),&Parms);
	  }
	  BITFIELD	eventisUpright()
	  {
        AVehicle_eventisUpright_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_isUpright),&Parms);
		   return Parms.ReturnValue;
	  }
	  FVector	eventgetAimLocation(class APawn* Target)
	  {
        AVehicle_eventgetAimLocation_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Target=Target;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_getAimLocation),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventVehicleUpdateParams()
	  {
		   ProcessEvent(FindFunctionChecked(GAMEPLAY_VehicleUpdateParams),NULL);
	  }
	  void	eventVehicleStateReceived()
	  {
		   ProcessEvent(FindFunctionChecked(GAMEPLAY_VehicleStateReceived),NULL);
	  }
	  FRotator	eventgetViewRotationFromMotor()
	  {
        AVehicle_eventgetViewRotationFromMotor_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_getViewRotationFromMotor),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(AVehicle,ARook,0,Gameplay)
	virtual void PostNetReceive();
	virtual void PostEditChange();
	virtual void setPhysics(BYTE NewPhysics, AActor *NewFloor, FVector NewFloorV);
	virtual void CleanupDestroyed();
	virtual void tickAI( FLOAT DeltaSeconds );
	virtual UBOOL shouldLookForPawns();
	virtual void TickSimulated( FLOAT DeltaSeconds );
	virtual void TickAuthoritative( FLOAT DeltaSeconds );
	virtual FVector predictedLocation( float t );

	virtual void HavokPreStepCallback(FLOAT deltaTime);
	virtual void RemakeRigidBodyVehicle();
	virtual void initialiseHavokDataObject();
	virtual bool HavokInitActor();
	virtual void HavokQuitActor();

	virtual void PostNetReceiveLocation();

	virtual void physicsRotation(FLOAT deltaTime, FVector OldVelocity);

	virtual UBOOL IsNetRelevantFor(APlayerController* RealViewer, AActor* Viewer, FVector SrcLocation);

	bool isOccupant(ACharacter* character);

	virtual UBOOL Tick(float deltaSeconds, ELevelTick tickType);

	void updateInertiaTensor();

	virtual bool groundContact();

	virtual void updateHavokCollisionFilter();

	virtual bool isHavokInitialised();

	UBOOL CheckOwnerUpdated();

	void clearVehicleAnimation(USkeletalMeshInstance *mesh, int index);
	void loopVehicleAnimation(AVehicle* vehicle, USkeletalMeshInstance *mesh, int index, const FName& sequence);

	class HkSoftCeiling* softCeiling;
	class HkCollisionDamageSignaller* collisionDamageSignaller;
	class HkStayUprightAction* xStayUpright;
	class HkStayUprightAction* yStayUpright;
	class HkDampingAction* dampingAction;
	class HkStayUprightAction* flipAction;
	class HkInfiniteMassCollisionController* infiniteMassCollisionController;
	class HkClientInterpolationControl* clientInterpolationControl;
};

// Class	ACar is declared in "..\Gameplay\Classes\Vehicles\Common\Car.uc"
class GAMEPLAY_API	ACar	: public AVehicle
{
public:
    FLOAT StopThreshold;
    FLOAT upsideDownDamagePerSecond;
    FLOAT SteeringMaxAngle;
    FLOAT strafeSteerAngleOffset;
    INT Gear;
    BITFIELD effectDeccelerating:1;
    BITFIELD effectAccelerating:1;
    INT outputCarDirection;
    FLOAT carSteer;
    FLOAT stopSteeringSize;
    FLOAT stopVelocitySize;
    FLOAT driveThrottleCoefficient;
    FLOAT maximumYawChange;
    FLOAT minimumNavigationThrottle;
	   DECLARE_CLASS(ACar,AVehicle,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ACar)
};

// Class	AHavokCar is declared in "..\Gameplay\Classes\Vehicles\Common\HavokCar.uc"
class GAMEPLAY_API	AHavokCar	: public ACar
{
public:
    TArrayNoInit<FWheelOutput> wheelsOutput;
    BITFIELD systemHandbrake:1;
    INT hkVehicleDataPtr;
    TArrayNoInit<class UClass*> wheelClasses;
    TArrayNoInit<class UClass*> havokCarWheelClasses;
    TArrayNoInit<class UHavokVehicleWheel*> Wheels;
    TArrayNoInit<FLOAT> GearRatios;
    FLOAT ChassisMass;
    FLOAT MaxSpeedFullSteeringAngle;
    FLOAT FrictionEqualizer;
    FLOAT TorqueRollFactor;
    FLOAT TorquePitchFactor;
    FLOAT TorqueYawFactor;
    FLOAT TorqueExtraFactor;
    FLOAT ChassisUnitInertiaYaw;
    FLOAT ChassisUnitInertiaRoll;
    FLOAT ChassisUnitInertiaPitch;
    FLOAT EngineTorque;
    FLOAT EngineMinRPM;
    FLOAT EngineOptRPM;
    FLOAT EngineMaxRPM;
    FLOAT EngineTorqueFactorAtMinRPM;
    FLOAT EngineTorqueFactorAtMaxRPM;
    FLOAT EngineResistanceFactorAtMinRPM;
    FLOAT EngineResistanceFactorAtOptRPM;
    FLOAT EngineResistanceFactorAtMaxRPM;
    FLOAT GearDownshiftRPM;
    FLOAT GearUpshiftRPM;
    FLOAT GearClutchDelayTime;
    FLOAT GearReverseRatio;
    FLOAT AerodynamicsAirDensity;
    FLOAT AerodynamicsFrontalArea;
    FLOAT AerodynamicsDragCoeff;
    FLOAT AerodynamicsLiftCoeff;
    FVector ExtraGravity;
    FLOAT SpinDamping;
    FLOAT CollisionSpinDamping;
    FLOAT CollisionThreshold;
    FLOAT applyHandbrakeSpeed;
    FLOAT occupiedApplyHandbrakeSpeed;
    INT leftFrontSkiddingEffectIndex;
    INT leftRearSkiddingEffectIndex;
    INT rightFrontSkiddingEffectIndex;
    INT rightRearSkiddingEffectIndex;
    FHavokCarReplicationState ReplicationCarState;
    FHavokCarReplicationState OldReplicationCarState;
    BITFIELD commonWheelMass:1;
    BITFIELD commonWheelFriction:1;
    BITFIELD commonWheelViscosityFriction:1;
    BITFIELD commonSuspensionStrength:1;
    BITFIELD commonSuspensionDampingCompression:1;
    BITFIELD commonSuspensionDampingRelaxation:1;
    BITFIELD commonSuspensionTravel:1;
    INT leftFrontWheelIndex;
    INT leftRearWheelIndex;
    INT rightFrontWheelIndex;
    INT rightRearWheelIndex;
    FLOAT skidEffectEnergyThreshold;
	   DECLARE_FUNCTION(execswitchWheelClasses);
	   DECLARE_FUNCTION(exechavokCarSwitchClass);
	   DECLARE_FUNCTION(execRemakeVehicle);
	  void	eventHavokVehicleHasChanged()
	  {
		   ProcessEvent(FindFunctionChecked(GAMEPLAY_HavokVehicleHasChanged),NULL);
	  }
	  void	eventUpdateVehicle(FLOAT DeltaTime)
	  {
        AHavokCar_eventUpdateVehicle_Parms Parms;
		   Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_UpdateVehicle),&Parms);
	  }
	   DECLARE_CLASS(AHavokCar,ACar,0,Gameplay)
#ifdef UNREAL_HAVOK

	// Actor interface.
	virtual bool HavokInitActor();
	virtual void HavokQuitActor();
	
	virtual void PostNetReceive();
    virtual void PostEditChange();

	virtual void TickAuthoritative(float deltaSeconds);

	virtual void HavokPreStepCallback(FLOAT DeltaTime);
	
	virtual void RemakeVehicle();  // updates the internal Havok Raycast vehicle. Called by default in VehicleUpdateParams event, but you can call it whenever you change suspension params etc. No need to call this if you just chaneg steering + throtle in the UpdateVehicle event.
	virtual void BuildVehicle();    // constructs the vehicle, internal call from PostBeginPlay

	virtual void syncVehicleToBones();

	void havokCarSwitchClass(UClass* havokCarClass);
	void switchWheelClasses(const TArray<UClass*>& newWheelClasses);
#endif

	bool isHavokInitialised();

	virtual void updateHavokCollisionFilter();
};

// Class	ABuggy is declared in "..\Gameplay\Classes\Vehicles\Buggy\Buggy.uc"
class GAMEPLAY_API	ABuggy	: public AHavokCar
{
public:
    FName turretBone;
    class UClass* inventoryStationAccessClass;
    FVector inventoryStationOffset;
    TArrayNoInit<class AInventoryStationAccess*> InventoryStationAccess;
    class AVehicleMountedTurret* Turret;
    class UClass* turretClass;
    FVector gunnerCameraOffset;
    FVector gunnerWeaponOffset;
    class UClass* gunnerWeaponClass;
    FLOAT gunnerMaximumPitch;
    FLOAT gunnerMinimumPitch;
    FLOAT gunnerAITurnRate;
    FLOAT gunnerClientTurnRate;
    INT numberInventoryStationPositions;
    INT maximumNumberInventoryStationPositions;
    class UClass* boostClass;
    class UClass* frontBoostWheelClass;
    class UClass* rearBoostWheelClass;
    TArrayNoInit<class UClass*> spawnDefaultWeapons;
    FVector forceDeactivatePosition;
    FLOAT forceDeactivateTime;
    BITFIELD isRegisteredRespawnVehicle:1;
	   DECLARE_CLASS(ABuggy,AHavokCar,0,Gameplay)
	UBOOL IsNetRelevantFor(APlayerController* RealViewer, AActor* Viewer, FVector SrcLocation);
};

// Class	ATreadVehicle is declared in "..\Gameplay\Classes\Vehicles\Common\TreadVehicle.uc"
class GAMEPLAY_API	ATreadVehicle	: public ACar
{
public:
    FTreadVehicleReplicationState replicationTreadVehicleState;
    FTreadVehicleReplicationState oldReplicationTreadVehicleState;
    FVector treadPositionOffset;
    FLOAT treadRadius;
    FLOAT treadLength;
    FLOAT throttleToVelocityFactor;
    FLOAT throttleSteerToVelocityScaleFactor;
    FLOAT steerToVelocityFactor;
    FLOAT treadGainFactor;
    FLOAT treadGainFactorStopping;
    FLOAT maximumTreadVelocityDelta;
    INT leftTreadChannel;
    FName leftForwardTreadAnimation;
    FName leftReverseTreadAnimation;
    INT rightTreadChannel;
    FName rightForwardTreadAnimation;
    FName rightReverseTreadAnimation;
    FLOAT leftTreadSpinSpeed;
    FLOAT rightTreadSpinSpeed;
    FLOAT spinSpeedToAnimationRate;
    FLOAT animationRateToTexturePanRate;
    FLOAT forceApplicationHeightOffset;
    FLOAT lowFriction;
    FLOAT treadVehicleGravityScale;
    class UShader* leftTreadShader;
    class UTexMatrix* leftTreadTexPanner;
    INT leftTreadMaterialIndex;
    class UShader* rightTreadShader;
    class UTexMatrix* rightTreadTexPanner;
    INT rightTreadMaterialIndex;
    BITFIELD softThrottleSteering:1;
    FLOAT switchOffSoftThrottleSteeringTime;
    FLOAT softThrottleSteeringScale;
    FLOAT softThrottleSteeringStayOnPeriod;
    FLOAT centreOfMassHeightOffset;
    BITFIELD leftTreadContact:1;
    BITFIELD rightTreadContact:1;
	   DECLARE_CLASS(ATreadVehicle,ACar,0,Gameplay)
	virtual void PostBeginPlay();

	virtual void TickAuthoritative(float deltaSeonds);

	virtual bool HavokInitActor();
	void HavokPreStepCallback(FLOAT DeltaTime);
	virtual void HavokQuitActor();

	void initialiseTreads();

	virtual class hkShape* shapeProcessing(class hkShape* shape);

	void doTreadAnimationProcessing(float spinSpeed, const FName& forwardAnimation, const FName& reverseAnimation, int channel);

	virtual void PostEditChange();

	virtual bool groundContact();

	virtual UBOOL shouldPlayHavokHitFX(struct hkContactPointAddedEvent& event);

	bool isHavokInitialised();

	void PostNetReceive();

	class HkTreadCollisionListener* m_treadController;
};

// Class	ATank is declared in "..\Gameplay\Classes\Vehicles\Tank\Tank.uc"
class GAMEPLAY_API	ATank	: public ATreadVehicle
{
public:
    FVector cannonOffset;
    FVector turretOffset;
    FRotator cannonWorldSpaceNoRollRotation;
    FRotator cannonVehicleSpaceRotation;
    FLOAT cannonMinimumPitch;
    FLOAT cannonMaximumPitch;
    FLOAT boostAvailableTime;
    FLOAT timeBetweenBoosts;
    FLOAT boostAngle;
    FLOAT boostStrength;
    FLOAT boostUpStrength;
    FLOAT boostUpDuration;
    BITFIELD boostInProgress:1;
    FLOAT boostSecondStageTime;
    class AVehicleMountedTurret* Turret;
    class UClass* turretClass;
    FName turretBone;
    FVector gunnerCameraOffset;
    FVector gunnerWeaponOffset;
    class UClass* gunnerWeaponClass;
    FLOAT gunnerMaximumPitch;
    FLOAT gunnerMinimumPitch;
    FLOAT gunnerClientTurnRate;
    FLOAT gunnerAITurnRate;
    FLOAT cannonAITurnRate;
    FLOAT cannonClientTurnRate;
    FRotator cannonTargetRotation;
    FRotator cannonDisplayVehicleSpaceRotation;
    BITFIELD localBoostEventSignal:1;
    BITFIELD boostEventSignal:1;
    BITFIELD gripping:1;
    BITFIELD bCanHitTarget:1;
    FRotator currentViewRotation;
    INT boostChannel;
    FLOAT boostOpenAnimationLength;
    BITFIELD openAnimationPlayed:1;
    BITFIELD closeAnimationPlayed:1;
    FLOAT boostCloseTime;
    FLOAT boostEffectDuration;
    INT gripAnimationChannel;
    FName gripAnimation;
    FLOAT gripAnimationBlendTime;
    FLOAT landingEffectAirTime;
    INT landingChannel;
    FLOAT lastTreadContactTime;
    INT throttleForwardAndGroundContactIndex;
	   DECLARE_FUNCTION(execsetGripping);
	   DECLARE_CLASS(ATank,ATreadVehicle,0,Gameplay)
	virtual FVector GetViewDirection();

	void TickAuthoritative(float deltaSeconds);
};

// Class	AJointControlledAircraft is declared in "..\Gameplay\Classes\Vehicles\Common\JointControlledAircraft.uc"
class GAMEPLAY_API	AJointControlledAircraft	: public AVehicle
{
public:
    FName idleAnimation;
    FName leftAnimation;
    FName rightAnimation;
    FName forwardAnimation;
    FName backAnimation;
    FName upAnimation;
    FName downAnimation;
    FName spawningAnimation;
    FName gearUpAnimation;
    FLOAT spawningBlendTime;
    FLOAT blendTime;
    FLOAT gearTraceLength;
    FLOAT gearUpBlendTime;
    FLOAT strafeThrustForce;
    FLOAT strafeForce;
    FLOAT forwardThrustForce;
    FLOAT forwardForce;
    FLOAT upThrustForce;
    FLOAT reverseForce;
    FLOAT reverseThrustForce;
    FLOAT strafeCombinedReduction;
    FLOAT forwardCombinedReduction;
    FLOAT diveThrustForce;
    FLOAT diveCombinedReduction;
    FLOAT thrustCombinedReduction;
    FLOAT downDiveForceScale;
    FLOAT aheadDiveForceScale;
    FLOAT ForceScale;
    FLOAT clientControlJointStrength;
    FLOAT controlJointStrength;
    FLOAT clientDriverControlJointStrength;
    FLOAT flightControlDamping;
    FLOAT diveCounterGravityForceScale;
    FLOAT coastingCounterGravityForceScale;
    FLOAT coastingDamping;
    FLOAT angularBankScale;
    FLOAT linearBankScale;
    INT turningRightEffectIndex;
    INT turningLeftEffectIndex;
    INT divingEffectIndex;
    FLOAT flightRotationEffectMagnitude;
    FRotator viewRotationAI;
    BITFIELD ThrustingEffectState:1;
    BYTE AccelerationEffectState;
    BITFIELD divingForceApplied:1;
    FVector outputControlForce;
    FLOAT outputFlightYawAngle;
    FLOAT outputFlightPitchAngle;
    FLOAT counterGravityForceScale;
    BITFIELD strafeLeft:1;
    BITFIELD strafeRight:1;
    BITFIELD strafeForward:1;
    BITFIELD strafeBack:1;
    BITFIELD strafeUp:1;
    BITFIELD strafeDown:1;
    BITFIELD LandingGearUp:1;
    FRotator currentCameraRotation;
    FVector replicatedControlForce;
    FAircraftState replicationAircraftState;
    FAircraftState oldReplicationAircraftState;
    BITFIELD constrainAircraftPitch:1;
    FLOAT minimumAircraftPitch;
    FLOAT maximumAircraftPitch;
    BITFIELD hardConstrainAircraftPitch:1;
    FLOAT hardAircraftPitchRange;
    FLOAT zAxisFlightRotation;
    FLOAT navigationMaximumPitch;
    FLOAT navigationMinimumPitch;
    FLOAT navigationTurnRate;
    FLOAT rotateMinimumPitch;
    FLOAT rotateMaximumPitch;
    FLOAT thrustThresholdPitch;
    FLOAT throttleScale;
	   DECLARE_FUNCTION(execsetCounterGravityForceScale);
	   DECLARE_FUNCTION(execsetFlightControlStrength);
	   DECLARE_FUNCTION(execsetFlightRotation);
	   DECLARE_FUNCTION(execsetFlightForce);
	   DECLARE_FUNCTION(execcalculateOutputControlForce);
	  void	eventupdateCameraRotation(FLOAT DeltaSeconds)
	  {
        AJointControlledAircraft_eventupdateCameraRotation_Parms Parms;
		   Parms.DeltaSeconds=DeltaSeconds;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_updateCameraRotation),&Parms);
	  }
	   DECLARE_CLASS(AJointControlledAircraft,AVehicle,0,Gameplay)
	virtual void HavokPreStepCallback(FLOAT deltaTime);

	virtual bool HavokInitActor();
	virtual void HavokQuitActor();

	virtual void PostEditChange();

	void PostNetReceive();

	bool isHavokInitialised();

	// movement animation override
	void UpdateMovementAnimation(FLOAT DeltaSeconds);

	virtual void TickAuthoritative(float deltaSeconds);

	class HkSimpleFlightAction* m_flightAction;

	class hkGenericConstraint* m_hardPitchConstraint;
};

// Class	APod is declared in "..\Gameplay\Classes\Vehicles\Pod\Pod.uc"
class GAMEPLAY_API	APod	: public AJointControlledAircraft
{
public:
    TArrayNoInit<FName> muzzleSockets;
    INT currentMuzzleIndex;
    INT engineDustEffectIndex;
    FVector engineDustEffectLocation;
    FLOAT engineDustTraceLength;
    FLOAT engineDustGroundOffset;
    class UVehicleEffectObserver* muzzleFlashObserver;
	   DECLARE_CLASS(APod,AJointControlledAircraft,0,Gameplay)
	void CleanupDestroyed();
};

// Class	AVehicleMountedTurret is declared in "..\Gameplay\Classes\Vehicles\Common\VehicleMountedTurret.uc"
class GAMEPLAY_API	AVehicleMountedTurret	: public ARook
{
public:
    FName pivotBone;
    FName pitchPivotBone;
    BYTE positionType;
    BYTE localPositionType;
    INT positionIndex;
    class AVehicle* ownerVehicle;
    class AWeapon* Weapon;
    FLOAT maximumPitch;
    FLOAT minimumPitch;
    FLOAT yawStart;
    FLOAT yawRange;
    BITFIELD yawConstrained:1;
    BITFIELD yawPositiveDirection:1;
    FRotator worldSpaceNoRollRotation;
    FRotator vehicleSpaceRotation;
    FRotator vehicleSpaceClientDisplayRotation;
    FRotator turretOffsetRotation;
    FName turretBone;
    FLOAT maximumClientDisplayTurnRate;
    FRotator vehicleSpaceRotationAI;
    FLOAT maximumAITurnRate;
    INT thirdPersonRotationType;
    FVector cachedCameraLocation;
	   DECLARE_CLASS(AVehicleMountedTurret,ARook,0,Gameplay)
	virtual UBOOL Tick(FLOAT deltaSeconds, ELevelTick TickType);
	virtual void tickAI( FLOAT DeltaSeconds );
	virtual FVector GetViewPoint();
	virtual UBOOL shouldLookForPawns();
	virtual UBOOL IsNetRelevantFor(APlayerController* RealViewer, AActor* Viewer, FVector SrcLocation);
	virtual UBOOL canBeSeenBy(APawn* pawn) {return Controller && Controller->bIsPlayer;};	// AI's only see player controlled turrets
};

// Class	AProjectile is declared in "..\Gameplay\Classes\Projectile\Projectile.uc"
class GAMEPLAY_API	AProjectile	: public AActor
{
public:
    INT SpawnTick;
    FVector InitialVelocity;
    BITFIELD bReceivedInitialVelocity:1;
    BITFIELD bReplicateInitialVelocity:1;
    FLOAT AccelerationMagtitude;
    FLOAT MaxVelocity;
    FName DeathMessage;
    FLOAT damageAmt;
    FName victim;
    class ARook* rookAttacker;
    INT bounceCount;
    class UClass* damageTypeClass;
    BITFIELD bScaleProjectile:1;
    FLOAT initialXDrawScale;
    FLOAT xDrawScalePerSecond;
    BITFIELD bDeflectable:1;
    FLOAT Knockback;
    FLOAT knockbackAliveScale;
	   DECLARE_FUNCTION(execresolveImpactEffect);
	   DECLARE_CLASS(AProjectile,AActor,0,Gameplay)
	virtual UBOOL Tick(FLOAT DeltaTime, enum ELevelTick TickType);
	virtual void performPhysics(FLOAT DeltaSeconds);
	virtual void BoundProjectileVelocity();
};

// Class	ARepairRadius is declared in "..\Gameplay\Classes\Actor\RepairRadius.uc"
class GAMEPLAY_API	ARepairRadius	: public AActor
{
public:
    class IIRepairClient* rc;
    TArrayNoInit<class ARook*> touchingLOS;
    class AActor* currentTendrilTarget;
    TArrayNoInit<class URepairTendril*> tendrils;
	   DECLARE_FUNCTION(execSetRepairRadius);
	   DECLARE_CLASS(ARepairRadius,AActor,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ARepairRadius)
};

// Class	AShield is declared in "..\Gameplay\Classes\Shield\Shield.uc"
class GAMEPLAY_API	AShield	: public AActor
{
public:
    FLOAT Health;
    FLOAT offlineSeconds;
    FLOAT Max;
    FLOAT rechargeRate;
    FLOAT offlineSecondsScale;
    FLOAT maxOfflineSeconds;
    class UMaterial* effectMaterial;
    FLOAT effectDisplayTime;
    BITFIELD bActive:1;
    FLOAT clientHealth;
    FLOAT shieldEffectTime;
	   DECLARE_FUNCTION(execGetEffectMaterial);
	   DECLARE_CLASS(AShield,AActor,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(AShield)
};

// Class	UArmor is declared in "..\Gameplay\Classes\Armor\Armor.uc"
class GAMEPLAY_API	UArmor	: public UObject
{
public:
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    class UClass* HavokParamsClass;
    FLOAT breathingDurationMod;
    FLOAT Health;
    FLOAT energy;
    FLOAT ammoMod;
    FLOAT collisionDamageMod;
    FLOAT noise;
    FLOAT jetPackNoise;
    FLOAT EyeHeight;
    FLOAT headFraction;
    class UMaterial* hudIcon;
    INT maxCarriedWeapons;
    FStringNoInit movementConfiguration;
    FStringNoInit movementConfigurationFastActive;
    FStringNoInit movementConfigurationFastPassive;
    class UClass* movementDamageTypeClass;
    class UClass* movementDamageOtherTypeClass;
    class UClass* movementCrushingDamageTypeClass;
    BITFIELD bUseAlternateWeaponMesh:1;
    INT heightIndex;
    FStringNoInit armorName;
    FStringNoInit infoString;
    class UClass* personalShieldClass;
    FStringNoInit SpeechTag;
    class UClass* radarInfoClass;
    BITFIELD bCanUseTurrets:1;
    class UClass* fallbackWeaponClass;
    FLOAT knockbackScale;
    class UClass* suicideDamageTypeClass;
    BITFIELD bRestrictions:1;
    TArrayNoInit<FQuantityWeapon> AllowedWeapons;
    FQuantityGrenades AllowedGrenades;
    TArrayNoInit<class UClass*> AllowedPacks;
    TArrayNoInit<FQuantityDeployable> AllowedDeployables;
    TArrayNoInit<FQuantityConsumable> AllowedConsumables;
    TArrayNoInit<class UClass*> AllowedDriver;
    TArrayNoInit<class UClass*> AllowedPassenger;
	   DECLARE_CLASS(UArmor,UObject,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UArmor)
};

// Class	UConsoleCommandManager is declared in "..\Gameplay\Classes\CheatManager\ConsoleCommandManager.uc"
class GAMEPLAY_API	UConsoleCommandManager	: public UCheatManager
{
public:
	   DECLARE_FUNCTION(exectoggleWatermark);
	   DECLARE_CLASS(UConsoleCommandManager,UCheatManager,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UConsoleCommandManager)
};

// Class	UAnimationChannel is declared in "..\Gameplay\Classes\Animation\AnimationChannel.uc"
class GAMEPLAY_API	UAnimationChannel	: public UDeleteableObject
{
public:
    FStringNoInit Sequence;
    FStringNoInit processed;
    FLOAT Alpha;
	   DECLARE_CLASS(UAnimationChannel,UDeleteableObject,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UAnimationChannel)
};

// Class	UAnimationInterpolator is declared in "..\Gameplay\Classes\Animation\AnimationInterpolator.uc"
class GAMEPLAY_API	UAnimationInterpolator	: public UDeleteableObject
{
public:
    BITFIELD interpolating:1;
    FLOAT interpolatedValue;
    FLOAT startValue;
    FLOAT destinationValue;
    FLOAT interpolationTime;
    FLOAT interpolationTimeAccumulator;
	   DECLARE_CLASS(UAnimationInterpolator,UDeleteableObject,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UAnimationInterpolator)
};

// Class	UAnimationLayer is declared in "..\Gameplay\Classes\Animation\AnimationLayer.uc"
class GAMEPLAY_API	UAnimationLayer	: public UDeleteableObject
{
public:
    class UAnimationState* currentAnimationState;
    INT alertnessLevel;
    INT baseIndex;
    class UAnimationInterpolator* primaryAlpha;
    class UAnimationInterpolator* centerAlpha;
    class UAnimationInterpolator* forwardAlpha;
    class UAnimationInterpolator* backAlpha;
    class UAnimationInterpolator* leftAlpha;
    class UAnimationInterpolator* rightAlpha;
    class UAnimationInterpolator* upAlpha;
    class UAnimationInterpolator* downAlpha;
    BITFIELD firstUpdate:1;
    BITFIELD redundant:1;
    BITFIELD dominant:1;
    BITFIELD hurryUp:1;
	   DECLARE_CLASS(UAnimationLayer,UDeleteableObject,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UAnimationLayer)
};

// Class	UAnimationManager is declared in "..\Gameplay\Classes\Animation\AnimationManager.uc"
class GAMEPLAY_API	UAnimationManager	: public UDeleteableObject
{
public:
    BITFIELD firstUpdate:1;
    BITFIELD animationEnabled:1;
    BYTE currentAnimationState;
    BYTE desiredAnimationState;
    BYTE adjustedAnimationState;
    FLOAT currentAnimationStateTime;
    FLOAT desiredAnimationStateTime;
    FLOAT adjustedAnimationStateTime;
    BYTE primaryAnimationLayerState;
    BYTE primaryAnimationLayerAlertness;
    BYTE secondaryAnimationLayerState;
    BYTE secondaryAnimationLayerAlertness;
    BYTE currentAlertnessLevel;
    BYTE adjustedAlertnessLevel;
    BYTE animationAlertnessLevel;
    BITFIELD currentAiming:1;
    BITFIELD previousAiming:1;
    BITFIELD fireAnimationActive:1;
    BITFIELD extraAnimationActive:1;
    BITFIELD upperBodyAnimationActive:1;
    BITFIELD armAnimationActive:1;
    BITFIELD flinchAnimationActive:1;
    BITFIELD extraAnimationPending:1;
    BITFIELD extraAnimationPendingIsLoop:1;
    FLOAT extraAnimationPendingTime;
    FStringNoInit extraAnimationPendingName;
    class ACharacter* characterOwner;
    class UMesh* previousMesh;
	   DECLARE_FUNCTION(execplayFlinchAnimation);
	   DECLARE_FUNCTION(execstopArmAnimation);
	   DECLARE_FUNCTION(execgetArmAnimation);
	   DECLARE_FUNCTION(execisLoopingArmAnimation);
	   DECLARE_FUNCTION(execloopArmAnimation);
	   DECLARE_FUNCTION(execstopUpperBodyAnimation);
	   DECLARE_FUNCTION(execisLoopingUpperBodyAnimation);
	   DECLARE_FUNCTION(execisPlayingUpperBodyAnimation);
	   DECLARE_FUNCTION(execloopUpperBodyAnimation);
	   DECLARE_FUNCTION(execplayUpperBodyAnimation);
	   DECLARE_FUNCTION(execplayFireAnimation);
	   DECLARE_FUNCTION(execstopAnimation);
	   DECLARE_FUNCTION(execisLoopingAnimation);
	   DECLARE_FUNCTION(execisPlayingAnimation);
	   DECLARE_FUNCTION(execloopAnimation);
	   DECLARE_FUNCTION(execplayAnimation);
	   DECLARE_FUNCTION(execStartAnimating);
	   DECLARE_FUNCTION(execStopAnimating);
	   DECLARE_CLASS(UAnimationManager,UDeleteableObject,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UAnimationManager)
};

// Class	UAnimationSpring is declared in "..\Gameplay\Classes\Animation\AnimationSpring.uc"
class GAMEPLAY_API	UAnimationSpring	: public UDeleteableObject
{
public:
    FLOAT tightness;
    FLOAT maximum;
    FLOAT Value;
    FLOAT Target;
    FLOAT normalized;
	   DECLARE_FUNCTION(execSnap);
	   DECLARE_FUNCTION(execUpdate);
	   DECLARE_CLASS(UAnimationSpring,UDeleteableObject,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UAnimationSpring)
};

// Class	UAnimationState is declared in "..\Gameplay\Classes\Animation\AnimationState.uc"
class GAMEPLAY_API	UAnimationState	: public UDeleteableObject
{
public:
    FStringNoInit Name;
    BYTE Type;
    FLOAT BlendInTime;
    FLOAT blendTightness;
    FStringNoInit Centre;
    FStringNoInit Left;
    FStringNoInit Right;
    FStringNoInit forward;
    FStringNoInit back;
    FStringNoInit Up;
    FStringNoInit Down;
    FLOAT speed;
	   DECLARE_CLASS(UAnimationState,UDeleteableObject,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UAnimationState)
};

// Class	UVehicleEffectObserver is declared in "..\Gameplay\Classes\Vehicles\Common\VehicleEffectObserver.uc"
class GAMEPLAY_API	UVehicleEffectObserver	: public UDeleteableObject
{
public:
    class AEmitter* Emitter;
    class ASoundInstance* Sound;
    FLOAT originalParticlesPerSecond;
	   DECLARE_CLASS(UVehicleEffectObserver,UDeleteableObject,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UVehicleEffectObserver)
};

// Class	UVehicleHavokData is declared in "..\Gameplay\Classes\Vehicles\Common\VehicleHavokData.uc"
class GAMEPLAY_API	UVehicleHavokData	: public UHavokRigidBody
{
public:
    class AVehicle* ownerVehicle;
	   DECLARE_CLASS(UVehicleHavokData,UHavokRigidBody,0,Gameplay)
	virtual void PostEditChange();
};

// Class	UHavokCarWheel is declared in "..\Gameplay\Classes\Vehicles\Common\HavokCarWheel.uc"
class GAMEPLAY_API	UHavokCarWheel	: public UHavokVehicleWheel
{
public:
    class AHavokCar* Car;
    FLOAT manualWheelPositionX;
    FLOAT manualWheelPositionY;
    FLOAT manualWheelPositionZ;
	   DECLARE_CLASS(UHavokCarWheel,UHavokVehicleWheel,0,Gameplay)
	virtual void PostEditChange();
};

// Class	UTribesGUIControllerBase is declared in "..\Gameplay\Classes\GUI\TribesGUIControllerBase.uc"
class GAMEPLAY_API	UTribesGUIControllerBase	: public UGUIController
{
public:
    class UClientSideCharacter* clientSideChar;
    class UTribesGUIConfig* GuiConfig;
    FStringNoInit LastChatMessage;
    BITFIELD bMusicPlaying:1;
    INT CurrentSongHandle;
	   DECLARE_CLASS(UTribesGUIControllerBase,UGUIController,0|CLASS_Config,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UTribesGUIControllerBase)
};

// Class	ULoadout is declared in "..\Gameplay\Classes\Loadout\Loadout.uc"
class GAMEPLAY_API	ULoadout	: public UObject
{
public:
    class UClass* packClass;
    TArrayNoInit<FDeployableInfo> deployableList;
    TArrayNoInit<FWeaponInfo> weaponList;
    FGrenadeInfo grenades;
    TArrayNoInit<FConsumableInfo> consumableList;
	   DECLARE_CLASS(ULoadout,UObject,0|CLASS_Config,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(ULoadout)
};

// Class	UCustomPlayerLoadout is declared in "..\Gameplay\Classes\Loadout\CustomPlayerLoadout.uc"
class GAMEPLAY_API	UCustomPlayerLoadout	: public ULoadout
{
public:
    class UClass* combatRoleClass;
    FStringNoInit userSkinPath;
    FStringNoInit loadoutName;
    TArrayNoInit<FSkinPreferenceMapping> skinPreferences;
	   DECLARE_CLASS(UCustomPlayerLoadout,ULoadout,0|CLASS_Transient|CLASS_Config,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UCustomPlayerLoadout)
};

// Class	UControllableTexturePanner is declared in "..\Gameplay\Classes\TextureModifiers\ControllableTexturePanner.uc"
class GAMEPLAY_API	UControllableTexturePanner	: public UTexModifier
{
public:
    FVector PanDirection;
    FMatrix M;
    FLOAT Scale;
	   DECLARE_CLASS(UControllableTexturePanner,UTexModifier,0,Gameplay)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds)
	{
		FLOAT du = Scale * PanDirection.X;
		FLOAT dv = Scale * PanDirection.Y;

		M = FMatrix (
						FPlane(1,0,0,0),
						FPlane(0,1,0,0),
						FPlane(du,dv,1,0),
						FPlane(0,0,0,1)
					);

		return &M;
	}
};

// Class	UControllableTextureRotator is declared in "..\Gameplay\Classes\TextureModifiers\ControllableTextureRotator.uc"
class GAMEPLAY_API	UControllableTextureRotator	: public UTexModifier
{
public:
    FRotator Rotation;
    FMatrix M;
    FLOAT Scale;
    FLOAT UOffset;
    FLOAT VOffset;
	   DECLARE_CLASS(UControllableTextureRotator,UTexModifier,0,Gameplay)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds)
	{
		M = FRotationMatrix(Rotation * Scale);

		if( UOffset != 0.f || VOffset != 0.f )
		{
			FLOAT du = UOffset/MaterialUSize();
			FLOAT dv = VOffset/MaterialVSize();

			M = FMatrix(
						FPlane(1,0,0,0),
						FPlane(0,1,0,0),
						FPlane(-du,-dv,1,0),
						FPlane(0,0,0,1)
				) *
				M *
				FMatrix(
						FPlane(1,0,0,0),
						FPlane(0,1,0,0),
						FPlane(du,dv,1,0),
						FPlane(0,0,0,1)
				);
		}

		return &M;
	}
};

// Class	UControllableTexMatrix is declared in "..\Gameplay\Classes\TextureModifiers\ControllableTexMatrix.uc"
class GAMEPLAY_API	UControllableTexMatrix	: public UTexMatrix
{
public:
    FRotator rotationAxis;
    FLOAT Rotation;
    FLOAT panU;
    FLOAT panV;
    FLOAT Scale;
	   DECLARE_CLASS(UControllableTexMatrix,UTexMatrix,0,Gameplay)
	// UTexMatrix interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

// Class	URadarInfo is declared in "..\Gameplay\Classes\Info\RadarInfo.uc"
class GAMEPLAY_API	URadarInfo	: public UObject
{
public:
    TArrayNoInit<FMaterialDef> radarIcons;
    TArrayNoInit<FMaterialDef> viewportIcons;
    FMaterialDef UpIndicator;
    FMaterialDef DownIndicator;
    class UClass* relatedObjectClass;
    FStringNoInit infoLabel;
    FVector markerOffset;
    BITFIELD bOccluded:1;
    BITFIELD bRespectRange:1;
    BITFIELD bRespectZoom:1;
    BITFIELD bDisplayViewport:1;
    BITFIELD bDisplayRadar:1;
    BITFIELD bDisplayCommandMap:1;
    BITFIELD bShowHeightMarker:1;
    BITFIELD bNoSizeReduction:1;
    BITFIELD bDisplayDistance:1;
    BYTE colorType;
    FColor friendlyColor;
    FColor enemyColor;
    FColor neutralColor;
    FLOAT newDuration;
    FLOAT deadDuration;
	   DECLARE_CLASS(URadarInfo,UObject,0|CLASS_Config,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(URadarInfo)
};

// Class	UClientSideCharacter is declared in "..\Gameplay\Classes\Character\ClientSideCharacter.uc"
class GAMEPLAY_API	UClientSideCharacter	: public URefCount
{
public:
    INT MouseX;
    INT MouseY;
    BYTE UserPrefColorType;
    FLOAT levelTimeSeconds;
    BITFIELD bNeedCountDownTimer:1;
    BITFIELD bRoundCountingDown:1;
    FLOAT countDown;
    FLOAT respawnTime;
    FVector charLocation;
    FRotator charRotation;
    FLOAT Velocity;
    FStringNoInit promptText;
    FVector useableObjectLocation;
    BITFIELD bUseableObjectSwitch:1;
    BITFIELD bCanBeUsed:1;
    BITFIELD bEnabledForUse:1;
    BITFIELD bUseableObjectPowered:1;
    FLOAT Health;
    FLOAT healthMaximum;
    FLOAT energy;
    FLOAT energyMaximum;
    BITFIELD bShowEnergyBar:1;
    FLOAT energyWeaponDepleted;
    FLOAT healthInjectionAmount;
    BITFIELD bHotkeysUpdated:1;
    FLOAT throwForceMax;
    FLOAT throwForce;
    BITFIELD bZoomed:1;
    FLOAT zoomMagnificationLevel;
    INT activeWeaponIdx;
    FHUDWeaponInfo activeWeapon;
    FHUDWeaponInfo fallbackWeapon;
    FHUDWeaponInfo weapons[3];
    FHUDWeaponInfo grenades;
    class UClass* carryable;
    INT numCarryables;
    class UClass* Deployable;
    class UClass* questItem;
    class UClass* Pack;
    class UClass* HealthKit;
    INT healthKitQuantity;
    FStringNoInit deployableHotkey;
    FStringNoInit healthKitHotkey;
    FStringNoInit packHotkey;
    FStringNoInit carryableHotkey;
    BYTE deployableState;
    BITFIELD bDeployableActive:1;
    FLOAT deployableUseTime;
    BYTE packState;
    FLOAT packProgressRatio;
    FSpawnPointData spawnAreas[20];
    BITFIELD bShowRespawnMap:1;
    BITFIELD bInstantRespawnMode:1;
    class UClass* GameClass;
    BITFIELD bAwaitingTournamentStart:1;
    INT ownTeamScore;
    INT otherTeamScore;
    FStringNoInit ownTeam;
    FStringNoInit otherTeam;
    class UMaterial* ownTeamIcon;
    class UMaterial* otherTeamIcon;
    FColor ownTeamColor;
    FColor ownTeamHighlightColor;
    FColor otherTeamColor;
    FColor otherTeamHighlightColor;
    BITFIELD bNoMoreCarryables:1;
    FColor relativeFriendlyTeamColor;
    FColor relativeFriendlyHighlightColor;
    FColor relativeEnemyTeamColor;
    FColor relativeEnemyHighlightColor;
    FColor neutralColor;
    FColor neutralHighlightColor;
    BITFIELD bHitObject:1;
    FLOAT lastHitObjectTime;
    INT DamageAmounts[7];
    class UClass* targetType;
    FStringNoInit targetLabel;
    FLOAT targetHealth;
    FLOAT targetHealthMax;
    FLOAT targetShield;
    FLOAT targetShieldMax;
    FLOAT targetDistance;
    FLOAT targetFunctionalHealthThreshold;
    BYTE targetTeamAlignment;
    class UClass* targetTeam;
    BITFIELD targetCanBeDamaged:1;
    TArrayNoInit<FHUDPositionData> vehiclePositionData;
    class UMaterial* vehicleManifestSchematic;
    FLOAT vehicleHealth;
    FLOAT vehicleHealthMaximum;
    FLOAT turretHealth;
    FLOAT turretHealthMaximum;
    BITFIELD bCanExitRespawnHUD:1;
    FStringNoInit ExitRespawnKeyText;
    INT ExitRespawnKeyBinding;
    FStringNoInit ShowCommandMapKeyText;
    INT livesLeft;
    BITFIELD bWaitingForRoundEnd:1;
    INT matchScoreLimit;
    FStringNoInit watchedPlayerName;
    INT Ping;
    INT OffenseScore;
    INT DefenseScore;
    INT StyleScore;
    FStringNoInit levelDescription;
    FVector mapOrigin;
    FLOAT mapExtent;
    class UMaterial* radarUnderlayMaterial;
    FLOAT zoomFactor;
    BITFIELD bSensorGridFunctional:1;
    TArrayNoInit<FPOIInfo> POIData;
    TArrayNoInit<class UClass*> detectedAlliesClass;
    TArrayNoInit<FLOAT> detectedAlliesXPosition;
    TArrayNoInit<FLOAT> detectedAlliesYPosition;
    TArrayNoInit<INT> detectedAlliesHeight;
    TArrayNoInit<BYTE> detectedAlliesState;
    TArrayNoInit<class UClass*> detectedEnemiesTeam;
    TArrayNoInit<class UClass*> detectedEnemiesClass;
    TArrayNoInit<FLOAT> detectedEnemiesXPosition;
    TArrayNoInit<FLOAT> detectedEnemiesYPosition;
    TArrayNoInit<INT> detectedEnemiesHeight;
    TArrayNoInit<INT> detectedEnemiesScreenX;
    TArrayNoInit<INT> detectedEnemiesScreenY;
    TArrayNoInit<BYTE> detectedEnemiesState;
    TArrayNoInit<FClientObjectiveInfo> ObjectiveData;
    TArrayNoInit<FClientObjectiveActorInfo> ObjectiveActorData;
    TArrayNoInit<FMarkerData> markers;
    BITFIELD bDisplayChatWindow:1;
    INT CurrentChatWindowSize;
    INT ChatScrollDelta;
    TArrayNoInit<FHUDMessage> Messages;
    TArrayNoInit<FString> Announcements;
    TArrayNoInit<FHUDMessage> PersonalMessages;
    TArrayNoInit<FEventMessage> EventMessages;
    BITFIELD bTalk:1;
    BITFIELD bTeamTalk:1;
    BITFIELD bQuickChat:1;
    BITFIELD aHeadIsTalking:1;
    TArrayNoInit<FString> loadoutNames;
    TArrayNoInit<BYTE> loadoutEnabled;
    BITFIELD bLoadoutSelection:1;
	  FColor	eventGetTeamColor(BYTE alignment, BITFIELD bHighlight, class UClass* ObjectTeam)
	  {
        UClientSideCharacter_eventGetTeamColor_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.alignment=alignment;
		   Parms.bHighlight=bHighlight;
		   Parms.ObjectTeam=ObjectTeam;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_GetTeamColor),&Parms);
		   return Parms.ReturnValue;
	  }
	  BYTE	eventGetTeamAlignment(class APlayerCharacterController* localController, class APlayerReplicationInfo* PRI)
	  {
        UClientSideCharacter_eventGetTeamAlignment_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.localController=localController;
		   Parms.PRI=PRI;
        ProcessEvent(FindFunctionChecked(GAMEPLAY_GetTeamAlignment),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(UClientSideCharacter,URefCount,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UClientSideCharacter)
};

// Class	UTribesVisionNotifier is declared in "..\Gameplay\Classes\TribesVisionNotifier.uc"
class GAMEPLAY_API	UTribesVisionNotifier	: public UVisionNotifier
{
public:
	   DECLARE_FUNCTION(execgetEnemyList);
	   DECLARE_FUNCTION(execgetSeenList);
	   DECLARE_FUNCTION(execRemoveAnyReferencesToPawn);
	   DECLARE_FUNCTION(execisLocallyVisible);
	   DECLARE_FUNCTION(execisVisible);
	   DECLARE_CLASS(UTribesVisionNotifier,UVisionNotifier,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UTribesVisionNotifier)
};

// Class	USpeakerRecord is declared in "..\Gameplay\Classes\SpeechManager\SpeakerRecord.uc"
class GAMEPLAY_API	USpeakerRecord	: public UObject
{
public:
    FSpeakerRef speaker;
    class USpeechCategory* category;
    class USound* speechSound;
    FStringNoInit speechName;
    INT channelID;
    INT soundID;
    INT Priority;
    INT flags;
    FLOAT duration;
    FLOAT currentDuration;
	   DECLARE_CLASS(USpeakerRecord,UObject,0,Gameplay)

	inline UBOOL operator==(USpeakerRecord other)
	{ 
		if( (speaker.bAnnouncer && other.speaker.bAnnouncer) ||									// both announcer
			((speaker.PRI != NULL) && (speaker.PRI == other.speaker.PRI)) ||					// same PRI
			((speaker.Character != NULL) && (speaker.Character == other.speaker.Character)) )	// same character
				return true;

		return false;
	}

	inline UBOOL operator!=(USpeakerRecord other)
	{ 
		if((speaker.bAnnouncer && other.speaker.bAnnouncer) ||									// both announcer
			((speaker.PRI != NULL) && (speaker.PRI == other.speaker.PRI)) ||					// same PRI
			((speaker.Character != NULL) && (speaker.Character == other.speaker.Character)) )	// same character
				return false;

		return true;
	}
};

// Class	USpeechCategory is declared in "..\Gameplay\Classes\SpeechManager\SpeechCategory.uc"
class GAMEPLAY_API	USpeechCategory	: public UObject
{
public:
    FName EventName;
    FLOAT Priority;
    FLOAT Frequency;
    BYTE channelID;
    BITFIELD exclusive:1;
    FLOAT lingerDuration;
    BITFIELD bHasSquadCondition:1;
    TArrayNoInit<FSpeechPoolMap> poolMap;
	   DECLARE_CLASS(USpeechCategory,UObject,0|CLASS_Config,Gameplay)

	void BuildTagFileMap();
	void PoolByKey(const FString &base, TArray<FString*> &speechPool, const FString &KeyString, const FString &KeyString2 = FString(TEXT("")));
	FString PoolAndSelect(ACharacter *speaker, AActor* Instigator, AActor* Other, FString extraKey);

private:

	TMultiMap<FName, FString*> speechPoolMapping;
};

// Class	USpeechCategoryManager is declared in "..\Gameplay\Classes\SpeechManager\SpeechCategoryManager.uc"
class GAMEPLAY_API	USpeechCategoryManager	: public UObject
{
public:
    TArrayNoInit<FString> categoryNames;
    TArrayNoInit<class USpeechCategory*> categories;
	  void	eventLoadCategories()
	  {
		   ProcessEvent(FindFunctionChecked(GAMEPLAY_LoadCategories),NULL);
	  }
	   DECLARE_CLASS(USpeechCategoryManager,UObject,0|CLASS_Config,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(USpeechCategoryManager)
};

// Class	USpeechChannel is declared in "..\Gameplay\Classes\SpeechManager\SpeechChannel.uc"
class GAMEPLAY_API	USpeechChannel	: public UObject
{
public:
    INT Id;
    INT maxSounds;
    INT Priority;
    BITFIELD bStreamed:1;
    BITFIELD bLifo:1;
    TArrayNoInit<class USpeakerRecord*> speechList;
    class UConcreteSpeechManager* SpeechManager;
    FLOAT SpeechVolume;
    BITFIELD bDebugLogged:1;
    BITFIELD bDisabled:1;
	   DECLARE_CLASS(USpeechChannel,UObject,0|CLASS_Config,Gameplay)
	///
	/// Plays speech in the channel
	///
	FLOAT PlaySpeech(FSpeakerRef speaker, FString speechName, FString packageName, FString basePath = TEXT(""), ESubtitleType subtitleType = SUBTITLE_None, USpeechCategory* category = NULL, UBOOL bPositional = true);

	///
	/// Finds a speaker record, if it exists, within the list of currently active
	/// speech objects. Returns the located record or NULL if one is not found
	///
	USpeakerRecord* FindSpeakerRecord(FSpeakerRef speaker);

	///
	/// Cancels a currently playing speaker record.
	///
	void CancelSpeech(USpeakerRecord *record, UBOOL killSound = 1);

	///
	/// Cancels all currently playing speech in the channel.
	///
	void CancelAllSpeech();

	///
	/// Updates the channel
	///
	void Tick(FLOAT dt);
};

// Class	UConcreteSpeechManager is declared in "..\Gameplay\Classes\SpeechManager\ConcreteSpeechManager.uc"
class GAMEPLAY_API	UConcreteSpeechManager	: public USpeechManager
{
public:
    FLOAT SpeechPitch;
    FLOAT SpeechInnerRadius;
    FLOAT SpeechOuterRadius;
    FStringNoInit AnnouncerType;
    FLOAT VolumePriorityDisabledLagTime;
    FLOAT SecondsPerWord;
    class USpeechCategoryManager* categoryManager;
    TArrayNoInit<class USpeechChannel*> channels;
    BITFIELD bIgnoreCategoryFrequency:1;
    TArrayNoInit<FString> AIVoiceSetPrecache;
    TArrayNoInit<FString> VOPrecache;
	   DECLARE_FUNCTION(execPrecacheVO);
	   DECLARE_FUNCTION(execPrecacheAIVoiceSet);
	   DECLARE_CLASS(UConcreteSpeechManager,USpeechManager,0|CLASS_Config,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UConcreteSpeechManager)
};

// Class	UTribesGUIConfig is declared in "..\Gameplay\Classes\GUI\TribesGUIConfig.uc"
class GAMEPLAY_API	UTribesGUIConfig	: public UObject
{
public:
    FStringNoInit ExitMenuClass;
    FStringNoInit EntryMenuClass;
    BITFIELD bShownEntryMenu:1;
    class ULevelSummary* CurrentLevelSummary;
    FStringNoInit CurrentURL;
    FStringNoInit openingMusic;
    FStringNoInit CurrentMission;
    FStringNoInit LastCutscene;
    class UCampaignInfo* CurrentCampaign;
    BITFIELD bTravelMission:1;
    FStringNoInit CurrentGameInfo;
    BITFIELD bMissionFailed:1;
    TArrayNoInit<FString> ScreenResolutionChoices;
    BYTE TribesGameState;
    FStringNoInit MPHostURL;
    BITFIELD bDedicated:1;
    FStringNoInit advancedGameType;
    FStringNoInit advancedMap;
	   DECLARE_CLASS(UTribesGUIConfig,UObject,0|CLASS_Config,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UTribesGUIConfig)
};

// Class	UxUtil is declared in "..\Gameplay\Classes\xAdmin\xUtil.uc"
class GAMEPLAY_API	UxUtil	: public UObject
{
public:
    class UCacheMutators* CachedMutatorList;
	   DECLARE_FUNCTION(execGetMutatorList);
	   DECLARE_CLASS(UxUtil,UObject,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UxUtil)
};

// Class	UCacheMutators is declared in "..\Gameplay\Classes\xAdmin\CacheMutators.uc"
class GAMEPLAY_API	UCacheMutators	: public UxUtil
{
public:
    TArrayNoInit<FMutatorRecord> Records;
	   DECLARE_CLASS(UCacheMutators,UxUtil,0,Gameplay)
	   NO_DEFAULT_CONSTRUCTOR(UCacheMutators)
};

#endif

AUTOGENERATE_FUNCTION(UAnimationManager,-1,execplayFlinchAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execstopArmAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execgetArmAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execisLoopingArmAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execloopArmAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execstopUpperBodyAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execisLoopingUpperBodyAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execisPlayingUpperBodyAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execloopUpperBodyAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execplayUpperBodyAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execplayFireAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execstopAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execisLoopingAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execisPlayingAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execloopAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execplayAnimation);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execStartAnimating);
AUTOGENERATE_FUNCTION(UAnimationManager,-1,execStopAnimating);
AUTOGENERATE_FUNCTION(UAnimationSpring,-1,execSnap);
AUTOGENERATE_FUNCTION(UAnimationSpring,-1,execUpdate);
AUTOGENERATE_FUNCTION(ACharacter,-1,execisTouchingEnergyBarrier);
AUTOGENERATE_FUNCTION(ACharacter,-1,execropeObstructionTrace);
AUTOGENERATE_FUNCTION(ACharacter,-1,execGravity);
AUTOGENERATE_FUNCTION(ACharacter,-1,execgetAirSpace);
AUTOGENERATE_FUNCTION(ACharacter,-1,execisInAir);
AUTOGENERATE_FUNCTION(ACharacter,-1,execsetupVisionBone);
AUTOGENERATE_FUNCTION(ACharacter,-1,execcheckManualAnimation);
AUTOGENERATE_FUNCTION(ACharacter,-1,execgetMount);
AUTOGENERATE_FUNCTION(ACharacter,-1,execgetDrivenVehicle);
AUTOGENERATE_FUNCTION(ACharacter,-1,execdebugMovement);
AUTOGENERATE_FUNCTION(ACharacter,-1,execforceMovement);
AUTOGENERATE_FUNCTION(ACharacter,-1,execprefixMovement);
AUTOGENERATE_FUNCTION(ACharacter,-1,execenergyRequiredToJet);
AUTOGENERATE_FUNCTION(ACharacterMotor,-1,execreleaseFire);
AUTOGENERATE_FUNCTION(ACharacterMotor,-1,execreleaseAltFire);
AUTOGENERATE_FUNCTION(ACharacterMotor,-1,execAltFire);
AUTOGENERATE_FUNCTION(ACharacterMotor,-1,execFire);
AUTOGENERATE_FUNCTION(ACharacterMotor,-1,execGetViewRotation);
AUTOGENERATE_FUNCTION(ACharacterMotor,-1,execgetMoveYawDelta);
AUTOGENERATE_FUNCTION(ACharacterMotor,-1,execgetMoveRotation);
AUTOGENERATE_FUNCTION(ACharacterMotor,-1,execSetViewRotation);
AUTOGENERATE_FUNCTION(ACharacterMotor,-1,execsetAIMoveRotation);
AUTOGENERATE_FUNCTION(ACharacterMotor,-1,execsetMoveRotation);
AUTOGENERATE_FUNCTION(ACharacterMotor,-1,execmoveCharacter);
AUTOGENERATE_FUNCTION(UConcreteSpeechManager,-1,execPrecacheVO);
AUTOGENERATE_FUNCTION(UConcreteSpeechManager,-1,execPrecacheAIVoiceSet);
AUTOGENERATE_FUNCTION(UConsoleCommandManager,-1,exectoggleWatermark);
AUTOGENERATE_FUNCTION(ADynamicObject,-1,execGetExplosionSocketName);
AUTOGENERATE_FUNCTION(ADynamicObject,-1,execGetChildSocketName);
AUTOGENERATE_FUNCTION(ADynamicObject,-1,execInitialize);
AUTOGENERATE_FUNCTION(ADynamicObject,-1,execLoadSkinsFromMaterials);
AUTOGENERATE_FUNCTION(ADynamicObject,-1,execGetScalabilitySetting);
AUTOGENERATE_FUNCTION(ADynamicObject,-1,execsetNativeActorData);
AUTOGENERATE_FUNCTION(AHavokCar,-1,execswitchWheelClasses);
AUTOGENERATE_FUNCTION(AHavokCar,-1,exechavokCarSwitchClass);
AUTOGENERATE_FUNCTION(AHavokCar,-1,execRemakeVehicle);
AUTOGENERATE_FUNCTION(AJointControlledAircraft,-1,execsetCounterGravityForceScale);
AUTOGENERATE_FUNCTION(AJointControlledAircraft,-1,execsetFlightControlStrength);
AUTOGENERATE_FUNCTION(AJointControlledAircraft,-1,execsetFlightRotation);
AUTOGENERATE_FUNCTION(AJointControlledAircraft,-1,execsetFlightForce);
AUTOGENERATE_FUNCTION(AJointControlledAircraft,-1,execcalculateOutputControlForce);
AUTOGENERATE_FUNCTION(AMPCarryable,-1,execforceNetDirty);
AUTOGENERATE_FUNCTION(AMusicInfo,-1,execGetMusicDuration);
AUTOGENERATE_FUNCTION(APlayerCharacterController,-1,execResetSpeedhack);
AUTOGENERATE_FUNCTION(APlayerCharacterController,-1,execdynamicTurretRotationProcessing);
AUTOGENERATE_FUNCTION(APlayerCharacterController,-1,execCheckSpeedHack);
AUTOGENERATE_FUNCTION(AProjectile,-1,execresolveImpactEffect);
AUTOGENERATE_FUNCTION(ARepairRadius,-1,execSetRepairRadius);
AUTOGENERATE_FUNCTION(ARook,-1,execIsInVisionCone);
AUTOGENERATE_FUNCTION(ARook,-1,execgroundPredictedLocation);
AUTOGENERATE_FUNCTION(ARook,-1,execpredictedLocation);
AUTOGENERATE_FUNCTION(ARook,-1,execaverageVelocity);
AUTOGENERATE_FUNCTION(ARook,-1,execupdatePastPositions);
AUTOGENERATE_FUNCTION(ARook,-1,execdamageComponentsOnIncreaseHealth);
AUTOGENERATE_FUNCTION(ARook,-1,execdamageComponentsOnDamage);
AUTOGENERATE_FUNCTION(ARook,-1,execcreateDamageComponent);
AUTOGENERATE_FUNCTION(ARook,-1,execbreakDamageComponent);
AUTOGENERATE_FUNCTION(ARook,-1,execupdateHavokCollisionFilter);
AUTOGENERATE_FUNCTION(AShield,-1,execGetEffectMaterial);
AUTOGENERATE_FUNCTION(ASkinInfo,-1,execloadAllSkins);
AUTOGENERATE_FUNCTION(ATank,-1,execsetGripping);
AUTOGENERATE_FUNCTION(ATeamInfo,-1,exectickSensors);
AUTOGENERATE_FUNCTION(ATribesHUDBase,-1,execReplacePromptKeyBinds);
AUTOGENERATE_FUNCTION(UTribesVisionNotifier,-1,execgetEnemyList);
AUTOGENERATE_FUNCTION(UTribesVisionNotifier,-1,execgetSeenList);
AUTOGENERATE_FUNCTION(UTribesVisionNotifier,-1,execRemoveAnyReferencesToPawn);
AUTOGENERATE_FUNCTION(UTribesVisionNotifier,-1,execisLocallyVisible);
AUTOGENERATE_FUNCTION(UTribesVisionNotifier,-1,execisVisible);
AUTOGENERATE_FUNCTION(ATurretMotor,-1,execreleaseFire);
AUTOGENERATE_FUNCTION(ATurretMotor,-1,execFire);
AUTOGENERATE_FUNCTION(ATurretMotor,-1,execGetViewRotation);
AUTOGENERATE_FUNCTION(ATurretMotor,-1,execgetViewTarget);
AUTOGENERATE_FUNCTION(ATurretMotor,-1,execSetViewTarget);
AUTOGENERATE_FUNCTION(AVehicle,-1,execgetAngle);
AUTOGENERATE_FUNCTION(AVehicle,-1,execgetHighByte);
AUTOGENERATE_FUNCTION(AVehicle,-1,execgetLowByte);
AUTOGENERATE_FUNCTION(AVehicle,-1,execisHavokCompletelyInitialised);
AUTOGENERATE_FUNCTION(AVehicle,-1,execvehicleTransitionTrace);
AUTOGENERATE_FUNCTION(AVehicle,-1,execvehicleTrace);
AUTOGENERATE_FUNCTION(AVehicle,-1,execcameraTrace);
AUTOGENERATE_FUNCTION(AVehicle,-1,execperformFlip);
AUTOGENERATE_FUNCTION(AVehicle,-1,execforceNetDirty);
AUTOGENERATE_FUNCTION(AVehicle,-1,execGraphData);
AUTOGENERATE_FUNCTION(AVehicleSpawnPoint,-1,execspawnVehicle);
AUTOGENERATE_FUNCTION(AWeapon,-1,execAIAimTrace);
AUTOGENERATE_FUNCTION(AWeapon,-1,execaimTrace);
AUTOGENERATE_FUNCTION(UxUtil,573,execGetMutatorList);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack	(pop)
#endif

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(AAircraftMotor)
VERIFY_CLASS_SIZE_NODIE(UAnimationChannel)
VERIFY_CLASS_SIZE_NODIE(UAnimationInterpolator)
VERIFY_CLASS_SIZE_NODIE(UAnimationLayer)
VERIFY_CLASS_SIZE_NODIE(UAnimationManager)
VERIFY_CLASS_SIZE_NODIE(UAnimationSpring)
VERIFY_CLASS_SIZE_NODIE(UAnimationState)
VERIFY_CLASS_SIZE_NODIE(UArmor)
VERIFY_CLASS_SIZE_NODIE(ABaseAICharacter)
VERIFY_CLASS_SIZE_NODIE(ABaseDevice)
VERIFY_CLASS_SIZE_NODIE(ABaseInfo)
VERIFY_CLASS_SIZE_NODIE(ABuggy)
VERIFY_CLASS_SIZE_NODIE(ABuggyMotor)
VERIFY_CLASS_SIZE_NODIE(UCacheMutators)
VERIFY_CLASS_SIZE_NODIE(ACar)
VERIFY_CLASS_SIZE_NODIE(ACarMotor)
VERIFY_CLASS_SIZE_NODIE(ACharacter)
VERIFY_CLASS_SIZE_NODIE(ACharacterMotor)
VERIFY_CLASS_SIZE_NODIE(UClientSideCharacter)
VERIFY_CLASS_SIZE_NODIE(UConcreteSpeechManager)
VERIFY_CLASS_SIZE_NODIE(UConsoleCommandManager)
VERIFY_CLASS_SIZE_NODIE(UControllableTexMatrix)
VERIFY_CLASS_SIZE_NODIE(UControllableTexturePanner)
VERIFY_CLASS_SIZE_NODIE(UControllableTextureRotator)
VERIFY_CLASS_SIZE_NODIE(UCustomPlayerLoadout)
VERIFY_CLASS_SIZE_NODIE(ADeployable)
VERIFY_CLASS_SIZE_NODIE(ADeployedTurret)
VERIFY_CLASS_SIZE_NODIE(ADynamicObject)
VERIFY_CLASS_SIZE_NODIE(AEmergencyStation)
VERIFY_CLASS_SIZE_NODIE(AEnergyBarrier)
VERIFY_CLASS_SIZE_NODIE(AEquipment)
VERIFY_CLASS_SIZE_NODIE(AEquippable)
VERIFY_CLASS_SIZE_NODIE(AFlightControlJoint)
VERIFY_CLASS_SIZE_NODIE(AHavokCar)
VERIFY_CLASS_SIZE_NODIE(UHavokCarWheel)
VERIFY_CLASS_SIZE_NODIE(AInventoryStation)
VERIFY_CLASS_SIZE_NODIE(AInventoryStationPlatform)
VERIFY_CLASS_SIZE_NODIE(AJointControlledAircraft)
VERIFY_CLASS_SIZE_NODIE(ULoadout)
VERIFY_CLASS_SIZE_NODIE(AMPActor)
VERIFY_CLASS_SIZE_NODIE(AMPCarryable)
VERIFY_CLASS_SIZE_NODIE(AMotor)
VERIFY_CLASS_SIZE_NODIE(AMusicInfo)
VERIFY_CLASS_SIZE_NODIE(APlayerCharacter)
VERIFY_CLASS_SIZE_NODIE(APlayerCharacterController)
VERIFY_CLASS_SIZE_NODIE(APod)
VERIFY_CLASS_SIZE_NODIE(APodMotor)
VERIFY_CLASS_SIZE_NODIE(AProjectile)
VERIFY_CLASS_SIZE_NODIE(URadarInfo)
VERIFY_CLASS_SIZE_NODIE(ARagdoll)
VERIFY_CLASS_SIZE_NODIE(ARepairRadius)
VERIFY_CLASS_SIZE_NODIE(ARook)
VERIFY_CLASS_SIZE_NODIE(AShield)
VERIFY_CLASS_SIZE_NODIE(ASkinInfo)
VERIFY_CLASS_SIZE_NODIE(USpeakerRecord)
VERIFY_CLASS_SIZE_NODIE(USpeechCategory)
VERIFY_CLASS_SIZE_NODIE(USpeechCategoryManager)
VERIFY_CLASS_SIZE_NODIE(USpeechChannel)
VERIFY_CLASS_SIZE_NODIE(ASwitchStation)
VERIFY_CLASS_SIZE_NODIE(ATank)
VERIFY_CLASS_SIZE_NODIE(ATeamInfo)
VERIFY_CLASS_SIZE_NODIE(ATreadVehicle)
VERIFY_CLASS_SIZE_NODIE(UTribesGUIConfig)
VERIFY_CLASS_SIZE_NODIE(UTribesGUIControllerBase)
VERIFY_CLASS_SIZE_NODIE(ATribesHUDBase)
VERIFY_CLASS_SIZE_NODIE(UTribesVisionNotifier)
VERIFY_CLASS_SIZE_NODIE(ATurret)
VERIFY_CLASS_SIZE_NODIE(ATurretMotor)
VERIFY_CLASS_SIZE_NODIE(ATurretWeapon)
VERIFY_CLASS_SIZE_NODIE(AVehicle)
VERIFY_CLASS_SIZE_NODIE(UVehicleEffectObserver)
VERIFY_CLASS_SIZE_NODIE(UVehicleHavokData)
VERIFY_CLASS_SIZE_NODIE(AVehicleMotor)
VERIFY_CLASS_SIZE_NODIE(AVehicleMountedTurret)
VERIFY_CLASS_SIZE_NODIE(AVehicleSpawnPoint)
VERIFY_CLASS_SIZE_NODIE(AWeapon)
VERIFY_CLASS_SIZE_NODIE(UxUtil)
#endif // VERIFY_CLASS_SIZES

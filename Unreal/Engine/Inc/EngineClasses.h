/*===========================================================================
	  C++ class	definitions	exported from UnrealScript.
	  This is automatically	generated by the tools.
	  DO NOT modify	this manually! Edit	the	corresponding .uc files	instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API	FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AIHearSound)
AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(AcceptPlayInfoProperty)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorEnteredVolume)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(ActorLeavingVolume)
AUTOGENERATE_NAME(AddCameraEffect)
AUTOGENERATE_NAME(AddInteraction)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(AuthenticatedProfileResult)
AUTOGENERATE_NAME(AutoLoadMenuClass)
AUTOGENERATE_NAME(AutoLoadMenus)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(BreathTimer)
AUTOGENERATE_NAME(Broadcast)
AUTOGENERATE_NAME(BroadcastLocalized)
AUTOGENERATE_NAME(BroadcastLocalizedMessage)
AUTOGENERATE_NAME(BroadcastLocalizedTeam)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(ChangeAnimation)
AUTOGENERATE_NAME(CheckRelevance)
AUTOGENERATE_NAME(ClientCloseMenu)
AUTOGENERATE_NAME(ClientHearSound)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(ClientNameChange)
AUTOGENERATE_NAME(ClientOpenMenu)
AUTOGENERATE_NAME(ClientSetViewTarget)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(ClientValidate)
AUTOGENERATE_NAME(CloseAll)
AUTOGENERATE_NAME(CloseMenu)
AUTOGENERATE_NAME(ConnectFailure)
AUTOGENERATE_NAME(DemoPlaySound)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(DetourWeight)
AUTOGENERATE_NAME(EmailAlreadyTaken)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EndCrouch)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(EndedRotation)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(FillRenderPrecacheArrays)
AUTOGENERATE_NAME(FindTeamResult)
AUTOGENERATE_NAME(FinishedInterpolation)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(GameEnding)
AUTOGENERATE_NAME(GameSaved)
AUTOGENERATE_NAME(GameSpyInitialised)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(GetCurrentMaterial)
AUTOGENERATE_NAME(GetGameSpyPassword)
AUTOGENERATE_NAME(GetGameSpyProfileId)
AUTOGENERATE_NAME(GetLocalPlayerController)
AUTOGENERATE_NAME(GetNumTeams)
AUTOGENERATE_NAME(GetOverlayMaterial)
AUTOGENERATE_NAME(GetPatchDownloadURL)
AUTOGENERATE_NAME(GetProductRegionID)
AUTOGENERATE_NAME(GetProductVersionID)
AUTOGENERATE_NAME(GetRestartMap)
AUTOGENERATE_NAME(GetTravelPawn)
AUTOGENERATE_NAME(GetValueForKey)
AUTOGENERATE_NAME(GetValueForPlayerKey)
AUTOGENERATE_NAME(GetValueForTeamKey)
AUTOGENERATE_NAME(HTTPGetRequestResult)
AUTOGENERATE_NAME(HavokCharacterCollision)
AUTOGENERATE_NAME(HavokUpdateState)
AUTOGENERATE_NAME(HavokVehicleHasChanged)
AUTOGENERATE_NAME(HavokVehicleStateReceived)
AUTOGENERATE_NAME(HeadVolumeChange)
AUTOGENERATE_NAME(HearNoise)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(IgnoresSeenPawnsOfType)
AUTOGENERATE_NAME(Init)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(InitGameSpyData)
AUTOGENERATE_NAME(InitInputSystem)
AUTOGENERATE_NAME(InitializeController)
AUTOGENERATE_NAME(Initialized)
AUTOGENERATE_NAME(IsPageActive)
AUTOGENERATE_NAME(KeyFrameReached)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(LIPSincAnimEnd)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(LevelChange)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(MayFall)
AUTOGENERATE_NAME(ModifyVelocity)
AUTOGENERATE_NAME(Notify)
AUTOGENERATE_NAME(NotifyBump)
AUTOGENERATE_NAME(NotifyGameStarted)
AUTOGENERATE_NAME(NotifyHeadVolumeChange)
AUTOGENERATE_NAME(NotifyHitMover)
AUTOGENERATE_NAME(NotifyHitWall)
AUTOGENERATE_NAME(NotifyJumpApex)
AUTOGENERATE_NAME(NotifyLanded)
AUTOGENERATE_NAME(NotifyMissedJump)
AUTOGENERATE_NAME(NotifyPhysicsVolumeChange)
AUTOGENERATE_NAME(OnAdminReply)
AUTOGENERATE_NAME(OnEffectInitialized)
AUTOGENERATE_NAME(OnEffectStarted)
AUTOGENERATE_NAME(OnEffectStopped)
AUTOGENERATE_NAME(OnFinishedPrecaching)
AUTOGENERATE_NAME(OnLevelChange)
AUTOGENERATE_NAME(OnMojoFinished)
AUTOGENERATE_NAME(OnNetworkBrowse)
AUTOGENERATE_NAME(OnOtherActorDestroyed)
AUTOGENERATE_NAME(OnOtherPawnDied)
AUTOGENERATE_NAME(OnPostPrecache)
AUTOGENERATE_NAME(OnProgress)
AUTOGENERATE_NAME(OnQueryPatchResult)
AUTOGENERATE_NAME(OnServerTravelFail)
AUTOGENERATE_NAME(OnServerTravelSuccess)
AUTOGENERATE_NAME(OpenMenu)
AUTOGENERATE_NAME(PawnEnteredVolume)
AUTOGENERATE_NAME(PawnLeavingVolume)
AUTOGENERATE_NAME(PhysicsChangedFor)
AUTOGENERATE_NAME(PhysicsVolumeChange)
AUTOGENERATE_NAME(PlayDying)
AUTOGENERATE_NAME(PlayEmitters)
AUTOGENERATE_NAME(PlayFalling)
AUTOGENERATE_NAME(PlayJump)
AUTOGENERATE_NAME(PlayLandingAnimation)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(PlayerSeesMe)
AUTOGENERATE_NAME(PlayerTick)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(PostLevelChange)
AUTOGENERATE_NAME(PostLoadGame)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(PostNetBeginPlay)
AUTOGENERATE_NAME(PostNetReceive)
AUTOGENERATE_NAME(PostPrecache)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(PostTakeDamage)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(PreAutoDestroyed)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(PreLevelChange)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(PreRenderCallback)
AUTOGENERATE_NAME(PreScriptedTextureRendered)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(PrecacheSpeech)
AUTOGENERATE_NAME(Process_KeyEvent)
AUTOGENERATE_NAME(Process_KeyType)
AUTOGENERATE_NAME(Process_Message)
AUTOGENERATE_NAME(Process_PostRender)
AUTOGENERATE_NAME(Process_PreRender)
AUTOGENERATE_NAME(Process_Tick)
AUTOGENERATE_NAME(ProfileCheckResult)
AUTOGENERATE_NAME(ProfileCreateResult)
AUTOGENERATE_NAME(ProgressCommand)
AUTOGENERATE_NAME(ProjectileTouch)
AUTOGENERATE_NAME(QueryPatchCompleted)
AUTOGENERATE_NAME(ReceiveLocalizedMessage)
AUTOGENERATE_NAME(RemoveCameraEffect)
AUTOGENERATE_NAME(RemoveInteraction)
AUTOGENERATE_NAME(RenderTexture)
AUTOGENERATE_NAME(ReplaceMenu)
AUTOGENERATE_NAME(SaveAllowed)
AUTOGENERATE_NAME(ServerCallback)
AUTOGENERATE_NAME(ServerChangeVoiceChatter)
AUTOGENERATE_NAME(ServerGetVoiceChatters)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(ServerValidationResponse)
AUTOGENERATE_NAME(SetAnimAction)
AUTOGENERATE_NAME(SetDataPrivateRWResult)
AUTOGENERATE_NAME(SetFocusTo)
AUTOGENERATE_NAME(SetHeadScale)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(SetProgressMessage)
AUTOGENERATE_NAME(SetProgressTime)
AUTOGENERATE_NAME(SetTeamAffiliationResult)
AUTOGENERATE_NAME(SetWalking)
AUTOGENERATE_NAME(ShouldActorsBlockSplash)
AUTOGENERATE_NAME(ShouldProjectileHit)
AUTOGENERATE_NAME(ShouldSuppressLevelRender)
AUTOGENERATE_NAME(ShowSubtitle)
AUTOGENERATE_NAME(SoakStop)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(StartClientDemoRec)
AUTOGENERATE_NAME(StartCrouch)
AUTOGENERATE_NAME(StopEmitters)
AUTOGENERATE_NAME(StopPlayFiring)
AUTOGENERATE_NAME(SuggestMovePreparation)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(TornOff)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(TriggerEffectEvent)
AUTOGENERATE_NAME(TriggerEvent)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(UnTriggerEffectEvent)
AUTOGENERATE_NAME(UniqueNickRegistrationResult)
AUTOGENERATE_NAME(UpdateCharacter)
AUTOGENERATE_NAME(UpdateComplete)
AUTOGENERATE_NAME(UpdateEyeHeight)
AUTOGENERATE_NAME(UpdatePrecacheRenderData)
AUTOGENERATE_NAME(UpdateVehicle)
AUTOGENERATE_NAME(UpdatedServerData)
AUTOGENERATE_NAME(UsedBy)
AUTOGENERATE_NAME(UserConnectionResult)
AUTOGENERATE_NAME(WorldSpaceOverlays)
AUTOGENERATE_NAME(ZoneChange)
AUTOGENERATE_NAME(canBePassed)
AUTOGENERATE_NAME(checkSocket)
AUTOGENERATE_NAME(deleteRemovedActions)
AUTOGENERATE_NAME(doRookRelatedAIProcessing)
AUTOGENERATE_NAME(enemyListSanityCheck)
AUTOGENERATE_NAME(getSocket)
AUTOGENERATE_NAME(isActive)
AUTOGENERATE_NAME(isAlive)
AUTOGENERATE_NAME(onMessage)
AUTOGENERATE_NAME(resetGoals)
AUTOGENERATE_NAME(setLimitedTimeLODActivation)
AUTOGENERATE_NAME(stopActions)
AUTOGENERATE_NAME(unifiedGetCOMPosition)
AUTOGENERATE_NAME(unifiedGetNaturalCOMPosition)

#ifndef NAMES_ONLY

// Enum EDoubleClickDir is declared in "..\Engine\Classes\Actor.uc"
enum EDoubleClickDir
{
	 DCLICK_None             =0,
	 DCLICK_Left             =1,
	 DCLICK_Right            =2,
	 DCLICK_Forward          =3,
	 DCLICK_Back             =4,
	 DCLICK_Active           =5,
	 DCLICK_Done             =6,
	 DCLICK_MAX              =7,
};
// Enum ETravelType is declared in "..\Engine\Classes\Actor.uc"
enum ETravelType
{
	 TRAVEL_Absolute         =0,
	 TRAVEL_Partial          =1,
	 TRAVEL_Relative         =2,
	 TRAVEL_MAX              =3,
};
// Enum EForceType is declared in "..\Engine\Classes\Actor.uc"
enum EForceType
{
	 FT_None                 =0,
	 FT_DragAlong            =1,
	 FT_MAX                  =2,
};
// Enum EMusicTransition is declared in "..\Engine\Classes\Actor.uc"
enum EMusicTransition
{
	 MTRAN_None              =0,
	 MTRAN_Instant           =1,
	 MTRAN_Segue             =2,
	 MTRAN_Fade              =3,
	 MTRAN_FastFade          =4,
	 MTRAN_SlowFade          =5,
	 MTRAN_MAX               =6,
};
// Enum ESoundOcclusion is declared in "..\Engine\Classes\Actor.uc"
enum ESoundOcclusion
{
	 OCCLUSION_Default       =0,
	 OCCLUSION_None          =1,
	 OCCLUSION_BSP           =2,
	 OCCLUSION_StaticMeshes  =3,
	 OCCLUSION_MAX           =4,
};
// Enum ERenderStyle is declared in "..\Engine\Classes\Actor.uc"
enum ERenderStyle
{
	 STY_None                =0,
	 STY_Normal              =1,
	 STY_Masked              =2,
	 STY_Translucent         =3,
	 STY_Modulated           =4,
	 STY_Alpha               =5,
	 STY_Additive            =6,
	 STY_Subtractive         =7,
	 STY_Particle            =8,
	 STY_AlphaZ              =9,
	 STY_MAX                 =10,
};
// Enum SocketCoordinates is declared in "..\Engine\Classes\Actor.uc"
enum SocketCoordinates
{
	 SOCKET_World            =0,
	 SOCKET_Local            =1,
	 SOCKET_MAX              =2,
};
// Enum ENetRole is declared in "..\Engine\Classes\Actor.uc"
enum ENetRole
{
	 ROLE_None               =0,
	 ROLE_DumbProxy          =1,
	 ROLE_SimulatedProxy     =2,
	 ROLE_AutonomousProxy    =3,
	 ROLE_Authority          =4,
	 ROLE_MAX                =5,
};
// Enum EDetailMode is declared in "..\Engine\Classes\Actor.uc"
enum EDetailMode
{
	 DM_Low                  =0,
	 DM_High                 =1,
	 DM_SuperHigh            =2,
	 DM_MAX                  =3,
};
// Enum EFilterState is declared in "..\Engine\Classes\Actor.uc"
enum EFilterState
{
	 FS_Maybe                =0,
	 FS_Yes                  =1,
	 FS_No                   =2,
	 FS_MAX                  =3,
};
// Enum EDrawType is declared in "..\Engine\Classes\Actor.uc"
enum EDrawType
{
	 DT_None                 =0,
	 DT_Sprite               =1,
	 DT_Mesh                 =2,
	 DT_Brush                =3,
	 DT_RopeSprite           =4,
	 DT_VerticalSprite       =5,
	 DT_Terraform            =6,
	 DT_SpriteAnimOnce       =7,
	 DT_StaticMesh           =8,
	 DT_DrawType             =9,
	 DT_Particle             =10,
	 DT_AntiPortal           =11,
	 DT_FluidSurface         =12,
	 DT_FluidVolume          =13,
	 DT_MAX                  =14,
};
// Enum EPhysics is declared in "..\Engine\Classes\Actor.uc"
enum EPhysics
{
	 PHYS_None               =0,
	 PHYS_Walking            =1,
	 PHYS_Falling            =2,
	 PHYS_Swimming           =3,
	 PHYS_Flying             =4,
	 PHYS_Rotating           =5,
	 PHYS_Projectile         =6,
	 PHYS_Interpolating      =7,
	 PHYS_MovingBrush        =8,
	 PHYS_Spider             =9,
	 PHYS_Trailer            =10,
	 PHYS_Ladder             =11,
	 PHYS_RootMotion         =12,
	 PHYS_Karma_Deprecated   =13,
	 PHYS_KarmaRagDoll_Deprecated=14,
	 PHYS_Havok              =15,
	 PHYS_HavokSkeletal      =16,
	 PHYS_Movement           =17,
	 PHYS_MAX                =18,
};
// Enum ELightEffect is declared in "..\Engine\Classes\Actor.uc"
enum ELightEffect
{
	 LE_Pointlight           =0,
	 LE_Sunlight             =1,
	 LE_Spotlight            =2,
	 LE_MAX                  =3,
};
// Enum ELightType is declared in "..\Engine\Classes\Actor.uc"
enum ELightType
{
	 LT_None                 =0,
	 LT_Steady               =1,
	 LT_Pulse                =2,
	 LT_Blink                =3,
	 LT_Flicker              =4,
	 LT_Strobe               =5,
	 LT_BackdropLight        =6,
	 LT_SubtlePulse          =7,
	 LT_TexturePaletteOnce   =8,
	 LT_TexturePaletteLoop   =9,
	 LT_FadeOut              =10,
	 LT_MAX                  =11,
};
// Constant MINFLOORZ is declared in "..\Engine\Classes\Actor.uc"
#define UCONST_MINFLOORZ 0.7
// Constant MAXSTEPHEIGHT is declared in "..\Engine\Classes\Actor.uc"
#define UCONST_MAXSTEPHEIGHT 35.0

// "event"	function whose parameters correspond to	"struct AActor_eventPrecacheSpeech_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPrecacheSpeech_Parms
{
	  class USpeechManager* Manager;
};
// "event"	function whose parameters correspond to	"struct AActor_eventShouldActorsBlockSplash_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventShouldActorsBlockSplash_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventShouldProjectileHit_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventShouldProjectileHit_Parms
{
	  class AActor* projInstigator;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventunifiedGetCOMPosition_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventunifiedGetCOMPosition_Parms
{
	  FVector ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventunifiedGetNaturalCOMPosition_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventunifiedGetNaturalCOMPosition_Parms
{
	  FVector ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventcheckSocket_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventcheckSocket_Parms
{
	  FString Name;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventgetSocket_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventgetSocket_Parms
{
	  FString Name;
	  FVector Position;
	  FRotator Rotation;
	  FVector Scale;
	  BYTE coordinates;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventonMessage_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventonMessage_Parms
{
	  class UMessage* msg;
};
// "event"	function whose parameters correspond to	"struct AActor_eventGetCurrentMaterial_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventGetCurrentMaterial_Parms
{
	  INT Index;
	  class UMaterial* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventUnTriggerEffectEvent_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventUnTriggerEffectEvent_Parms
{
	  FName EffectEvent;
	  FName ReferenceTag;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTriggerEffectEvent_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTriggerEffectEvent_Parms
{
	  FName EffectEvent;
	  class AActor* Other;
	  class UMaterial* TargetMaterial;
	  FVector HitLocation;
	  FRotator HitNormal;
	  BITFIELD PlayOnOther;
	  BITFIELD QueryOnly;
	  class IIEffectObserver* Observer;
	  FName ReferenceTag;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTriggerEvent_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTriggerEvent_Parms
{
	  FName EventName;
	  class AActor* Other;
	  class APawn* EventInstigator;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTravelPostAccept_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTravelPostAccept_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventTravelPreAccept_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTravelPreAccept_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventUpdatePrecacheRenderData_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventUpdatePrecacheRenderData_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostLoadGame_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostLoadGame_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostNetBeginPlay_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostNetBeginPlay_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventSetInitialState_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventSetInitialState_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostBeginPlay_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostBeginPlay_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventBroadcastLocalizedMessage_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventBroadcastLocalizedMessage_Parms
{
	  class UClass* MessageClass;
	  INT Switch;
	  class APlayerReplicationInfo* RelatedPRI_1;
	  class APlayerReplicationInfo* RelatedPRI_2;
	  class UObject* OptionalObject;
};
// "event"	function whose parameters correspond to	"struct AActor_eventPreBeginPlay_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPreBeginPlay_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPreScriptedTextureRendered_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPreScriptedTextureRendered_Parms
{
	  class UScriptedTexture* Tex;
};
// "event"	function whose parameters correspond to	"struct AActor_eventRenderTexture_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventRenderTexture_Parms
{
	  class UScriptedTexture* Tex;
};
// "event"	function whose parameters correspond to	"struct AActor_eventBeginPlay_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventBeginPlay_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostTeleport_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostTeleport_Parms
{
	  class ATeleporter* OutTeleporter;
};
// "event"	function whose parameters correspond to	"struct AActor_eventPreTeleport_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPreTeleport_Parms
{
	  class ATeleporter* InTeleporter;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventDemoPlaySound_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventDemoPlaySound_Parms
{
	  class USound* Sound;
	  FLOAT Volume;
	  BITFIELD bNoOverride;
	  FLOAT InnerRadius;
	  FLOAT OuterRadius;
	  FLOAT Pitch;
	  INT flags;
	  FLOAT FadeInTime;
	  BITFIELD Attenuate;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTornOff_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTornOff_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostTakeDamage_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostTakeDamage_Parms
{
	  FLOAT Damage;
	  class APawn* EventInstigator;
	  FVector HitLocation;
	  FVector Momentum;
	  class UClass* DamageType;
	  FLOAT projectileFactor;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTakeDamage_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTakeDamage_Parms
{
	  FLOAT Damage;
	  class APawn* EventInstigator;
	  FVector HitLocation;
	  FVector Momentum;
	  class UClass* DamageType;
	  FLOAT projectileFactor;
};
// "event"	function whose parameters correspond to	"struct AActor_eventKilledBy_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventKilledBy_Parms
{
	  class APawn* EventInstigator;
};
// "event"	function whose parameters correspond to	"struct AActor_eventProjectileTouch_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventProjectileTouch_Parms
{
	  class AActor* Other;
	  FVector TouchLocation;
	  FVector TouchNormal;
};
// "event"	function whose parameters correspond to	"struct AActor_eventUsedBy_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventUsedBy_Parms
{
	  class APawn* User;
};
// "event"	function whose parameters correspond to	"struct AActor_eventEndedRotation_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventEndedRotation_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventFinishedInterpolation_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventFinishedInterpolation_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventEncroachedBy_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventEncroachedBy_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventEncroachingOn_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventEncroachingOn_Parms
{
	  class AActor* Other;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventSpecialHandling_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventSpecialHandling_Parms
{
	  class APawn* Other;
	  class AActor* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventDetach_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventDetach_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventAttach_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventAttach_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventBaseChange_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventBaseChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventBump_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventBump_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventUnTouch_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventUnTouch_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostTouch_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostTouch_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTouch_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTouch_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventPhysicsVolumeChange_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPhysicsVolumeChange_Parms
{
	  class APhysicsVolume* NewVolume;
};
// "event"	function whose parameters correspond to	"struct AActor_eventZoneChange_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventZoneChange_Parms
{
	  class AZoneInfo* NewZone;
};
// "event"	function whose parameters correspond to	"struct AActor_eventLanded_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventLanded_Parms
{
	  FVector HitNormal;
};
// "event"	function whose parameters correspond to	"struct AActor_eventFalling_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventFalling_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventHitWall_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventHitWall_Parms
{
	  FVector HitNormal;
	  class AActor* HitWall;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTimer_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTimer_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventEndEvent_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventEndEvent_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventBeginEvent_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventBeginEvent_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventUnTrigger_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventUnTrigger_Parms
{
	  class AActor* Other;
	  class APawn* EventInstigator;
};
// "event"	function whose parameters correspond to	"struct AActor_eventTrigger_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTrigger_Parms
{
	  class AActor* Other;
	  class APawn* EventInstigator;
};
// "event"	function whose parameters correspond to	"struct AActor_eventPostNetReceive_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventPostNetReceive_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventTick_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventTick_Parms
{
	  FLOAT DeltaTime;
};
// "event"	function whose parameters correspond to	"struct AActor_eventLostChild_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventLostChild_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventGainedChild_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventGainedChild_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AActor_eventDestroyed_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventDestroyed_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventHavokUpdateState_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventHavokUpdateState_Parms
{
	  FHavokRigidBodyState NewState;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AActor_eventAnimEnd_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventAnimEnd_Parms
{
	  INT Channel;
};
// "event"	function whose parameters correspond to	"struct AActor_eventLIPSincAnimEnd_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventLIPSincAnimEnd_Parms
{
};
// "event"	function whose parameters correspond to	"struct AActor_eventGetOverlayMaterial_Parms"	is declared	in "..\Engine\Classes\Actor.uc"
struct AActor_eventGetOverlayMaterial_Parms
{
	  INT Index;
	  class UMaterial* ReturnValue;
};

// Enum ECsgOper is declared in "..\Engine\Classes\Brush.uc"
enum ECsgOper
{
	 CSG_Active              =0,
	 CSG_Add                 =1,
	 CSG_Subtract            =2,
	 CSG_Intersect           =3,
	 CSG_Deintersect         =4,
	 CSG_MAX                 =5,
};




// "event"	function whose parameters correspond to	"struct APhysicsVolume_eventPawnLeavingVolume_Parms"	is declared	in "..\Engine\Classes\PhysicsVolume.uc"
struct APhysicsVolume_eventPawnLeavingVolume_Parms
{
	  class APawn* Other;
};
// "event"	function whose parameters correspond to	"struct APhysicsVolume_eventPawnEnteredVolume_Parms"	is declared	in "..\Engine\Classes\PhysicsVolume.uc"
struct APhysicsVolume_eventPawnEnteredVolume_Parms
{
	  class APawn* Other;
};
// "event"	function whose parameters correspond to	"struct APhysicsVolume_eventActorLeavingVolume_Parms"	is declared	in "..\Engine\Classes\PhysicsVolume.uc"
struct APhysicsVolume_eventActorLeavingVolume_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct APhysicsVolume_eventActorEnteredVolume_Parms"	is declared	in "..\Engine\Classes\PhysicsVolume.uc"
struct APhysicsVolume_eventActorEnteredVolume_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct APhysicsVolume_eventPhysicsChangedFor_Parms"	is declared	in "..\Engine\Classes\PhysicsVolume.uc"
struct APhysicsVolume_eventPhysicsChangedFor_Parms
{
	  class AActor* Other;
};



// Enum FindPathResult is declared in "..\Engine\Classes\Controller.uc"
enum FindPathResult
{
	 FPR_NoError             =0,
	 FPR_SearchSpaceExhausted=1,
	 FPR_MAX                 =2,
};
// Struct FFindPathAIProperties	is declared	in "..\Engine\Classes\Controller.uc"
struct ENGINE_API FFindPathAIProperties
{
    BITFIELD jetpack:1;
    BITFIELD Airborne:1;
    BITFIELD roadBased:1;
    FName teamName;
    FLOAT upCostFactor;
    FLOAT downCostFactor;
};

// Struct FRouteCacheElement	is declared	in "..\Engine\Classes\Controller.uc"
struct ENGINE_API FRouteCacheElement
{
    FVector Location;
    BITFIELD jetpack:1;
    FLOAT energy;
    class AActor* obstacle;
    FLOAT height;
    FLOAT Angle;
};

// Struct FTraversalLineCheck	is declared	in "..\Engine\Classes\Controller.uc"
struct ENGINE_API FTraversalLineCheck
{
    FVector Start;
    FVector End;
    FColor colour;
};

// Constant LATENT_MOVETOWARD is declared in "..\Engine\Classes\Controller.uc"
#define UCONST_LATENT_MOVETOWARD 503

// "event"	function whose parameters correspond to	"struct AController_eventNotifyMissedJump_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyMissedJump_Parms
{
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyJumpApex_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyJumpApex_Parms
{
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyHitMover_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyHitMover_Parms
{
	  FVector HitNormal;
	  class AMover* Wall;
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyBump_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyBump_Parms
{
	  class AActor* Other;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyHitWall_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyHitWall_Parms
{
	  FVector HitNormal;
	  class AActor* Wall;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyLanded_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyLanded_Parms
{
	  FVector HitNormal;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyHeadVolumeChange_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyHeadVolumeChange_Parms
{
	  class APhysicsVolume* NewVolume;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AController_eventNotifyPhysicsVolumeChange_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventNotifyPhysicsVolumeChange_Parms
{
	  class APhysicsVolume* NewVolume;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AController_eventLongFall_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventLongFall_Parms
{
};
// "event"	function whose parameters correspond to	"struct AController_eventSoakStop_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventSoakStop_Parms
{
	  FString problem;
};
// "event"	function whose parameters correspond to	"struct AController_eventHearNoise_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventHearNoise_Parms
{
	  FLOAT Loudness;
	  class AActor* NoiseMaker;
};
// "event"	function whose parameters correspond to	"struct AController_eventAIHearSound_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventAIHearSound_Parms
{
	  class AActor* Actor;
	  class USound* S;
	  FVector SoundLocation;
	  FVector Parameters;
	  BITFIELD Attenuate;
};
// "event"	function whose parameters correspond to	"struct AController_eventMayFall_Parms"	is declared	in "..\Engine\Classes\Controller.uc"
struct AController_eventMayFall_Parms
{
};

// "event"	function whose parameters correspond to	"struct APlayerController_eventGetTravelPawn_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventGetTravelPawn_Parms
{
	  class APawn* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventStartClientDemoRec_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventStartClientDemoRec_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventServerGetVoiceChatters_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventServerGetVoiceChatters_Parms
{
	  class APlayerController* Player;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventServerChangeVoiceChatter_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventServerChangeVoiceChatter_Parms
{
	  class APlayerController* Player;
	  INT IpAddr;
	  INT Handle;
	  BITFIELD Add;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientCloseMenu_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientCloseMenu_Parms
{
	  BITFIELD bCloseAll;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientOpenMenu_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientOpenMenu_Parms
{
	  FString menuClass;
	  FString MenuName;
	  BITFIELD bDisconnect;
	  FString Msg1;
	  FString Msg2;
	  INT Msg3;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventPlayerCalcView_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventPlayerCalcView_Parms
{
	  class AActor* ViewActor;
	  FVector CameraLocation;
	  FRotator CameraRotation;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventRemoveCameraEffect_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventRemoveCameraEffect_Parms
{
	  class UCameraEffect* ExEffect;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventAddCameraEffect_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventAddCameraEffect_Parms
{
	  class UCameraEffect* NewEffect;
	  BITFIELD RemoveExisting;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventPlayerTick_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventPlayerTick_Parms
{
	  FLOAT DeltaTime;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventSetProgressTime_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventSetProgressTime_Parms
{
	  FLOAT t;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventSetProgressMessage_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventSetProgressMessage_Parms
{
	  INT Index;
	  FString S;
	  FColor C;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventProgressCommand_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventProgressCommand_Parms
{
	  FString Cmd;
	  FString Msg1;
	  FString Msg2;
	  INT Seconds;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventPreClientTravel_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventPreClientTravel_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventOnFinishedPrecaching_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventOnFinishedPrecaching_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventTeamMessage_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventTeamMessage_Parms
{
	  class APlayerReplicationInfo* PRI;
	  FString S;
	  FName Type;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientMessage_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientMessage_Parms
{
	  FString S;
	  FName Type;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventReceiveLocalizedMessage_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventReceiveLocalizedMessage_Parms
{
	  class UClass* Message;
	  INT Switch;
	  class UObject* Related1;
	  class UObject* Related2;
	  class UObject* OptionalObject;
	  FString OptionalString;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventInitInputSystem_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventInitInputSystem_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientSetViewTarget_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientSetViewTarget_Parms
{
	  class AActor* A;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventShowSubtitle_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventShowSubtitle_Parms
{
	  FString Subtitle;
	  FLOAT lifetime;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventGameSaved_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventGameSaved_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientHearSound_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientHearSound_Parms
{
	  class AActor* Actor;
	  class USound* S;
	  FVector SoundLocation;
	  FVector Parameters;
	  FLOAT InnerRadius;
	  INT flags;
	  FLOAT FadeInTime;
	  BITFIELD Attenuate;
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventServerValidationResponse_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventServerValidationResponse_Parms
{
	  FString R;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientValidate_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientValidate_Parms
{
	  FString C;
};
// "event"	function whose parameters correspond to	"struct APlayerController_eventClientTravel_Parms"	is declared	in "..\Engine\Classes\PlayerController.uc"
struct APlayerController_eventClientTravel_Parms
{
	  FString URL;
	  BYTE TravelType;
	  BITFIELD bItems;
};





// "event"	function whose parameters correspond to	"struct AEmitter_eventPreAutoDestroyed_Parms"	is declared	in "..\Engine\Classes\Emitter.uc"
struct AEmitter_eventPreAutoDestroyed_Parms
{
};
// "event"	function whose parameters correspond to	"struct AEmitter_eventStopEmitters_Parms"	is declared	in "..\Engine\Classes\Emitter.uc"
struct AEmitter_eventStopEmitters_Parms
{
	  BITFIELD bStopOverTime;
};
// "event"	function whose parameters correspond to	"struct AEmitter_eventPlayEmitters_Parms"	is declared	in "..\Engine\Classes\Emitter.uc"
struct AEmitter_eventPlayEmitters_Parms
{
};

// Enum EOptimizeOption is declared in "..\Engine\Classes\ExternalCameras\GenericExternalCamera.uc"
enum EOptimizeOption
{
	 OPTIMIZE_None           =0,
	 OPTIMIZE_Radius         =1,
	 OPTIMIZE_Zone           =2,
	 OPTIMIZE_VisibleZones   =3,
	 OPTIMIZE_MAX            =4,
};


// Struct FConsoleMessage	is declared	in "..\Engine\Classes\HUD.uc"
struct ENGINE_API FConsoleMessage
{
    FStringNoInit Text;
    FColor TextColor;
    FLOAT MessageLife;
    class APlayerReplicationInfo* PRI;
};


// "event"	function whose parameters correspond to	"struct AHUD_eventPostRender_Parms"	is declared	in "..\Engine\Classes\HUD.uc"
struct AHUD_eventPostRender_Parms
{
	  class UCanvas* Canvas;
};
// "event"	function whose parameters correspond to	"struct AHUD_eventConnectFailure_Parms"	is declared	in "..\Engine\Classes\HUD.uc"
struct AHUD_eventConnectFailure_Parms
{
	  FString FailCode;
	  FString URL;
};
// "event"	function whose parameters correspond to	"struct AHUD_eventWorldSpaceOverlays_Parms"	is declared	in "..\Engine\Classes\HUD.uc"
struct AHUD_eventWorldSpaceOverlays_Parms
{
};

// Enum EAutoComputeConstraint is declared in "..\Engine\Classes\HavokConstraint.uc"
enum EAutoComputeConstraint
{
	 HKC_DontAutoCompute     =0,
	 HKC_AutoComputeBothFromC=1,
	 HKC_AutoComputeAFromC   =2,
	 HKC_AutoComputeBFromC   =3,
	 HKC_AutoComputeAFromB   =4,
	 HKC_AutoComputeBFromA   =5,
	 HKC_MAX                 =6,
};




// Enum EHavokHingeMotorType is declared in "..\Engine\Classes\HavokHingeConstraint.uc"
enum EHavokHingeMotorType
{
	 HKHM_SpringDamper       =0,
	 HKHM_Blending           =1,
	 HKHM_MAX                =2,
};
// Enum EHavokHingeType is declared in "..\Engine\Classes\HavokHingeConstraint.uc"
enum EHavokHingeType
{
	 HKH_Normal              =0,
	 HKH_Motorized           =1,
	 HKH_Controlled          =2,
	 HKH_MAX                 =3,
};



// Struct FKeyValuePair	is declared	in "..\Engine\Classes\Info.uc"
struct ENGINE_API FKeyValuePair
{
    FString Key;
    FString Value;
    friend	ENGINE_API FArchive& operator<<(FArchive& Ar,FKeyValuePair& MyKeyValuePair)
    {
        return	Ar	<< MyKeyValuePair.Key	<< MyKeyValuePair.Value;
    }
};

// Struct FPlayerResponseLine	is declared	in "..\Engine\Classes\Info.uc"
struct ENGINE_API FPlayerResponseLine
{
    INT PlayerNum;
    INT PlayerID;
    FString PlayerName;
    INT Ping;
    INT Score;
    INT StatsID;
    TArray<FKeyValuePair> PlayerInfo;
    friend	ENGINE_API FArchive& operator<<(FArchive& Ar,FPlayerResponseLine& MyPlayerResponseLine)
    {
        return	Ar	<< MyPlayerResponseLine.PlayerNum	<< MyPlayerResponseLine.PlayerID	<< MyPlayerResponseLine.PlayerName	<< MyPlayerResponseLine.Ping	<< MyPlayerResponseLine.Score	<< MyPlayerResponseLine.StatsID	<< MyPlayerResponseLine.PlayerInfo;
    }
};

// Struct FServerResponseLine	is declared	in "..\Engine\Classes\Info.uc"
struct ENGINE_API FServerResponseLine
{
    INT ServerID;
    FString IP;
    INT Port;
    INT QueryPort;
    FString ServerName;
    FString MapName;
    FString GameType;
    INT CurrentPlayers;
    INT MaxPlayers;
    INT Ping;
    TArray<FKeyValuePair> ServerInfo;
    TArray<FPlayerResponseLine> PlayerInfo;
    friend	ENGINE_API FArchive& operator<<(FArchive& Ar,FServerResponseLine& MyServerResponseLine)
    {
        return	Ar	<< MyServerResponseLine.ServerID	<< MyServerResponseLine.IP	<< MyServerResponseLine.Port	<< MyServerResponseLine.QueryPort	<< MyServerResponseLine.ServerName	<< MyServerResponseLine.MapName	<< MyServerResponseLine.GameType	<< MyServerResponseLine.CurrentPlayers	<< MyServerResponseLine.MaxPlayers	<< MyServerResponseLine.Ping	<< MyServerResponseLine.ServerInfo	<< MyServerResponseLine.PlayerInfo;
    }
};


// "event"	function whose parameters correspond to	"struct AInfo_eventAcceptPlayInfoProperty_Parms"	is declared	in "..\Engine\Classes\Info.uc"
struct AInfo_eventAcceptPlayInfoProperty_Parms
{
	  FString PropertyName;
	  BITFIELD ReturnValue;
};


// "event"	function whose parameters correspond to	"struct AGameInfo_eventGetRestartMap_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventGetRestartMap_Parms
{
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventSaveAllowed_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventSaveAllowed_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventOnServerTravelSuccess_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventOnServerTravelSuccess_Parms
{
	  FString URL;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventOnServerTravelFail_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventOnServerTravelFail_Parms
{
	  FString URL;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventBroadcastLocalizedTeam_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventBroadcastLocalizedTeam_Parms
{
	  class AActor* Sender;
	  class UClass* Message;
	  INT Switch;
	  class UObject* Related1;
	  class UObject* Related2;
	  class UObject* OptionalObject;
	  FString OptionalString;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventBroadcastLocalized_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventBroadcastLocalized_Parms
{
	  class AActor* Sender;
	  class UClass* Message;
	  INT Switch;
	  class UObject* Related1;
	  class UObject* Related2;
	  class UObject* OptionalObject;
	  FString OptionalString;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventBroadcast_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventBroadcast_Parms
{
	  class AActor* Sender;
	  FString msg;
	  FName Type;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventAcceptInventory_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventAcceptInventory_Parms
{
	  class APawn* PlayerPawn;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventPostLogin_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventPostLogin_Parms
{
	  class APlayerController* NewPlayer;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventLogin_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventLogin_Parms
{
	  FString Portal;
	  FString Options;
	  FString Error;
	  class APlayerController* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventPreLogin_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventPreLogin_Parms
{
	  FString Options;
	  FString Address;
	  FString Error;
	  FString FailCode;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventGetBeaconText_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventGetBeaconText_Parms
{
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventInitGame_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventInitGame_Parms
{
	  FString Options;
	  FString Error;
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventDetailChange_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventDetailChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventGameEnding_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventGameEnding_Parms
{
};
// "event"	function whose parameters correspond to	"struct AGameInfo_eventLevelChange_Parms"	is declared	in "..\Engine\Classes\GameInfo.uc"
struct AGameInfo_eventLevelChange_Parms
{
};



// Enum EDynamicMusicType is declared in "..\Engine\Classes\Music\MusicManagerBase.uc"
enum EDynamicMusicType
{
	 MT_None                 =0,
	 MT_Combat               =1,
	 MT_Tension              =2,
	 MT_MAX                  =3,
};


// "event"	function whose parameters correspond to	"struct AMutator_eventCheckRelevance_Parms"	is declared	in "..\Engine\Classes\Mutator.uc"
struct AMutator_eventCheckRelevance_Parms
{
	  class AActor* Other;
	  class AActor* replacement;
	  BITFIELD ReturnValue;
};



// Enum ECarriedObjectState is declared in "..\Engine\Classes\GameReplicationInfo.uc"
enum ECarriedObjectState
{
	 COS_Home                =0,
	 COS_HeldFriendly        =1,
	 COS_HeldEnemy           =2,
	 COS_Down                =3,
	 COS_MAX                 =4,
};


// "event"	function whose parameters correspond to	"struct APlayerReplicationInfo_eventClientNameChange_Parms"	is declared	in "..\Engine\Classes\PlayerReplicationInfo.uc"
struct APlayerReplicationInfo_eventClientNameChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct APlayerReplicationInfo_eventUpdateCharacter_Parms"	is declared	in "..\Engine\Classes\PlayerReplicationInfo.uc"
struct APlayerReplicationInfo_eventUpdateCharacter_Parms
{
};

// "event"	function whose parameters correspond to	"struct ASecurity_eventServerCallback_Parms"	is declared	in "..\Engine\Classes\Security.uc"
struct ASecurity_eventServerCallback_Parms
{
	  INT SecType;
	  FString data;
};
// Enum EFogType is declared in "..\Engine\Classes\ZoneInfo.uc"
enum EFogType
{
	 FG_Linear               =0,
	 FG_Exponential          =1,
	 FG_MAX                  =2,
};

// "event"	function whose parameters correspond to	"struct AZoneInfo_eventActorLeaving_Parms"	is declared	in "..\Engine\Classes\ZoneInfo.uc"
struct AZoneInfo_eventActorLeaving_Parms
{
	  class AActor* Other;
};
// "event"	function whose parameters correspond to	"struct AZoneInfo_eventActorEntered_Parms"	is declared	in "..\Engine\Classes\ZoneInfo.uc"
struct AZoneInfo_eventActorEntered_Parms
{
	  class AActor* Other;
};
// Enum EPlatform is declared in "..\Engine\Classes\LevelInfo.uc"
enum EPlatform
{
	 PC                      =0,
	 PS2                     =1,
	 XBOX                    =2,
};
// Enum ENetMode is declared in "..\Engine\Classes\LevelInfo.uc"
enum ENetMode
{
	 NM_Standalone           =0,
	 NM_DedicatedServer      =1,
	 NM_ListenServer         =2,
	 NM_Client               =3,
	 NM_MAX                  =4,
};
// Enum ELevelAction is declared in "..\Engine\Classes\LevelInfo.uc"
enum ELevelAction
{
	 LEVACT_None             =0,
	 LEVACT_Loading          =1,
	 LEVACT_Saving           =2,
	 LEVACT_Connecting       =3,
	 LEVACT_Precaching       =4,
	 LEVACT_MAX              =5,
};
// Enum EPhysicsDetailLevel is declared in "..\Engine\Classes\LevelInfo.uc"
enum EPhysicsDetailLevel
{
	 PDL_Low                 =0,
	 PDL_Medium              =1,
	 PDL_High                =2,
	 PDL_MAX                 =3,
};

// "event"	function whose parameters correspond to	"struct ALevelInfo_eventGetLocalPlayerController_Parms"	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ALevelInfo_eventGetLocalPlayerController_Parms
{
	  class APlayerController* ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ALevelInfo_eventNotifyGameStarted_Parms"	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ALevelInfo_eventNotifyGameStarted_Parms
{
};
// "event"	function whose parameters correspond to	"struct ALevelInfo_eventServerTravel_Parms"	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ALevelInfo_eventServerTravel_Parms
{
	  FString URL;
	  BITFIELD bItems;
};
// "event"	function whose parameters correspond to	"struct ALevelInfo_eventFillRenderPrecacheArrays_Parms"	is declared	in "..\Engine\Classes\LevelInfo.uc"
struct ALevelInfo_eventFillRenderPrecacheArrays_Parms
{
};


// "event"	function whose parameters correspond to	"struct AWarpZoneInfo_eventForceGenerate_Parms"	is declared	in "..\Engine\Classes\WarpZoneInfo.uc"
struct AWarpZoneInfo_eventForceGenerate_Parms
{
};
// "event"	function whose parameters correspond to	"struct AWarpZoneInfo_eventGenerate_Parms"	is declared	in "..\Engine\Classes\WarpZoneInfo.uc"
struct AWarpZoneInfo_eventGenerate_Parms
{
};















// Enum EBumpType is declared in "..\Engine\Classes\Mover.uc"
enum EBumpType
{
	 BT_PlayerBump           =0,
	 BT_PawnBump             =1,
	 BT_AnyBump              =2,
	 BT_MAX                  =3,
};
// Enum EMoverGlideType is declared in "..\Engine\Classes\Mover.uc"
enum EMoverGlideType
{
	 MV_MoveByTime           =0,
	 MV_GlideByTime          =1,
	 MV_MAX                  =2,
};
// Enum EMoverEncroachType is declared in "..\Engine\Classes\Mover.uc"
enum EMoverEncroachType
{
	 ME_StopWhenEncroach     =0,
	 ME_ReturnWhenEncroach   =1,
	 ME_CrushWhenEncroach    =2,
	 ME_IgnoreWhenEncroach   =3,
	 ME_MAX                  =4,
};

// "event"	function whose parameters correspond to	"struct AMover_eventKeyFrameReached_Parms"	is declared	in "..\Engine\Classes\Mover.uc"
struct AMover_eventKeyFrameReached_Parms
{
};

// "event"	function whose parameters correspond to	"struct ANavigationPoint_eventSuggestMovePreparation_Parms"	is declared	in "..\Engine\Classes\NavigationPoint.uc"
struct ANavigationPoint_eventSuggestMovePreparation_Parms
{
	  class APawn* Other;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ANavigationPoint_eventDetourWeight_Parms"	is declared	in "..\Engine\Classes\NavigationPoint.uc"
struct ANavigationPoint_eventDetourWeight_Parms
{
	  class APawn* Other;
	  FLOAT PathWeight;
	  FLOAT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ANavigationPoint_eventAccept_Parms"	is declared	in "..\Engine\Classes\NavigationPoint.uc"
struct ANavigationPoint_eventAccept_Parms
{
	  class AActor* Incoming;
	  class AActor* Source;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct ANavigationPoint_eventSpecialCost_Parms"	is declared	in "..\Engine\Classes\NavigationPoint.uc"
struct ANavigationPoint_eventSpecialCost_Parms
{
	  class APawn* Seeker;
	  class UReachSpec* Path;
	  INT ReturnValue;
};














// "event"	function whose parameters correspond to	"struct APawn_eventPlayLandingAnimation_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventPlayLandingAnimation_Parms
{
	  FLOAT impactVel;
};
// "event"	function whose parameters correspond to	"struct APawn_eventPlayFalling_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventPlayFalling_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventPlayJump_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventPlayJump_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventChangeAnimation_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventChangeAnimation_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventStopPlayFiring_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventStopPlayFiring_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventPlayDying_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventPlayDying_Parms
{
	  class UClass* DamageType;
	  FVector HitLoc;
};
// "event"	function whose parameters correspond to	"struct APawn_eventSetAnimAction_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventSetAnimAction_Parms
{
	  FName NewAction;
};
// "event"	function whose parameters correspond to	"struct APawn_eventBreathTimer_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventBreathTimer_Parms
{
};
// "event"	function whose parameters correspond to	"struct APawn_eventHeadVolumeChange_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventHeadVolumeChange_Parms
{
	  class APhysicsVolume* newHeadVolume;
};
// "event"	function whose parameters correspond to	"struct APawn_eventsetLimitedTimeLODActivation_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventsetLimitedTimeLODActivation_Parms
{
	  INT ticksToKeepActivated;
};
// "event"	function whose parameters correspond to	"struct APawn_eventisAlive_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventisAlive_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventUpdateEyeHeight_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventUpdateEyeHeight_Parms
{
	  FLOAT DeltaTime;
};
// "event"	function whose parameters correspond to	"struct APawn_eventStartCrouch_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventStartCrouch_Parms
{
	  FLOAT HeightAdjust;
};
// "event"	function whose parameters correspond to	"struct APawn_eventEndCrouch_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventEndCrouch_Parms
{
	  FLOAT HeightAdjust;
};
// "event"	function whose parameters correspond to	"struct APawn_eventModifyVelocity_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventModifyVelocity_Parms
{
	  FLOAT DeltaTime;
	  FVector OldVelocity;
};
// "event"	function whose parameters correspond to	"struct APawn_eventClientMessage_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventClientMessage_Parms
{
	  FString S;
	  FName Type;
};
// "event"	function whose parameters correspond to	"struct APawn_eventSetWalking_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventSetWalking_Parms
{
	  BITFIELD bNewIsWalking;
};
// "event"	function whose parameters correspond to	"struct APawn_eventSetHeadScale_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventSetHeadScale_Parms
{
	  FLOAT NewScale;
};
// "event"	function whose parameters correspond to	"struct APawn_eventHavokCharacterCollision_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventHavokCharacterCollision_Parms
{
	  FHavokCharacterObjectInteractionEvent data;
	  FHavokCharacterObjectInteractionResult res;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct APawn_eventIgnoresSeenPawnsOfType_Parms"	is declared	in "..\Engine\Classes\Pawn.uc"
struct APawn_eventIgnoresSeenPawnsOfType_Parms
{
	  class UClass* SeenType;
	  BITFIELD ReturnValue;
};
// Struct FHavokCarState	is declared	in "..\Engine\Classes\HavokVehicle.uc"
struct ENGINE_API FHavokCarState
{
    FHavokRigidBodyState ChassisState;
    FLOAT ServerHandbrake;
    FLOAT ServerBrake;
    FLOAT ServerGas;
    INT ServerGear;
    FLOAT ServerSteering;
    INT bNewState;
};


// "event"	function whose parameters correspond to	"struct AHavokVehicle_eventHavokVehicleHasChanged_Parms"	is declared	in "..\Engine\Classes\HavokVehicle.uc"
struct AHavokVehicle_eventHavokVehicleHasChanged_Parms
{
};
// "event"	function whose parameters correspond to	"struct AHavokVehicle_eventUpdateVehicle_Parms"	is declared	in "..\Engine\Classes\HavokVehicle.uc"
struct AHavokVehicle_eventUpdateVehicle_Parms
{
	  FLOAT DeltaTime;
};
// "event"	function whose parameters correspond to	"struct AHavokVehicle_eventHavokVehicleStateReceived_Parms"	is declared	in "..\Engine\Classes\HavokVehicle.uc"
struct AHavokVehicle_eventHavokVehicleStateReceived_Parms
{
};



// Enum EProjectorBlending is declared in "..\Engine\Classes\Projector.uc"
enum EProjectorBlending
{
	 PB_None                 =0,
	 PB_Modulate             =1,
	 PB_AlphaBlend           =2,
	 PB_Add                  =3,
	 PB_AlphaModulate        =4,
	 PB_MAX                  =5,
};

// "event"	function whose parameters correspond to	"struct AProjector_eventPreRenderCallback_Parms"	is declared	in "..\Engine\Classes\Projector.uc"
struct AProjector_eventPreRenderCallback_Parms
{
};




// "event"	function whose parameters correspond to	"struct ALineOfSightTrigger_eventPlayerSeesMe_Parms"	is declared	in "..\Engine\Classes\LineOfSightTrigger.uc"
struct ALineOfSightTrigger_eventPlayerSeesMe_Parms
{
	  class APlayerController* p;
};
// Enum ETriggerType is declared in "..\Engine\Classes\Trigger.uc"
enum ETriggerType
{
	 TT_PlayerProximity      =0,
	 TT_PawnProximity        =1,
	 TT_ClassProximity       =2,
	 TT_AnyProximity         =3,
	 TT_Shoot                =4,
	 TT_HumanPlayerProximity =5,
	 TT_MAX                  =6,
};


// "event"	function whose parameters correspond to	"struct ATyrion_Setup_eventenemyListSanityCheck_Parms"	is declared	in "..\Engine\Classes\TyrionInterface\Tyrion_Setup.uc"
struct ATyrion_Setup_eventenemyListSanityCheck_Parms
{
	  class APawn* AI;
};
// "event"	function whose parameters correspond to	"struct ATyrion_Setup_eventstopActions_Parms"	is declared	in "..\Engine\Classes\TyrionInterface\Tyrion_Setup.uc"
struct ATyrion_Setup_eventstopActions_Parms
{
	  class APawn* Pawn;
};
// "event"	function whose parameters correspond to	"struct ATyrion_Setup_eventdoRookRelatedAIProcessing_Parms"	is declared	in "..\Engine\Classes\TyrionInterface\Tyrion_Setup.uc"
struct ATyrion_Setup_eventdoRookRelatedAIProcessing_Parms
{
	  FLOAT DeltaSeconds;
	  class APawn* Pawn;
};
// Enum EWeatherType is declared in "..\Engine\Classes\Effects\xWeatherEffect.uc"
enum EWeatherType
{
	 WT_Rain                 =0,
	 WT_Snow                 =1,
	 WT_Dust                 =2,
	 WT_MAX                  =3,
};
// Struct FWeatherPcl	is declared	in "..\Engine\Classes\Effects\xWeatherEffect.uc"
struct ENGINE_API FWeatherPcl
{
    FVector pos;
    FVector Vel;
    FLOAT Life;
    FLOAT Size;
    FLOAT HitTime;
    FLOAT InvLifeSpan;
    FLOAT DistAtten;
    BYTE frame;
    BYTE Dummy1;
    BYTE Visible;
    BYTE Dummy2;
};









// "event"	function whose parameters correspond to	"struct UAnimNotify_Scripted_eventNotify_Parms"	is declared	in "..\Engine\Classes\AnimNotify_Scripted.uc"
struct UAnimNotify_Scripted_eventNotify_Parms
{
	  class AActor* Owner;
};



// Enum ETeamAffiliationResult is declared in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
enum ETeamAffiliationResult
{
	 TAR_PLAYER_AFFILIATED   =0,
	 TAR_TEAM_ID_MISMATCH    =1,
	 TAR_OLD_JOIN_TIME       =2,
	 TAR_MAX                 =3,
};
// Enum EGameSpyResult is declared in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
enum EGameSpyResult
{
	 GSR_VALID_PROFILE       =0,
	 GSR_USER_CONNECTED      =1,
	 GSR_REGISTERED_UNIQUE_NICK=2,
	 GSR_UNIQUE_NICK_TAKEN   =3,
	 GSR_BAD_EMAIL           =4,
	 GSR_BAD_PASSWORD        =5,
	 GSR_BAD_NICK            =6,
	 GSR_TIMED_OUT           =7,
	 GSR_GENERAL_FAILURE     =8,
	 GSR_MAX                 =9,
};

// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventOnQueryPatchResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventOnQueryPatchResult_Parms
{
	  BITFIELD bNeeded;
	  BITFIELD bMandatory;
	  FString versionName;
	  FString URL;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventQueryPatchCompleted_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventQueryPatchCompleted_Parms
{
	  BITFIELD bNeeded;
	  BITFIELD bMandatory;
	  FString versionName;
	  INT FilePlanetID;
	  FString URL;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetPatchDownloadURL_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetPatchDownloadURL_Parms
{
	  INT FilePlanetID;
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetProductRegionID_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetProductRegionID_Parms
{
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetProductVersionID_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetProductVersionID_Parms
{
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventProfileCheckResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventProfileCheckResult_Parms
{
	  BYTE Result;
	  INT profileId;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventProfileCreateResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventProfileCreateResult_Parms
{
	  BYTE Result;
	  INT profileId;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventEmailAlreadyTaken_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventEmailAlreadyTaken_Parms
{
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetGameSpyPassword_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetGameSpyPassword_Parms
{
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetGameSpyProfileId_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetGameSpyProfileId_Parms
{
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetNumTeams_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetNumTeams_Parms
{
	  INT ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetValueForTeamKey_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetValueForTeamKey_Parms
{
	  INT Key;
	  INT Index;
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetValueForPlayerKey_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetValueForPlayerKey_Parms
{
	  INT Key;
	  INT Index;
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGetValueForKey_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGetValueForKey_Parms
{
	  INT Key;
	  FString ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventUpdateComplete_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventUpdateComplete_Parms
{
	  BITFIELD bLAN;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventUpdatedServerData_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventUpdatedServerData_Parms
{
	  INT ServerID;
	  FString ipAddress;
	  INT Ping;
	  BITFIELD bLAN;
	  TArray<FString> serverData;
	  TArray<FString> playerData;
	  TArray<FString> teamData;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventSetTeamAffiliationResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventSetTeamAffiliationResult_Parms
{
	  BYTE Result;
	  FString teamTag;
	  class APlayerReplicationInfo* PRI;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventHTTPGetRequestResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventHTTPGetRequestResult_Parms
{
	  BITFIELD succeeded;
	  FString ResponseData;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventSetDataPrivateRWResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventSetDataPrivateRWResult_Parms
{
	  INT success;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventFindTeamResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventFindTeamResult_Parms
{
	  INT TeamID;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventAuthenticatedProfileResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventAuthenticatedProfileResult_Parms
{
	  INT profileId;
	  INT authenticated;
	  FString Error;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventUniqueNickRegistrationResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventUniqueNickRegistrationResult_Parms
{
	  BYTE Result;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventUserConnectionResult_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventUserConnectionResult_Parms
{
	  BYTE Result;
	  INT profileId;
	  FString UniqueNick;
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventInitGameSpyData_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventInitGameSpyData_Parms
{
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventOnLevelChange_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventOnLevelChange_Parms
{
};
// "event"	function whose parameters correspond to	"struct UGameSpyManager_eventGameSpyInitialised_Parms"	is declared	in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
struct UGameSpyManager_eventGameSpyInitialised_Parms
{
};

// Enum EOrientationConstraint is declared in "..\Engine\Classes\HavokRigidBody.uc"
enum EOrientationConstraint
{
	 HKOC_Free               =0,
	 HKOC_ConstrainX         =1,
	 HKOC_ConstrainY         =2,
	 HKOC_ConstrainZ         =3,
	 HKOC_ConstrainXYZ       =4,
	 HKOC_MAX                =5,
};
// Constant HavokCollisionLayer_Debris is declared in "..\Engine\Classes\HavokRigidBody.uc"
#define UCONST_HavokCollisionLayer_Debris 7
// Constant HavokCollisionLayer_Keyframed is declared in "..\Engine\Classes\HavokRigidBody.uc"
#define UCONST_HavokCollisionLayer_Keyframed 5
// Constant HavokCollisionLayer_Dynamic is declared in "..\Engine\Classes\HavokRigidBody.uc"
#define UCONST_HavokCollisionLayer_Dynamic 2
// Constant HavokCollisionLayer_Static is declared in "..\Engine\Classes\HavokRigidBody.uc"
#define UCONST_HavokCollisionLayer_Static 1
// Constant HavokCollisionLayer_All is declared in "..\Engine\Classes\HavokRigidBody.uc"
#define UCONST_HavokCollisionLayer_All 0


// Enum EHavokSteerType is declared in "..\Engine\Classes\HavokVehicleWheel.uc"
enum EHavokSteerType
{
	 HK_STEER_Fixed          =0,
	 HK_STEER_Steered        =1,
	 HK_MAX                  =2,
};



// "event"	function whose parameters correspond to	"struct IIEffectObserver_eventOnEffectInitialized_Parms"	is declared	in "..\Engine\Classes\IEffectObserver.uc"
struct IIEffectObserver_OnEffectInitialized_Parms
{
	  class AActor* inInitializedEffect;
};
// "event"	function whose parameters correspond to	"struct IIEffectObserver_eventOnEffectStopped_Parms"	is declared	in "..\Engine\Classes\IEffectObserver.uc"
struct IIEffectObserver_OnEffectStopped_Parms
{
	  class AActor* inStoppedEffect;
	  BITFIELD Completed;
};
// "event"	function whose parameters correspond to	"struct IIEffectObserver_eventOnEffectStarted_Parms"	is declared	in "..\Engine\Classes\IEffectObserver.uc"
struct IIEffectObserver_OnEffectStarted_Parms
{
	  class AActor* inStartedEffect;
};


// "event"	function whose parameters correspond to	"struct IIInterestedActorDestroyed_eventOnOtherActorDestroyed_Parms"	is declared	in "..\Engine\Classes\IInterestedActorDestroyed.uc"
struct IIInterestedActorDestroyed_OnOtherActorDestroyed_Parms
{
	  class AActor* ActorBeingDestroyed;
};

// "event"	function whose parameters correspond to	"struct IIInterestedPawnDied_eventOnOtherPawnDied_Parms"	is declared	in "..\Engine\Classes\IInterestedPawnDied.uc"
struct IIInterestedPawnDied_OnOtherPawnDied_Parms
{
	  class APawn* DeadPawn;
};
// Enum EInputKey is declared in "..\Engine\Classes\Interactions.uc"
enum EInputKey
{
	 IK_None                 =0,
	 IK_LeftMouse            =1,
	 IK_RightMouse           =2,
	 IK_Cancel               =3,
	 IK_MiddleMouse          =4,
	 IK_Unknown05            =5,
	 IK_Unknown06            =6,
	 IK_Unknown07            =7,
	 IK_Backspace            =8,
	 IK_Tab                  =9,
	 IK_Unknown0A            =10,
	 IK_Unknown0B            =11,
	 IK_Unknown0C            =12,
	 IK_Enter                =13,
	 IK_Unknown0E            =14,
	 IK_Unknown0F            =15,
	 IK_Shift                =16,
	 IK_Ctrl                 =17,
	 IK_Alt                  =18,
	 IK_Pause                =19,
	 IK_CapsLock             =20,
	 IK_Unknown15            =21,
	 IK_Unknown16            =22,
	 IK_Unknown17            =23,
	 IK_Unknown18            =24,
	 IK_Unknown19            =25,
	 IK_Unknown1A            =26,
	 IK_Escape               =27,
	 IK_Unknown1C            =28,
	 IK_Unknown1D            =29,
	 IK_Unknown1E            =30,
	 IK_Unknown1F            =31,
	 IK_Space                =32,
	 IK_PageUp               =33,
	 IK_PageDown             =34,
	 IK_End                  =35,
	 IK_Home                 =36,
	 IK_Left                 =37,
	 IK_Up                   =38,
	 IK_Right                =39,
	 IK_Down                 =40,
	 IK_Select               =41,
	 IK_Print                =42,
	 IK_Execute              =43,
	 IK_PrintScrn            =44,
	 IK_Insert               =45,
	 IK_Delete               =46,
	 IK_Help                 =47,
	 IK_0                    =48,
	 IK_1                    =49,
	 IK_2                    =50,
	 IK_3                    =51,
	 IK_4                    =52,
	 IK_5                    =53,
	 IK_6                    =54,
	 IK_7                    =55,
	 IK_8                    =56,
	 IK_9                    =57,
	 IK_Unknown3A            =58,
	 IK_Unknown3B            =59,
	 IK_Unknown3C            =60,
	 IK_Unknown3D            =61,
	 IK_Unknown3E            =62,
	 IK_Unknown3F            =63,
	 IK_Unknown40            =64,
	 IK_A                    =65,
	 IK_B                    =66,
	 IK_C                    =67,
	 IK_D                    =68,
	 IK_E                    =69,
	 IK_F                    =70,
	 IK_G                    =71,
	 IK_H                    =72,
	 IK_I                    =73,
	 IK_J                    =74,
	 IK_K                    =75,
	 IK_L                    =76,
	 IK_M                    =77,
	 IK_N                    =78,
	 IK_O                    =79,
	 IK_P                    =80,
	 IK_Q                    =81,
	 IK_R                    =82,
	 IK_S                    =83,
	 IK_T                    =84,
	 IK_U                    =85,
	 IK_V                    =86,
	 IK_W                    =87,
	 IK_X                    =88,
	 IK_Y                    =89,
	 IK_Z                    =90,
	 IK_Unknown5B            =91,
	 IK_Unknown5C            =92,
	 IK_Unknown5D            =93,
	 IK_Unknown5E            =94,
	 IK_Unknown5F            =95,
	 IK_NumPad0              =96,
	 IK_NumPad1              =97,
	 IK_NumPad2              =98,
	 IK_NumPad3              =99,
	 IK_NumPad4              =100,
	 IK_NumPad5              =101,
	 IK_NumPad6              =102,
	 IK_NumPad7              =103,
	 IK_NumPad8              =104,
	 IK_NumPad9              =105,
	 IK_GreyStar             =106,
	 IK_GreyPlus             =107,
	 IK_Separator            =108,
	 IK_GreyMinus            =109,
	 IK_NumPadPeriod         =110,
	 IK_GreySlash            =111,
	 IK_F1                   =112,
	 IK_F2                   =113,
	 IK_F3                   =114,
	 IK_F4                   =115,
	 IK_F5                   =116,
	 IK_F6                   =117,
	 IK_F7                   =118,
	 IK_F8                   =119,
	 IK_F9                   =120,
	 IK_F10                  =121,
	 IK_F11                  =122,
	 IK_F12                  =123,
	 IK_F13                  =124,
	 IK_F14                  =125,
	 IK_F15                  =126,
	 IK_F16                  =127,
	 IK_F17                  =128,
	 IK_F18                  =129,
	 IK_F19                  =130,
	 IK_F20                  =131,
	 IK_F21                  =132,
	 IK_F22                  =133,
	 IK_F23                  =134,
	 IK_F24                  =135,
	 IK_Unknown88            =136,
	 IK_Unknown89            =137,
	 IK_Unknown8A            =138,
	 IK_Unknown8B            =139,
	 IK_Unknown8C            =140,
	 IK_Unknown8D            =141,
	 IK_Unknown8E            =142,
	 IK_Unknown8F            =143,
	 IK_NumLock              =144,
	 IK_ScrollLock           =145,
	 IK_Unknown92            =146,
	 IK_Unknown93            =147,
	 IK_Unknown94            =148,
	 IK_Unknown95            =149,
	 IK_Unknown96            =150,
	 IK_Unknown97            =151,
	 IK_Unknown98            =152,
	 IK_Unknown99            =153,
	 IK_Unknown9A            =154,
	 IK_Unknown9B            =155,
	 IK_Unknown9C            =156,
	 IK_Unknown9D            =157,
	 IK_Unknown9E            =158,
	 IK_Unknown9F            =159,
	 IK_LShift               =160,
	 IK_RShift               =161,
	 IK_LControl             =162,
	 IK_RControl             =163,
	 IK_UnknownA4            =164,
	 IK_UnknownA5            =165,
	 IK_UnknownA6            =166,
	 IK_UnknownA7            =167,
	 IK_UnknownA8            =168,
	 IK_UnknownA9            =169,
	 IK_UnknownAA            =170,
	 IK_UnknownAB            =171,
	 IK_UnknownAC            =172,
	 IK_UnknownAD            =173,
	 IK_UnknownAE            =174,
	 IK_UnknownAF            =175,
	 IK_UnknownB0            =176,
	 IK_UnknownB1            =177,
	 IK_UnknownB2            =178,
	 IK_UnknownB3            =179,
	 IK_UnknownB4            =180,
	 IK_UnknownB5            =181,
	 IK_UnknownB6            =182,
	 IK_UnknownB7            =183,
	 IK_UnknownB8            =184,
	 IK_Unicode              =185,
	 IK_Semicolon            =186,
	 IK_Equals               =187,
	 IK_Comma                =188,
	 IK_Minus                =189,
	 IK_Period               =190,
	 IK_Slash                =191,
	 IK_Tilde                =192,
	 IK_Mouse4               =193,
	 IK_Mouse5               =194,
	 IK_Mouse6               =195,
	 IK_Mouse7               =196,
	 IK_Mouse8               =197,
	 IK_UnknownC6            =198,
	 IK_UnknownC7            =199,
	 IK_Joy1                 =200,
	 IK_Joy2                 =201,
	 IK_Joy3                 =202,
	 IK_Joy4                 =203,
	 IK_Joy5                 =204,
	 IK_Joy6                 =205,
	 IK_Joy7                 =206,
	 IK_Joy8                 =207,
	 IK_Joy9                 =208,
	 IK_Joy10                =209,
	 IK_Joy11                =210,
	 IK_Joy12                =211,
	 IK_Joy13                =212,
	 IK_Joy14                =213,
	 IK_Joy15                =214,
	 IK_Joy16                =215,
	 IK_UnknownD8            =216,
	 IK_UnknownD9            =217,
	 IK_UnknownDA            =218,
	 IK_LeftBracket          =219,
	 IK_Backslash            =220,
	 IK_RightBracket         =221,
	 IK_SingleQuote          =222,
	 IK_UnknownDF            =223,
	 IK_UnknownE0            =224,
	 IK_UnknownE1            =225,
	 IK_UnknownE2            =226,
	 IK_UnknownE3            =227,
	 IK_MouseX               =228,
	 IK_MouseY               =229,
	 IK_MouseZ               =230,
	 IK_MouseW               =231,
	 IK_JoyU                 =232,
	 IK_JoyV                 =233,
	 IK_JoySlider1           =234,
	 IK_JoySlider2           =235,
	 IK_MouseWheelUp         =236,
	 IK_MouseWheelDown       =237,
	 IK_Unknown10E           =238,
	 UK_Unknown10F           =239,
	 IK_JoyX                 =240,
	 IK_JoyY                 =241,
	 IK_JoyZ                 =242,
	 IK_JoyR                 =243,
	 IK_UnknownF4            =244,
	 IK_UnknownF5            =245,
	 IK_Attn                 =246,
	 IK_CrSel                =247,
	 IK_ExSel                =248,
	 IK_ErEof                =249,
	 IK_Play                 =250,
	 IK_Zoom                 =251,
	 IK_NoName               =252,
	 IK_PA1                  =253,
	 IK_OEMClear             =254,
	 IK_MAX                  =255,
};
// Enum EInputAction is declared in "..\Engine\Classes\Interactions.uc"
enum EInputAction
{
	 IST_None                =0,
	 IST_Press               =1,
	 IST_Hold                =2,
	 IST_Release             =3,
	 IST_Axis                =4,
	 IST_Repeat              =5,
	 IST_MAX                 =6,
};


// "event"	function whose parameters correspond to	"struct UInteraction_eventInitialized_Parms"	is declared	in "..\Engine\Classes\Interaction.uc"
struct UInteraction_eventInitialized_Parms
{
};

// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventIsPageActive_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventIsPageActive_Parms
{
	  FString menuClass;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventOnNetworkBrowse_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventOnNetworkBrowse_Parms
{
	  FString URL;
	  FString ProfileOption;
	  BITFIELD bSelectProfile;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventOnProgress_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventOnProgress_Parms
{
	  FString Str1;
	  FString Str2;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventOnMojoFinished_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventOnMojoFinished_Parms
{
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventInitializeController_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventInitializeController_Parms
{
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventCloseAll_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventCloseAll_Parms
{
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventCloseMenu_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventCloseMenu_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventReplaceMenu_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventReplaceMenu_Parms
{
	  FString NewMenuName;
	  FString MenuNameOverride;
	  FString Param1;
	  FString Param2;
	  INT param3;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventAutoLoadMenuClass_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventAutoLoadMenuClass_Parms
{
	  class UClass* menuClass;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventAutoLoadMenus_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventAutoLoadMenus_Parms
{
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventOpenMenu_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventOpenMenu_Parms
{
	  FString NewMenuName;
	  FString MenuNameOverride;
	  FString Param1;
	  FString Param2;
	  INT param3;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventShouldSuppressLevelRender_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventShouldSuppressLevelRender_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventOnPostPrecache_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventOnPostPrecache_Parms
{
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventPostPrecache_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventPostPrecache_Parms
{
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventPostLevelChange_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventPostLevelChange_Parms
{
	  class ALevelInfo* newLevel;
	  BITFIELD bSaveGame;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventPreLevelChange_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventPreLevelChange_Parms
{
	  FString DestURL;
	  class ULevelSummary* NewSummary;
};
// "event"	function whose parameters correspond to	"struct UBaseGUIController_eventOnAdminReply_Parms"	is declared	in "..\Engine\Classes\BaseGUIController.uc"
struct UBaseGUIController_eventOnAdminReply_Parms
{
	  FString Reply;
};

// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventProcess_Message_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventProcess_Message_Parms
{
	  FString msg;
	  FLOAT MsgLife;
	  TArray<class UInteraction*> InteractionArray;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventProcess_Tick_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventProcess_Tick_Parms
{
	  TArray<class UInteraction*> InteractionArray;
	  FLOAT DeltaTime;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventProcess_PostRender_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventProcess_PostRender_Parms
{
	  TArray<class UInteraction*> InteractionArray;
	  class UCanvas* Canvas;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventProcess_PreRender_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventProcess_PreRender_Parms
{
	  TArray<class UInteraction*> InteractionArray;
	  class UCanvas* Canvas;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventProcess_KeyEvent_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventProcess_KeyEvent_Parms
{
	  TArray<class UInteraction*> InteractionArray;
	  BYTE Key;
	  BYTE Action;
	  FLOAT Delta;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventProcess_KeyType_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventProcess_KeyType_Parms
{
	  TArray<class UInteraction*> InteractionArray;
	  BYTE Key;
	  FString Unicode;
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventSetFocusTo_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventSetFocusTo_Parms
{
	  class UInteraction* Inter;
	  class UPlayer* ViewportOwner;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventRemoveInteraction_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventRemoveInteraction_Parms
{
	  class UInteraction* RemoveMe;
};
// "event"	function whose parameters correspond to	"struct UInteractionMaster_eventAddInteraction_Parms"	is declared	in "..\Engine\Classes\InteractionMaster.uc"
struct UInteractionMaster_eventAddInteraction_Parms
{
	  FString InteractionName;
	  class UPlayer* AttachTo;
	  class UInteraction* ReturnValue;
};





// Enum EAlphaOperation is declared in "..\Engine\Classes\Combiner.uc"
enum EAlphaOperation
{
	 AO_Use_Mask             =0,
	 AO_Multiply             =1,
	 AO_Add                  =2,
	 AO_Use_Alpha_From_Material1=3,
	 AO_Use_Alpha_From_Material2=4,
	 AO_MAX                  =5,
};
// Enum EColorOperation is declared in "..\Engine\Classes\Combiner.uc"
enum EColorOperation
{
	 CO_Use_Color_From_Material1=0,
	 CO_Use_Color_From_Material2=1,
	 CO_Multiply             =2,
	 CO_Add                  =3,
	 CO_Subtract             =4,
	 CO_AlphaBlend_With_Mask =5,
	 CO_Add_With_Mask_Modulation=6,
	 CO_Use_Color_From_Mask  =7,
	 CO_MAX                  =8,
};



// Enum EFrameBufferBlending is declared in "..\Engine\Classes\FinalBlend.uc"
enum EFrameBufferBlending
{
	 FB_Overwrite            =0,
	 FB_Modulate             =1,
	 FB_AlphaBlend           =2,
	 FB_AlphaModulate_MightNotFogCorrectly=3,
	 FB_Translucent          =4,
	 FB_Darken               =5,
	 FB_Brighten             =6,
	 FB_Invisible            =7,
	 FB_ShadowBlend          =8,
	 FB_ShadowBlendOverwrite =9,
	 FB_MAX                  =10,
};

// Enum EMaterialSequenceTriggerActon is declared in "..\Engine\Classes\MaterialSequence.uc"
enum EMaterialSequenceTriggerActon
{
	 MSTA_Ignore             =0,
	 MSTA_Reset              =1,
	 MSTA_Pause              =2,
	 MSTA_Stop               =3,
	 MSTA_MAX                =4,
};
// Enum EMaterialSequenceAction is declared in "..\Engine\Classes\MaterialSequence.uc"
enum EMaterialSequenceAction
{
	 MSA_ShowMaterial        =0,
	 MSA_FadeToMaterial      =1,
	 MSA_MAX                 =2,
};
// Struct FMaterialSequenceItem	is declared	in "..\Engine\Classes\MaterialSequence.uc"
struct ENGINE_API FMaterialSequenceItem
{
    class UMaterial* Material;
    FLOAT Time;
    BYTE Action;
};




// Enum ETexCoordCount is declared in "..\Engine\Classes\TexModifier.uc"
enum ETexCoordCount
{
	 TCN_2DCoords            =0,
	 TCN_3DCoords            =1,
	 TCN_4DCoords            =2,
	 TCN_MAX                 =3,
};
// Enum ETexCoordSrc is declared in "..\Engine\Classes\TexModifier.uc"
enum ETexCoordSrc
{
	 TCS_Stream0             =0,
	 TCS_Stream1             =1,
	 TCS_Stream2             =2,
	 TCS_Stream3             =3,
	 TCS_Stream4             =4,
	 TCS_Stream5             =5,
	 TCS_Stream6             =6,
	 TCS_Stream7             =7,
	 TCS_WorldCoords         =8,
	 TCS_CameraCoords        =9,
	 TCS_WorldEnvMapCoords   =10,
	 TCS_CameraEnvMapCoords  =11,
	 TCS_ProjectorCoords     =12,
	 TCS_NoChange            =13,
	 TCS_MAX                 =14,
};


// Enum ETexEnvMapType is declared in "..\Engine\Classes\TexEnvMap.uc"
enum ETexEnvMapType
{
	 EM_WorldSpace           =0,
	 EM_CameraSpace          =1,
	 EM_MAX                  =2,
};


// Enum ETexOscillationType is declared in "..\Engine\Classes\TexOscillator.uc"
enum ETexOscillationType
{
	 OT_Pan                  =0,
	 OT_Stretch              =1,
	 OT_StretchRepeat        =2,
	 OT_Jitter               =3,
	 OT_MAX                  =4,
};

// Enum ERetriggerAction is declared in "..\Engine\Classes\TexOscillatorTriggered.uc"
enum ERetriggerAction
{
	 RTA_Reverse             =0,
	 RTA_Reset               =1,
	 RTA_Ignore              =2,
	 RTA_Retrigger           =3,
	 RTA_MAX                 =4,
};



// Enum ETexRotationType is declared in "..\Engine\Classes\TexRotator.uc"
enum ETexRotationType
{
	 TR_FixedRotation        =0,
	 TR_ConstantlyRotating   =1,
	 TR_OscillatingRotation  =2,
	 TR_MAX                  =3,
};






// Enum EColorFadeType is declared in "..\Engine\Classes\FadeColor.uc"
enum EColorFadeType
{
	 FC_Linear               =0,
	 FC_Sinusoidal           =1,
	 FC_MAX                  =2,
};



// Enum EOutputBlending is declared in "..\Engine\Classes\Shader.uc"
enum EOutputBlending
{
	 OB_Normal               =0,
	 OB_Masked               =1,
	 OB_Modulate             =2,
	 OB_AlphaTranslucent     =3,
	 OB_Translucent          =4,
	 OB_Invisible            =5,
	 OB_Brighten             =6,
	 OB_Darken               =7,
	 OB_Feathered            =8,
	 OB_MAX                  =9,
};
// Enum EPerPixelSpecularType is declared in "..\Engine\Classes\Shader.uc"
enum EPerPixelSpecularType
{
	 ST_AlgorithmicRV        =0,
	 ST_AlgorithmicNH        =1,
	 ST_MAX                  =2,
};
// Enum EPerPixelSpecular is declared in "..\Engine\Classes\Shader.uc"
enum EPerPixelSpecular
{
	 PP_None                 =0,
	 PP_Low                  =1,
	 PP_Medium               =2,
	 PP_High                 =3,
	 PP_MAX                  =4,
};

// Struct FTerrainMaterialLayer	is declared	in "..\Engine\Classes\TerrainMaterial.uc"
struct ENGINE_API FTerrainMaterialLayer
{
    class UMaterial* Texture;
    class UBitmapMaterial* AlphaWeight;
    FMatrix TextureMatrix;
};



// Enum EAnimCompressMethod is declared in "..\Engine\Classes\MeshObject.uc"
enum EAnimCompressMethod
{
	 ACM_Raw                 =0,
	 ACM_Classic             =1,
	 ACM_Quantized16bit      =2,
	 ACM_MAX                 =3,
};
// Enum EMeshSectionMethod is declared in "..\Engine\Classes\MeshObject.uc"
enum EMeshSectionMethod
{
	 MSM_SmoothOnly          =0,
	 MSM_RigidOnly           =1,
	 MSM_Mixed               =2,
	 MSM_SinglePiece         =3,
	 MSM_ForcedRigid         =4,
	 MSM_MAX                 =5,
};
// Enum EImpLightMode is declared in "..\Engine\Classes\MeshObject.uc"
enum EImpLightMode
{
	 ILM_Unlit               =0,
	 ILM_PseudoShaded        =1,
	 ILM_Uniform             =2,
	 ILM_MAX                 =3,
};
// Enum EImpDrawMode is declared in "..\Engine\Classes\MeshObject.uc"
enum EImpDrawMode
{
	 IDM_Normal              =0,
	 IDM_Fading              =1,
	 IDM_MAX                 =2,
};
// Enum EImpSpaceMode is declared in "..\Engine\Classes\MeshObject.uc"
enum EImpSpaceMode
{
	 ISM_Sprite              =0,
	 ISM_Fixed               =1,
	 ISM_PivotVertical       =2,
	 ISM_PivotHorizontal     =3,
	 ISM_MAX                 =4,
};





// Struct FReceiverInfo	is declared	in "..\Engine\Classes\Messaging\MessageDispatcher.uc"
struct ENGINE_API FReceiverInfo
{
    class AActor* Receiver;
    class UClass* MessageClass;
};


// Enum GroundState is declared in "..\Engine\Classes\Movement\MovementObject.uc"
enum GroundState
{
	 GroundState_Standing    =0,
	 GroundState_Walking     =1,
	 GroundState_Running     =2,
	 GroundState_Sprinting   =3,
	 GroundState_Any         =4,
	 GroundState_MAX         =5,
};

// Enum ESkelLocationUpdate is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum ESkelLocationUpdate
{
	 PTSU_None               =0,
	 PTSU_SpawnOffset        =1,
	 PTSU_Location           =2,
	 PTSU_MAX                =3,
};
// Enum EParticleMeshSpawning is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleMeshSpawning
{
	 PTMS_None               =0,
	 PTMS_Linear             =1,
	 PTMS_Random             =2,
	 PTMS_MAX                =3,
};
// Enum EParticleCollisionSound is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleCollisionSound
{
	 PTSC_None               =0,
	 PTSC_LinearGlobal       =1,
	 PTSC_LinearLocal        =2,
	 PTSC_Random             =3,
	 PTSC_MAX                =4,
};
// Enum EParticleEffectAxis is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleEffectAxis
{
	 PTEA_NegativeX          =0,
	 PTEA_PositiveZ          =1,
	 PTEA_MAX                =2,
};
// Enum EParticleStartLocationShape is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleStartLocationShape
{
	 PTLS_Box                =0,
	 PTLS_Sphere             =1,
	 PTLS_Polar              =2,
	 PTLS_All                =3,
	 PTLS_MAX                =4,
};
// Enum EParticleVelocityDirection is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleVelocityDirection
{
	 PTVD_None               =0,
	 PTVD_StartPositionAndOwner=1,
	 PTVD_OwnerAndStartPosition=2,
	 PTVD_AddRadial          =3,
	 PTVD_MAX                =4,
};
// Enum EParticleRotationSource is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleRotationSource
{
	 PTRS_None               =0,
	 PTRS_Actor              =1,
	 PTRS_Offset             =2,
	 PTRS_Normal             =3,
	 PTRS_MAX                =4,
};
// Enum EParticleCoordinateSystem is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleCoordinateSystem
{
	 PTCS_Independent        =0,
	 PTCS_Relative           =1,
	 PTCS_Absolute           =2,
	 PTCS_MAX                =3,
};
// Enum EParticleDrawStyle is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EParticleDrawStyle
{
	 PTDS_Regular            =0,
	 PTDS_AlphaBlend         =1,
	 PTDS_Modulated          =2,
	 PTDS_Translucent        =3,
	 PTDS_AlphaModulate_MightNotFogCorrectly=4,
	 PTDS_Darken             =5,
	 PTDS_Brighten           =6,
	 PTDS_MAX                =7,
};
// Enum EBlendMode is declared in "..\Engine\Classes\ParticleEmitter.uc"
enum EBlendMode
{
	 BM_MODULATE             =0,
	 BM_MODULATE2X           =1,
	 BM_MODULATE4X           =2,
	 BM_ADD                  =3,
	 BM_ADDSIGNED            =4,
	 BM_ADDSIGNED2X          =5,
	 BM_SUBTRACT             =6,
	 BM_ADDSMOOTH            =7,
	 BM_BLENDDIFFUSEALPHA    =8,
	 BM_BLENDTEXTUREALPHA    =9,
	 BM_BLENDFACTORALPHA     =10,
	 BM_BLENDTEXTUREALPHAPM  =11,
	 BM_BLENDCURRENTALPHA    =12,
	 BM_PREMODULATE          =13,
	 BM_MODULATEALPHA_ADDCOLOR=14,
	 BM_MODULATEINVALPHA_ADDCOLOR=15,
	 BM_MODULATEINVCOLOR_ADDALPHA=16,
	 BM_HACK                 =17,
	 BM_MAX                  =18,
};

// Enum EBeamEndPointType is declared in "..\Engine\Classes\BeamEmitter.uc"
enum EBeamEndPointType
{
	 PTEP_Velocity           =0,
	 PTEP_Distance           =1,
	 PTEP_Offset             =2,
	 PTEP_Actor              =3,
	 PTEP_TraceOffset        =4,
	 PTEP_OffsetAsAbsolute   =5,
	 PTEP_MAX                =6,
};


// Enum EGetPointAxis is declared in "..\Engine\Classes\Effects\RibbonEmitter.uc"
enum EGetPointAxis
{
	 PAXIS_OwnerX            =0,
	 PAXIS_OwnerY            =1,
	 PAXIS_OwnerZ            =2,
	 PAXIS_BoneNormal        =3,
	 PAXIS_StartBoneDirection=4,
	 PAXIS_AxisNormal        =5,
	 PAXIS_MAX               =6,
};
// Struct FRibbonPoint	is declared	in "..\Engine\Classes\Effects\RibbonEmitter.uc"
struct ENGINE_API FRibbonPoint
{
    FVector Location;
    FVector AxisNormal;
    FLOAT Width;
    FVector Velocity;
    FVector InterpolatedLocation;
};



// Enum EParticleDirectionUsage is declared in "..\Engine\Classes\SpriteEmitter.uc"
enum EParticleDirectionUsage
{
	 PTDU_None               =0,
	 PTDU_Up                 =1,
	 PTDU_Right              =2,
	 PTDU_Forward            =3,
	 PTDU_Normal             =4,
	 PTDU_UpAndNormal        =5,
	 PTDU_RightAndNormal     =6,
	 PTDU_Scale              =7,
	 PTDU_MAX                =8,
};



// "event"	function whose parameters correspond to	"struct IPathfindingObstacle_eventcanBePassed_Parms"	is declared	in "..\Engine\Classes\Pathfinding\PathfindingObstacle.uc"
struct IPathfindingObstacle_canBePassed_Parms
{
	  FName teamName;
	  BITFIELD ReturnValue;
};
// Struct FPlayInfoData	is declared	in "..\Engine\Classes\PlayInfo.uc"
struct ENGINE_API FPlayInfoData
{
    class UProperty* ThisProp;
    class UClass* ClassFrom;
    FStringNoInit SettingName;
    FStringNoInit DisplayName;
    FStringNoInit RenderType;
    FStringNoInit Grouping;
    FStringNoInit data;
    FStringNoInit ExtraPriv;
    BYTE SecLevel;
    BYTE Weight;
    BITFIELD bGlobal:1;
    FStringNoInit Value;
};



// "event"	function whose parameters correspond to	"struct UPlayerInput_eventPlayerInput_Parms"	is declared	in "..\Engine\Classes\PlayerInput.uc"
struct UPlayerInput_eventPlayerInput_Parms
{
	  FLOAT DeltaTime;
};



// Enum AI_LOD_Levels is declared in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
enum AI_LOD_Levels
{
	 AILOD_NONE              =0,
	 AILOD_MINIMAL           =1,
	 AILOD_IDLE              =2,
	 AILOD_NORMAL            =3,
	 AILOD_ALWAYS_ON         =4,
	 AILOD_MAX               =5,
};
// Enum ResourceTypes is declared in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
enum ResourceTypes
{
	 RT_DEFAULT              =0,
	 RT_VEHICLE              =1,
	 RT_GUNNER               =2,
	 RT_DRIVER               =3,
	 RT_TURRET               =4,
	 RT_CHARACTER            =5,
	 RT_SQUAD                =6,
	 RT_ARMS                 =7,
	 RT_LEGS                 =8,
	 RT_HEAD                 =9,
	 RT_MAX                  =10,
};

// "event"	function whose parameters correspond to	"struct UTyrion_ResourceBase_eventisActive_Parms"	is declared	in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
struct UTyrion_ResourceBase_eventisActive_Parms
{
	  BITFIELD ReturnValue;
};
// "event"	function whose parameters correspond to	"struct UTyrion_ResourceBase_eventresetGoals_Parms"	is declared	in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
struct UTyrion_ResourceBase_eventresetGoals_Parms
{
};
// "event"	function whose parameters correspond to	"struct UTyrion_ResourceBase_eventdeleteRemovedActions_Parms"	is declared	in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
struct UTyrion_ResourceBase_eventdeleteRemovedActions_Parms
{
};
// "event"	function whose parameters correspond to	"struct UTyrion_ResourceBase_eventInit_Parms"	is declared	in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
struct UTyrion_ResourceBase_eventInit_Parms
{
};
// Enum ESteerType is declared in "..\Engine\Classes\SVehicleWheel.uc"
enum ESteerType
{
	 STEER_Fixed             =0,
	 STEER_Steered           =1,
	 STEER_Inverted          =2,
	 STEER_MAX               =3,
};


// Class	AActor is declared in "..\Engine\Classes\Actor.uc"
class ENGINE_API	AActor	: public UObject
{
public:
    BYTE LightType;
    BYTE LightEffect;
    FLOAT LightBrightness;
    FLOAT LightRadius;
    BYTE LightHue;
    BYTE LightSaturation;
    BYTE LightPeriod;
    BYTE LightPhase;
    BYTE LightCone;
    BITFIELD bDisableEditorCopying:1;
    BITFIELD bCastsVolumetricShadows:1;
    BITFIELD bDisableShadowOptimisation:1;
    BITFIELD bDisableBspVolumetrics:1;
    BITFIELD bVolumetricShadowCast:1;
    BITFIELD bDoNotApproximateBumpmap:1;
    FLOAT BumpmapLODScale;
    BITFIELD bOnlyAffectCurrentZone:1;
    FLOAT MaxTraceDistance;
    BITFIELD bImportantActor:1;
    BITFIELD bGetOverlayMaterialFromBase:1;
    BITFIELD bGetSkinFromBase:1;
    BITFIELD bNeedPostRenderCallback:1;
    BITFIELD bIsMirror:1;
    BITFIELD bIsVehicle:1;
    BITFIELD bUseRootMotionBound:1;
    BITFIELD bNetworkRelevancyVisible:1;
    FStringNoInit SpeechTag;
    FVector forceAccumulator;
    FVector torqueAccumulator;
    BITFIELD bUnifiedPositionChanged:1;
    FVector unifiedPosition;
    BITFIELD bUnifiedVelocityChanged:1;
    FVector unifiedVelocity;
    BYTE Physics;
    BYTE DrawType;
    class UStaticMesh* StaticMesh;
    class AActor* Owner;
    class AActor* Base;
    FActorRenderDataPtr ActorRenderData;
    FLightRenderDataPtr LightRenderData;
    INT RenderRevision;
    BITFIELD UsesSubVisibility:1;
    BYTE StaticFilterState;
    TArrayNoInit<FBatchReference> StaticSectionBatches;
    FName ForcedVisibilityZoneTag;
    BITFIELD bSpecialLit:1;
    BITFIELD bActorShadows:1;
    BITFIELD bCorona:1;
    BITFIELD bLightingVisibility:1;
    BITFIELD bUseDynamicLights:1;
    BITFIELD bLightChanged:1;
    BITFIELD bStatic:1;
    BITFIELD bHidden:1;
    BITFIELD bNoDelete:1;
    BITFIELD bDeleteMe:1;
    BITFIELD bDisableTick:1;
    BITFIELD bDisableTouch:1;
    BITFIELD bDynamicLight:1;
    BITFIELD bTimerLoop:1;
    BITFIELD bOnlyOwnerSee:1;
    BITFIELD bHighDetail:1;
    BITFIELD bSuperHighDetail:1;
    BITFIELD bOnlyDrawIfAttached:1;
    BITFIELD bStasis:1;
    BITFIELD bTrailerAllowRotation:1;
    BITFIELD bTrailerSameRotation:1;
    BITFIELD bTrailerPrePivot:1;
    BITFIELD bWorldGeometry:1;
    BITFIELD bAcceptsProjectors:1;
    BITFIELD bAcceptsShadowProjectors:1;
    BITFIELD bOrientOnSlope:1;
    BITFIELD bOnlyAffectPawns:1;
    BITFIELD bDisableSorting:1;
    BITFIELD bIgnoreEncroachers:1;
    BITFIELD bShowOctreeNodes:1;
    BITFIELD bWasSNFiltered:1;
    BITFIELD bNetTemporary:1;
    BITFIELD bOnlyRelevantToOwner:1;
    BITFIELD bNetDirty:1;
    BITFIELD bAlwaysRelevant:1;
    BITFIELD bReplicateInstigator:1;
    BITFIELD bReplicateMovement:1;
    BITFIELD bSkipActorPropertyReplication:1;
    BITFIELD bUpdateSimulatedPosition:1;
    BITFIELD bTearOff:1;
    BITFIELD bOnlyDirtyReplication:1;
    BITFIELD bReplicateAnimations:1;
    BITFIELD bNetInitialRotation:1;
    BITFIELD bCompressedPosition:1;
    BITFIELD bAlwaysZeroBoneOffset:1;
    BITFIELD bNavigationRelevant:1;
    BITFIELD bOverruleNavigationRelevant:1;
    BYTE RemoteRole;
    BYTE Role;
    INT NetTag;
    FLOAT NetUpdateTime;
    FLOAT NetUpdateFrequency;
    FLOAT NetPriority;
    class APawn* Instigator;
    FName AttachmentBone;
    class ALevelInfo* Level;
    class ULevel* XLevel;
    FLOAT LifeSpan;
    FName MovementObjectClass;
    class UMovementObject* MovementObject;
    TArrayNoInit<class UObject*> OwnerGroups;
    INT LastTick;
    class UClass* exclusiveToGameInfo;
    TArrayNoInit<class UClass*> gameInfoExclusions;
    TArrayNoInit<class UClass*> gameInfoInclusions;
    INT maxDifficulty;
    INT minDifficulty;
    INT maxNumPlayers;
    INT minNumPlayers;
    FPointRegion Region;
    FLOAT TimerRate;
    class UMesh* Mesh;
    FLOAT LastRenderTime;
    FName Tag;
    TArrayNoInit<INT> Leaves;
    FName Event;
    FLOAT TimerCounter;
    class UMeshInstance* MeshInstance;
    FLOAT LODBias;
    FName InitialState;
    FName Group;
    TArrayNoInit<class AActor*> Touching;
    TArrayNoInit<INT> OctreeNodes;
    FBox OctreeBox;
    FVector OctreeBoxCenter;
    FVector OctreeBoxRadii;
    class AActor* Deleted;
    FLOAT LatentFloat;
    TArrayNoInit<BYTE> LatentAnimChannelCount;
    INT CollisionTag;
    INT JoinedTag;
    class APhysicsVolume* PhysicsVolume;
    FVector Location;
    FRotator Rotation;
    FVector Velocity;
    FVector Acceleration;
    FVector CachedLocation;
    FRotator CachedRotation;
    FMatrix CachedLocalToWorld;
    FName AttachTag;
    TArrayNoInit<class AActor*> Attached;
    FVector RelativeLocation;
    FRotator RelativeRotation;
    BITFIELD bHardAttach:1;
    FMatrix HardRelMatrix;
    TArrayNoInit<FProjectorRenderInfoPtr> Projectors;
    TArrayNoInit<FStaticMeshProjectorRenderInfoPtr> StaticMeshProjectors;
    class UMaterial* Texture;
    class UStaticMeshInstance* StaticMeshInstance;
    class UModel* Brush;
    FLOAT DrawScale;
    FVector DrawScale3D;
    FVector PrePivot;
    TArrayNoInit<class UMaterial*> Skins;
    class UMaterial* RepSkin;
    BYTE AmbientGlow;
    BYTE MaxLights;
    class UConvexVolume* AntiPortal;
    FLOAT CullDistance;
    FLOAT ScaleGlow;
    BYTE Style;
    BITFIELD bUnlit:1;
    BITFIELD bShadowCast:1;
    BITFIELD bStaticLighting:1;
    BITFIELD bUseLightingFromBase:1;
    BITFIELD bHurtEntry:1;
    BITFIELD bGameRelevant:1;
    BITFIELD bCollideWhenPlacing:1;
    BITFIELD bTravel:1;
    BITFIELD bMovable:1;
    BITFIELD bDestroyInPainVolume:1;
    BITFIELD bCanBeDamaged:1;
    BITFIELD bShouldBaseAtStartup:1;
    BITFIELD bPendingDelete:1;
    BITFIELD bAnimByOwner:1;
    BITFIELD bOwnerNoSee:1;
    BITFIELD bCanTeleport:1;
    BITFIELD bClientAnim:1;
    BITFIELD bDisturbFluidSurface:1;
    BITFIELD bAlwaysTick:1;
    BYTE SoundOcclusion;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    BITFIELD bCollideActors:1;
    BITFIELD bCollideWorld:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockPlayers:1;
    BITFIELD bProjTarget:1;
    BITFIELD bProjectile:1;
    BITFIELD bSkipEncroachment:1;
    BITFIELD bBlockZeroExtentTraces:1;
    BITFIELD bBlockNonZeroExtentTraces:1;
    BITFIELD bAutoAlignToTerrain:1;
    BITFIELD bUseCylinderCollision:1;
    BITFIELD bBlockKarma:1;
    BITFIELD bBlockHavok:1;
    BITFIELD bEnableHavokBackstep:1;
    BITFIELD bClientHavokPhysics:1;
    BITFIELD bDisableHavokCollisionWhenAttached:1;
    BITFIELD bNetNotify:1;
    BITFIELD bIgnoreOutOfWorld:1;
    BITFIELD bBounce:1;
    BITFIELD bFixedRotationDir:1;
    BITFIELD bRotateToDesired:1;
    BITFIELD bInterpolating:1;
    BITFIELD bJustTeleported:1;
    FLOAT Mass;
    FLOAT Buoyancy;
    FRotator RotationRate;
    FRotator DesiredRotation;
    class AActor* PendingTouch;
    FVector ColLocation;
    FLOAT GravityScale;
    class UHavokObject* HavokData;
    class UClass* havokDataClass;
    FVector havokAngularVelocity;
    FVector havokGameTickForce;
    FVector havokGameTickForcePosition;
    FLOAT havokSkeletalRotationSpeed;
    FAnimRep SimAnim;
    BYTE ForceType;
    FLOAT ForceRadius;
    FLOAT ForceScale;
    BITFIELD bNetInitial:1;
    BITFIELD bNetOwner:1;
    BITFIELD bNetRelevant:1;
    BITFIELD bDemoRecording:1;
    BITFIELD bClientDemoRecording:1;
    BITFIELD bRepClientDemo:1;
    BITFIELD bClientDemoNetFunc:1;
    BITFIELD bDemoOwner:1;
    BITFIELD bNoRepMesh:1;
    BITFIELD bHiddenEd:1;
    BITFIELD bHiddenEdGroup:1;
    BITFIELD bDirectional:1;
    BITFIELD bSelected:1;
    BITFIELD bEdShouldSnap:1;
    BITFIELD bEdSnap:1;
    BITFIELD bTempEditor:1;
    BITFIELD bObsolete:1;
    BITFIELD bPathColliding:1;
    BITFIELD bPathTemp:1;
    BITFIELD bScriptInitialized:1;
    BITFIELD bLockLocation:1;
    class UClass* MessageClass;
    BITFIELD bTriggerEffectEventsBeforeGameStarts:1;
    BITFIELD bNeedLifetimeEffectEvents:1;
    FName Label;
    BITFIELD bReplicateLabel:1;
    FStringNoInit TriggeredBy;
    BITFIELD bSendDestructionNotification:1;
	   DECLARE_FUNCTION(execGetUrlOption);
	   DECLARE_FUNCTION(execUpdateURL);
	   DECLARE_FUNCTION(execcheckSocket);
	   DECLARE_FUNCTION(execgetSocket);
	   DECLARE_FUNCTION(execGetClosestBone);
	   DECLARE_FUNCTION(execAnimStopLooping);
	   DECLARE_FUNCTION(execGetCurrentMaterial);
	   DECLARE_FUNCTION(execMultiply_ColorFloat);
	   DECLARE_FUNCTION(execAdd_ColorColor);
	   DECLARE_FUNCTION(execMultiply_FloatColor);
	   DECLARE_FUNCTION(execSubtract_ColorColor);
	   DECLARE_FUNCTION(execCollidingActors);
	   DECLARE_FUNCTION(execVisibleCollidingActors);
	   DECLARE_FUNCTION(execVisibleActors);
	   DECLARE_FUNCTION(execRadiusActors);
	   DECLARE_FUNCTION(execTraceActors);
	   DECLARE_FUNCTION(execTouchingActors);
	   DECLARE_FUNCTION(execBasedActors);
	   DECLARE_FUNCTION(execChildActors);
	   DECLARE_FUNCTION(execDynamicActors);
	   DECLARE_FUNCTION(execAllActors);
	   DECLARE_FUNCTION(execMoveCacheEntry);
	   DECLARE_FUNCTION(execGetCacheEntry);
	   DECLARE_FUNCTION(execGetNextIntDesc);
	   DECLARE_FUNCTION(execGetNextInt);
	   DECLARE_FUNCTION(execGetURLMap);
	   DECLARE_FUNCTION(execGetNextSkin);
	   DECLARE_FUNCTION(execGetMapName);
	   DECLARE_FUNCTION(execSuggestFallVelocity);
	   DECLARE_FUNCTION(execPlayerCanSeeMe);
	   DECLARE_FUNCTION(execMakeNoise);
	   DECLARE_FUNCTION(execForceFeedbackSupported);
	   DECLARE_FUNCTION(execStopFeedbackEffect);
	   DECLARE_FUNCTION(execPlayFeedbackEffect);
	   DECLARE_FUNCTION(execPlayStream);
	   DECLARE_FUNCTION(execResumeSound);
	   DECLARE_FUNCTION(execPauseSound);
	   DECLARE_FUNCTION(execInterruptSound);
	   DECLARE_FUNCTION(execGetSoundDuration);
	   DECLARE_FUNCTION(execDemoPlaySound);
	   DECLARE_FUNCTION(execPlayOwnedSound);
	   DECLARE_FUNCTION(execPlaySound);
	   DECLARE_FUNCTION(execSetTimer);
	   DECLARE_FUNCTION(execDestroy);
	   DECLARE_FUNCTION(execSpawn);
	   DECLARE_FUNCTION(execFastTrace);
	   DECLARE_FUNCTION(execAITrace);
	   DECLARE_FUNCTION(execTrace);
	   DECLARE_FUNCTION(execStopAllMusic);
	   DECLARE_FUNCTION(execStopMusic);
	   DECLARE_FUNCTION(execPlayMusic);
	   DECLARE_FUNCTION(execUnClock);
	   DECLARE_FUNCTION(execClock);
	   DECLARE_FUNCTION(execHavokReturnSkeletalActorToAnimationSystem);
	   DECLARE_FUNCTION(execHavokCollisionGroupChange);
	   DECLARE_FUNCTION(execHavokSlowSetCollisionEnabled);
	   DECLARE_FUNCTION(execHavokGetState);
	   DECLARE_FUNCTION(execHavokSetGameTickForce);
	   DECLARE_FUNCTION(execHavokGetCenterOfMass);
	   DECLARE_FUNCTION(execHavokSetRotation);
	   DECLARE_FUNCTION(execHavokImpartLinearForceAll);
	   DECLARE_FUNCTION(execHavokSetCOM);
	   DECLARE_FUNCTION(execHavokSetPosition);
	   DECLARE_FUNCTION(execHavokGetPosition);
	   DECLARE_FUNCTION(execHavokSetBlocking);
	   DECLARE_FUNCTION(execHavokActivate);
	   DECLARE_FUNCTION(execHavokImpartCOMImpulse);
	   DECLARE_FUNCTION(execHavokGetLastTracedBone);
	   DECLARE_FUNCTION(execHavokSetAngularDamping);
	   DECLARE_FUNCTION(execHavokSetLinearDamping);
	   DECLARE_FUNCTION(execHavokSetLinearVelocityAll);
	   DECLARE_FUNCTION(execHavokSetAngularVelocity);
	   DECLARE_FUNCTION(execHavokSetLinearVelocity);
	   DECLARE_FUNCTION(execHavokGetAngularVelocity);
	   DECLARE_FUNCTION(execHavokGetLinearVelocity);
	   DECLARE_FUNCTION(execHavokImpartForce);
	   DECLARE_FUNCTION(execHavokImpartImpulse);
	   DECLARE_FUNCTION(execHavokIsActive);
	   DECLARE_FUNCTION(execOnlyAffectPawns);
	   DECLARE_FUNCTION(execSetPhysics);
	   DECLARE_FUNCTION(execFinishInterpolation);
	   DECLARE_FUNCTION(execDebugUnclock);
	   DECLARE_FUNCTION(execDebugClock);
	   DECLARE_FUNCTION(execDrawDebugLine);
	   DECLARE_FUNCTION(execGetRenderBoundingSphere);
	   DECLARE_FUNCTION(execAnimIsInGroup);
	   DECLARE_FUNCTION(execGetAnimParams);
	   DECLARE_FUNCTION(execSetBoneRotation);
	   DECLARE_FUNCTION(execSetBoneLocation);
	   DECLARE_FUNCTION(execSetBoneDirection);
	   DECLARE_FUNCTION(execSetBoneScale);
	   DECLARE_FUNCTION(execLockRootMotion);
	   DECLARE_FUNCTION(execUpdateAttachmentLocations);
	   DECLARE_FUNCTION(execDetachFromBone);
	   DECLARE_FUNCTION(execAttachToBone);
	   DECLARE_FUNCTION(execGetMeshOrigin);
	   DECLARE_FUNCTION(execGetRootRotationDelta);
	   DECLARE_FUNCTION(execGetRootLocationDelta);
	   DECLARE_FUNCTION(execGetRootRotation);
	   DECLARE_FUNCTION(execGetRootLocation);
	   DECLARE_FUNCTION(execGetBoneRotation);
	   DECLARE_FUNCTION(execGetBoneCoords);
	   DECLARE_FUNCTION(execAnimBlendToAlpha);
	   DECLARE_FUNCTION(execAnimBlendParams);
	   DECLARE_FUNCTION(execBoneRefresh);
	   DECLARE_FUNCTION(execLinkMesh);
	   DECLARE_FUNCTION(execLinkSkelAnim);
	   DECLARE_FUNCTION(execGetNotifyChannel);
	   DECLARE_FUNCTION(execEnableChannelNotify);
	   DECLARE_FUNCTION(execGetLIPSincAnimDuration);
	   DECLARE_FUNCTION(execCurrentLIPSincAnim);
	   DECLARE_FUNCTION(execIsPlayingLIPSincAnim);
	   DECLARE_FUNCTION(execHasLIPSincAnim);
	   DECLARE_FUNCTION(execStopLIPSincAnim);
	   DECLARE_FUNCTION(execPlayLIPSincAnim);
	   DECLARE_FUNCTION(execGetAnimLength);
	   DECLARE_FUNCTION(execIsTweening);
	   DECLARE_FUNCTION(execSetAnimFrame);
	   DECLARE_FUNCTION(execFreezeAnimAt);
	   DECLARE_FUNCTION(execStopAnimating);
	   DECLARE_FUNCTION(execHasAnim);
	   DECLARE_FUNCTION(execFinishAnim);
	   DECLARE_FUNCTION(execIsAnimating);
	   DECLARE_FUNCTION(execTweenAnim);
	   DECLARE_FUNCTION(execLoopAnim);
	   DECLARE_FUNCTION(execPlayAnimAdditive);
	   DECLARE_FUNCTION(execPlayAnim);
	   DECLARE_FUNCTION(execGetMeshName);
	   DECLARE_FUNCTION(execSetOwner);
	   DECLARE_FUNCTION(execSetBase);
	   DECLARE_FUNCTION(execAutonomousPhysics);
	   DECLARE_FUNCTION(execMoveSmooth);
	   DECLARE_FUNCTION(execSetRelativeLocation);
	   DECLARE_FUNCTION(execSetRelativeRotation);
	   DECLARE_FUNCTION(execTestMove);
	   DECLARE_FUNCTION(execSetRotation);
	   DECLARE_FUNCTION(execSetLocation);
	   DECLARE_FUNCTION(execMove);
	   DECLARE_FUNCTION(execShallowCopyMaterial);
	   DECLARE_FUNCTION(execGetMaterial);
	   DECLARE_FUNCTION(execSetDrawType);
	   DECLARE_FUNCTION(execSetStaticMesh);
	   DECLARE_FUNCTION(execSetDrawScale3D);
	   DECLARE_FUNCTION(execSetDrawScale);
	   DECLARE_FUNCTION(execSetCollisionSize);
	   DECLARE_FUNCTION(execSetCollision);
	   DECLARE_FUNCTION(execConstruct_ActorNameVectorRotator);
	   DECLARE_FUNCTION(execConstruct_Void);
	   DECLARE_FUNCTION(execAllocate);
	   DECLARE_FUNCTION(execstaticActorLabel);
	   DECLARE_FUNCTION(execactorLabel);
	   DECLARE_FUNCTION(execnearbyControlledPawns);
	   DECLARE_FUNCTION(execIsOverlapping);
	   DECLARE_FUNCTION(execError);
	   DECLARE_FUNCTION(execConsoleCommand);
	   DECLARE_FUNCTION(execAddDebugMessage);
	  void	eventPrecacheSpeech(class USpeechManager* Manager)
	  {
        AActor_eventPrecacheSpeech_Parms Parms;
		   Parms.Manager=Manager;
        ProcessEvent(FindFunctionChecked(ENGINE_PrecacheSpeech),&Parms);
	  }
	  BITFIELD	eventShouldActorsBlockSplash()
	  {
        AActor_eventShouldActorsBlockSplash_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldActorsBlockSplash),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventShouldProjectileHit(class AActor* projInstigator)
	  {
        AActor_eventShouldProjectileHit_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.projInstigator=projInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldProjectileHit),&Parms);
		   return Parms.ReturnValue;
	  }
	  FVector	eventunifiedGetCOMPosition()
	  {
        AActor_eventunifiedGetCOMPosition_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_unifiedGetCOMPosition),&Parms);
		   return Parms.ReturnValue;
	  }
	  FVector	eventunifiedGetNaturalCOMPosition()
	  {
        AActor_eventunifiedGetNaturalCOMPosition_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_unifiedGetNaturalCOMPosition),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventcheckSocket(const FString& Name)
	  {
        AActor_eventcheckSocket_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Name=Name;
        ProcessEvent(FindFunctionChecked(ENGINE_checkSocket),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventgetSocket(const FString& Name, FVector& Position, FRotator& Rotation, FVector& Scale, BYTE coordinates)
	  {
        AActor_eventgetSocket_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Name=Name;
		   Parms.Position=Position;
		   Parms.Rotation=Rotation;
		   Parms.Scale=Scale;
		   Parms.coordinates=coordinates;
        ProcessEvent(FindFunctionChecked(ENGINE_getSocket),&Parms);
		   Position=Parms.Position;
		   Rotation=Parms.Rotation;
		   Scale=Parms.Scale;
		   return Parms.ReturnValue;
	  }
	  void	eventonMessage(class UMessage* msg)
	  {
        AActor_eventonMessage_Parms Parms;
		   Parms.msg=msg;
        ProcessEvent(FindFunctionChecked(ENGINE_onMessage),&Parms);
	  }
	  class UMaterial*	eventGetCurrentMaterial(INT Index)
	  {
        AActor_eventGetCurrentMaterial_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCurrentMaterial),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventUnTriggerEffectEvent(FName EffectEvent, FName ReferenceTag)
	  {
        AActor_eventUnTriggerEffectEvent_Parms Parms;
		   Parms.EffectEvent=EffectEvent;
		   Parms.ReferenceTag=ReferenceTag;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTriggerEffectEvent),&Parms);
	  }
	  BITFIELD	eventTriggerEffectEvent(FName EffectEvent, class AActor* Other, class UMaterial* TargetMaterial, FVector HitLocation, FRotator HitNormal, BITFIELD PlayOnOther, BITFIELD QueryOnly, class IIEffectObserver* Observer, FName ReferenceTag)
	  {
        AActor_eventTriggerEffectEvent_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.EffectEvent=EffectEvent;
		   Parms.Other=Other;
		   Parms.TargetMaterial=TargetMaterial;
		   Parms.HitLocation=HitLocation;
		   Parms.HitNormal=HitNormal;
		   Parms.PlayOnOther=PlayOnOther;
		   Parms.QueryOnly=QueryOnly;
		   Parms.Observer=Observer;
		   Parms.ReferenceTag=ReferenceTag;
        ProcessEvent(FindFunctionChecked(ENGINE_TriggerEffectEvent),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventTriggerEvent(FName EventName, class AActor* Other, class APawn* EventInstigator)
	  {
        AActor_eventTriggerEvent_Parms Parms;
		   Parms.EventName=EventName;
		   Parms.Other=Other;
		   Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_TriggerEvent),&Parms);
	  }
	  void	eventTravelPostAccept()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_TravelPostAccept),NULL);
	  }
	  void	eventTravelPreAccept()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_TravelPreAccept),NULL);
	  }
	  void	eventUpdatePrecacheRenderData()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_UpdatePrecacheRenderData),NULL);
	  }
	  void	eventPostLoadGame()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostLoadGame),NULL);
	  }
	  void	eventPostNetBeginPlay()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostNetBeginPlay),NULL);
	  }
	  void	eventSetInitialState()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
	  }
	  void	eventPostBeginPlay()
	  {
		  if(IsProbing(NAME_PostBeginPlay)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
		  }
	  }
	  void	eventBroadcastLocalizedMessage(class UClass* MessageClass, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
	  {
        AActor_eventBroadcastLocalizedMessage_Parms Parms;
		   Parms.MessageClass=MessageClass;
		   Parms.Switch=Switch;
		   Parms.RelatedPRI_1=RelatedPRI_1;
		   Parms.RelatedPRI_2=RelatedPRI_2;
		   Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalizedMessage),&Parms);
	  }
	  void	eventPreBeginPlay()
	  {
		  if(IsProbing(NAME_PreBeginPlay)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
		  }
	  }
	  void	eventPreScriptedTextureRendered(class UScriptedTexture* Tex)
	  {
        AActor_eventPreScriptedTextureRendered_Parms Parms;
		   Parms.Tex=Tex;
        ProcessEvent(FindFunctionChecked(ENGINE_PreScriptedTextureRendered),&Parms);
	  }
	  void	eventRenderTexture(class UScriptedTexture* Tex)
	  {
        AActor_eventRenderTexture_Parms Parms;
		   Parms.Tex=Tex;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderTexture),&Parms);
	  }
	  void	eventBeginPlay()
	  {
		  if(IsProbing(NAME_BeginPlay)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay),NULL);
		  }
	  }
	  void	eventPostTeleport(class ATeleporter* OutTeleporter)
	  {
        AActor_eventPostTeleport_Parms Parms;
		   Parms.OutTeleporter=OutTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTeleport),&Parms);
	  }
	  BITFIELD	eventPreTeleport(class ATeleporter* InTeleporter)
	  {
        AActor_eventPreTeleport_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.InTeleporter=InTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PreTeleport),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventDemoPlaySound(class USound* Sound, FLOAT Volume, BITFIELD bNoOverride, FLOAT InnerRadius, FLOAT OuterRadius, FLOAT Pitch, INT flags, FLOAT FadeInTime, BITFIELD Attenuate)
	  {
        AActor_eventDemoPlaySound_Parms Parms;
		   Parms.Sound=Sound;
		   Parms.Volume=Volume;
		   Parms.bNoOverride=bNoOverride;
		   Parms.InnerRadius=InnerRadius;
		   Parms.OuterRadius=OuterRadius;
		   Parms.Pitch=Pitch;
		   Parms.flags=flags;
		   Parms.FadeInTime=FadeInTime;
		   Parms.Attenuate=Attenuate;
        ProcessEvent(FindFunctionChecked(ENGINE_DemoPlaySound),&Parms);
	  }
	  void	eventTornOff()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_TornOff),NULL);
	  }
	  void	eventPostTakeDamage(FLOAT Damage, class APawn* EventInstigator, FVector HitLocation, FVector Momentum, class UClass* DamageType, FLOAT projectileFactor)
	  {
        AActor_eventPostTakeDamage_Parms Parms;
		   Parms.Damage=Damage;
		   Parms.EventInstigator=EventInstigator;
		   Parms.HitLocation=HitLocation;
		   Parms.Momentum=Momentum;
		   Parms.DamageType=DamageType;
		   Parms.projectileFactor=projectileFactor;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTakeDamage),&Parms);
	  }
	  void	eventTakeDamage(FLOAT Damage, class APawn* EventInstigator, FVector HitLocation, FVector Momentum, class UClass* DamageType, FLOAT projectileFactor)
	  {
        AActor_eventTakeDamage_Parms Parms;
		   Parms.Damage=Damage;
		   Parms.EventInstigator=EventInstigator;
		   Parms.HitLocation=HitLocation;
		   Parms.Momentum=Momentum;
		   Parms.DamageType=DamageType;
		   Parms.projectileFactor=projectileFactor;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage),&Parms);
	  }
	  void	eventKilledBy(class APawn* EventInstigator)
	  {
        AActor_eventKilledBy_Parms Parms;
		   Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_KilledBy),&Parms);
	  }
	  void	eventProjectileTouch(class AActor* Other, FVector TouchLocation, FVector TouchNormal)
	  {
        AActor_eventProjectileTouch_Parms Parms;
		   Parms.Other=Other;
		   Parms.TouchLocation=TouchLocation;
		   Parms.TouchNormal=TouchNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_ProjectileTouch),&Parms);
	  }
	  void	eventUsedBy(class APawn* User)
	  {
        AActor_eventUsedBy_Parms Parms;
		   Parms.User=User;
        ProcessEvent(FindFunctionChecked(ENGINE_UsedBy),&Parms);
	  }
	  void	eventEndedRotation()
	  {
		  if(IsProbing(NAME_EndedRotation)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_EndedRotation),NULL);
		  }
	  }
	  void	eventFinishedInterpolation()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_FinishedInterpolation),NULL);
	  }
	  void	eventEncroachedBy(class AActor* Other)
	  {
        AActor_eventEncroachedBy_Parms Parms;
		  if(IsProbing(NAME_EncroachedBy)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachedBy),&Parms);
		  }
	  }
	  BITFIELD	eventEncroachingOn(class AActor* Other)
	  {
        AActor_eventEncroachingOn_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_EncroachingOn)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachingOn),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  class AActor*	eventSpecialHandling(class APawn* Other)
	  {
        AActor_eventSpecialHandling_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_SpecialHandling)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialHandling),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  void	eventDetach(class AActor* Other)
	  {
        AActor_eventDetach_Parms Parms;
		  if(IsProbing(NAME_Detach)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Detach),&Parms);
		  }
	  }
	  void	eventAttach(class AActor* Other)
	  {
        AActor_eventAttach_Parms Parms;
		  if(IsProbing(NAME_Attach)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Attach),&Parms);
		  }
	  }
	  void	eventBaseChange()
	  {
		  if(IsProbing(NAME_BaseChange)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_BaseChange),NULL);
		  }
	  }
	  void	eventBump(class AActor* Other)
	  {
        AActor_eventBump_Parms Parms;
		  if(IsProbing(NAME_Bump)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Bump),&Parms);
		  }
	  }
	  void	eventUnTouch(class AActor* Other)
	  {
        AActor_eventUnTouch_Parms Parms;
		  if(IsProbing(NAME_UnTouch)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTouch),&Parms);
		  }
	  }
	  void	eventPostTouch(class AActor* Other)
	  {
        AActor_eventPostTouch_Parms Parms;
		  if(IsProbing(NAME_PostTouch)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTouch),&Parms);
		  }
	  }
	  void	eventTouch(class AActor* Other)
	  {
        AActor_eventTouch_Parms Parms;
		  if(IsProbing(NAME_Touch)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Touch),&Parms);
		  }
	  }
	  void	eventPhysicsVolumeChange(class APhysicsVolume* NewVolume)
	  {
        AActor_eventPhysicsVolumeChange_Parms Parms;
		  if(IsProbing(NAME_PhysicsVolumeChange)) {
		   Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsVolumeChange),&Parms);
		  }
	  }
	  void	eventZoneChange(class AZoneInfo* NewZone)
	  {
        AActor_eventZoneChange_Parms Parms;
		  if(IsProbing(NAME_ZoneChange)) {
		   Parms.NewZone=NewZone;
        ProcessEvent(FindFunctionChecked(ENGINE_ZoneChange),&Parms);
		  }
	  }
	  void	eventLanded(FVector HitNormal)
	  {
        AActor_eventLanded_Parms Parms;
		  if(IsProbing(NAME_Landed)) {
		   Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_Landed),&Parms);
		  }
	  }
	  void	eventFalling()
	  {
		  if(IsProbing(NAME_Falling)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_Falling),NULL);
		  }
	  }
	  void	eventHitWall(FVector HitNormal, class AActor* HitWall)
	  {
        AActor_eventHitWall_Parms Parms;
		  if(IsProbing(NAME_HitWall)) {
		   Parms.HitNormal=HitNormal;
		   Parms.HitWall=HitWall;
        ProcessEvent(FindFunctionChecked(ENGINE_HitWall),&Parms);
		  }
	  }
	  void	eventTimer()
	  {
		  if(IsProbing(NAME_Timer)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_Timer),NULL);
		  }
	  }
	  void	eventEndEvent()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_EndEvent),NULL);
	  }
	  void	eventBeginEvent()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent),NULL);
	  }
	  void	eventUnTrigger(class AActor* Other, class APawn* EventInstigator)
	  {
        AActor_eventUnTrigger_Parms Parms;
		  if(IsProbing(NAME_UnTrigger)) {
		   Parms.Other=Other;
		   Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTrigger),&Parms);
		  }
	  }
	  void	eventTrigger(class AActor* Other, class APawn* EventInstigator)
	  {
        AActor_eventTrigger_Parms Parms;
		  if(IsProbing(NAME_Trigger)) {
		   Parms.Other=Other;
		   Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Trigger),&Parms);
		  }
	  }
	  void	eventPostNetReceive()
	  {
		  if(IsProbing(NAME_PostNetReceive)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostNetReceive),NULL);
		  }
	  }
	  void	eventTick(FLOAT DeltaTime)
	  {
        AActor_eventTick_Parms Parms;
		  if(IsProbing(NAME_Tick)) {
		   Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
		  }
	  }
	  void	eventLostChild(class AActor* Other)
	  {
        AActor_eventLostChild_Parms Parms;
		  if(IsProbing(NAME_LostChild)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_LostChild),&Parms);
		  }
	  }
	  void	eventGainedChild(class AActor* Other)
	  {
        AActor_eventGainedChild_Parms Parms;
		  if(IsProbing(NAME_GainedChild)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GainedChild),&Parms);
		  }
	  }
	  void	eventDestroyed()
	  {
		  if(IsProbing(NAME_Destroyed)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_Destroyed),NULL);
		  }
	  }
	  BITFIELD	eventHavokUpdateState(FHavokRigidBodyState& NewState)
	  {
        AActor_eventHavokUpdateState_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(ENGINE_HavokUpdateState),&Parms);
		   NewState=Parms.NewState;
		   return Parms.ReturnValue;
	  }
	  void	eventAnimEnd(INT Channel)
	  {
        AActor_eventAnimEnd_Parms Parms;
		  if(IsProbing(NAME_AnimEnd)) {
		   Parms.Channel=Channel;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEnd),&Parms);
		  }
	  }
	  void	eventLIPSincAnimEnd()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_LIPSincAnimEnd),NULL);
	  }
	  class UMaterial*	eventGetOverlayMaterial(INT Index)
	  {
        AActor_eventGetOverlayMaterial_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_GetOverlayMaterial),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(AActor,UObject,0|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AActor)
};

// Class	AAntiPortalActor is declared in "..\Engine\Classes\AntiPortalActor.uc"
class ENGINE_API	AAntiPortalActor	: public AActor
{
public:
	   DECLARE_CLASS(AAntiPortalActor,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AAntiPortalActor)
};

// Class	ABrush is declared in "..\Engine\Classes\Brush.uc"
class ENGINE_API	ABrush	: public AActor
{
public:
    BYTE CsgOper;
    class UObject* UnusedLightMesh;
    FVector PostPivot;
    FScale MainScale;
    FScale PostScale;
    FScale TempScale;
    FColor BrushColor;
    INT PolyFlags;
    BITFIELD bColored:1;
    class UMaterial* RenderMaterial;
    FVector RenderMaterialWorldSize;
	   DECLARE_CLASS(ABrush,AActor,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ABrush)
};

// Class	AVolume is declared in "..\Engine\Classes\Volume.uc"
class ENGINE_API	AVolume	: public ABrush
{
public:
    class AActor* AssociatedActor;
    FName AssociatedActorTag;
    INT LocationPriority;
    FStringNoInit LocationName;
    class ADecorationList* DecoList;
    BITFIELD bReverseHavokTriangleWinding:1;
	   DECLARE_FUNCTION(execEncompasses);
	   DECLARE_CLASS(AVolume,ABrush,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AVolume)
};

// Class	ABlockingVolume is declared in "..\Engine\Classes\BlockingVolume.uc"
class ENGINE_API	ABlockingVolume	: public AVolume
{
public:
    BITFIELD bClampFluid:1;
	   DECLARE_CLASS(ABlockingVolume,AVolume,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ABlockingVolume)
};

// Class	APhysicsVolume is declared in "..\Engine\Classes\PhysicsVolume.uc"
class ENGINE_API	APhysicsVolume	: public AVolume
{
public:
    BITFIELD bPainCausing:1;
    FVector ZoneVelocity;
    FVector Gravity;
    FLOAT GroundFriction;
    FLOAT TerminalVelocity;
    FLOAT DamagePerSec;
    class UClass* DamageType;
    INT Priority;
    class USound* EntrySound;
    class USound* ExitSound;
    class UClass* EntryActor;
    class UClass* ExitActor;
    FLOAT FluidFriction;
    FVector ViewFlash;
    FVector ViewFog;
    BITFIELD bDestructive:1;
    BITFIELD bNoInventory:1;
    BITFIELD bMoveProjectiles:1;
    BITFIELD bBounceVelocity:1;
    BITFIELD bNeutralZone:1;
    BITFIELD bWaterVolume:1;
    BITFIELD Active:1;
    class AInfo* PainTimer;
    BITFIELD bDistanceFog:1;
    FColor DistanceFogColor;
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    FLOAT KExtraLinearDamping;
    FLOAT KExtraAngularDamping;
    FLOAT KBuoyancy;
    class APhysicsVolume* NextPhysicsVolume;
	  void	eventPawnLeavingVolume(class APawn* Other)
	  {
        APhysicsVolume_eventPawnLeavingVolume_Parms Parms;
		  if(IsProbing(NAME_PawnLeavingVolume)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnLeavingVolume),&Parms);
		  }
	  }
	  void	eventPawnEnteredVolume(class APawn* Other)
	  {
        APhysicsVolume_eventPawnEnteredVolume_Parms Parms;
		  if(IsProbing(NAME_PawnEnteredVolume)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnEnteredVolume),&Parms);
		  }
	  }
	  void	eventActorLeavingVolume(class AActor* Other)
	  {
        APhysicsVolume_eventActorLeavingVolume_Parms Parms;
		  if(IsProbing(NAME_ActorLeavingVolume)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeavingVolume),&Parms);
		  }
	  }
	  void	eventActorEnteredVolume(class AActor* Other)
	  {
        APhysicsVolume_eventActorEnteredVolume_Parms Parms;
		  if(IsProbing(NAME_ActorEnteredVolume)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEnteredVolume),&Parms);
		  }
	  }
	  void	eventPhysicsChangedFor(class AActor* Other)
	  {
        APhysicsVolume_eventPhysicsChangedFor_Parms Parms;
		  if(IsProbing(NAME_PhysicsChangedFor)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsChangedFor),&Parms);
		  }
	  }
	   DECLARE_CLASS(APhysicsVolume,AVolume,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APhysicsVolume)
};

// Class	ADefaultPhysicsVolume is declared in "..\Engine\Classes\DefaultPhysicsVolume.uc"
class ENGINE_API	ADefaultPhysicsVolume	: public APhysicsVolume
{
public:
	   DECLARE_CLASS(ADefaultPhysicsVolume,APhysicsVolume,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ADefaultPhysicsVolume)
};

// Class	AFluidVolume is declared in "..\Engine\Classes\FluidVolume\FluidVolume.uc"
class ENGINE_API	AFluidVolume	: public APhysicsVolume
{
public:
    class UCubemap* ReflectionMap;
    BYTE Transparency;
    FColor BaseColor;
    FColor TangentColor;
    FColor ReflectionModulator;
    FLOAT SubdivisionSize;
    BYTE EdgePolyBuffer;
    FLOAT WaveHeightScaler;
    FLOAT WaveSpeedScaler;
    class UFluidSurfaceParamaters* SurfaceParamaters;
    class UTexture* NormalMap;
    FLOAT RippleScale;
    BYTE RippleStrength;
    FVector RippleSpeed;
    class UTexture* Texture;
    FLOAT TextureScale;
    FVector TextureSpeed;
	   DECLARE_CLASS(AFluidVolume,APhysicsVolume,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AFluidVolume)
};

// Class	ALadderVolume is declared in "..\Engine\Classes\LadderVolume.uc"
class ENGINE_API	ALadderVolume	: public APhysicsVolume
{
public:
    FName ClimbingAnimation;
    FName TopAnimation;
    FRotator WallDir;
    FVector LookDir;
    FVector ClimbDir;
    class ALadder* LadderList;
    BITFIELD bNoPhysicalLadder:1;
    BITFIELD bAutoPath:1;
    class APawn* PendingClimber;
	   DECLARE_CLASS(ALadderVolume,APhysicsVolume,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ALadderVolume)
};

// Class	AController is declared in "..\Engine\Classes\Controller.uc"
class ENGINE_API	AController	: public AActor
{
public:
    class APawn* Pawn;
    INT PlayerNum;
    FLOAT FovAngle;
    FLOAT Handedness;
    BITFIELD bIsPlayer:1;
    BITFIELD bGodMode:1;
    BITFIELD bUsePlayerHearing:1;
    BYTE bRun;
    BYTE bDuck;
    BYTE bFire;
    BYTE bAltFire;
    BYTE bJetpack;
    BYTE bSki;
    BYTE bJump;
    class AController* nextController;
    TArrayNoInit<FRouteCacheElement> RouteCache;
    BITFIELD RouteComplete:1;
    BYTE lastFindPathResult;
    TArrayNoInit<FTraversalLineCheck> debugTraversalLineChecks;
    class UClass* PlayerReplicationInfoClass;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class UClass* PawnClass;
    class UClass* PreviousPawnClass;
    FLOAT GroundPitchTime;
    FVector ViewX;
    FVector ViewY;
    FVector ViewZ;
    class AActor* StartSpot;
    FVector MonitorStartLoc;
    class APawn* MonitoredPawn;
    FLOAT MonitorMaxDistSq;
    class AActor* LastFailedReach;
    FLOAT FailedReachTime;
    FVector FailedReachLocation;
	   DECLARE_FUNCTION(execInLatentExecution);
	   DECLARE_FUNCTION(execRemoveController);
	   DECLARE_FUNCTION(execAddController);
	   DECLARE_FUNCTION(execDebugTraversalCheck);
	   DECLARE_FUNCTION(execPathDiagnostics);
	   DECLARE_FUNCTION(execDrawPathDebug);
	   DECLARE_FUNCTION(execContinueFindPath);
	   DECLARE_FUNCTION(execFindPath);
	   DECLARE_FUNCTION(execIsFindPathComplete);
	   DECLARE_FUNCTION(execDiscardFindPath);
	   DECLARE_FUNCTION(execGetFindPathResult);
	   DECLARE_FUNCTION(execLineOfSightTo);
	  void	eventNotifyMissedJump()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_NotifyMissedJump),NULL);
	  }
	  void	eventNotifyJumpApex()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_NotifyJumpApex),NULL);
	  }
	  void	eventNotifyHitMover(FVector HitNormal, class AMover* Wall)
	  {
        AController_eventNotifyHitMover_Parms Parms;
		   Parms.HitNormal=HitNormal;
		   Parms.Wall=Wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitMover),&Parms);
	  }
	  BITFIELD	eventNotifyBump(class AActor* Other)
	  {
        AController_eventNotifyBump_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_NotifyBump)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyBump),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventNotifyHitWall(FVector HitNormal, class AActor* Wall)
	  {
        AController_eventNotifyHitWall_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_NotifyHitWall)) {
		   Parms.HitNormal=HitNormal;
		   Parms.Wall=Wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitWall),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventNotifyLanded(FVector HitNormal)
	  {
        AController_eventNotifyLanded_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_NotifyLanded)) {
		   Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyLanded),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventNotifyHeadVolumeChange(class APhysicsVolume* NewVolume)
	  {
        AController_eventNotifyHeadVolumeChange_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_NotifyHeadVolumeChange)) {
		   Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHeadVolumeChange),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventNotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume)
	  {
        AController_eventNotifyPhysicsVolumeChange_Parms Parms;
		   Parms.ReturnValue=0;
		  if(IsProbing(NAME_NotifyPhysicsVolumeChange)) {
		   Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyPhysicsVolumeChange),&Parms);
		  }
		   return Parms.ReturnValue;
	  }
	  void	eventLongFall()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_LongFall),NULL);
	  }
	  void	eventSoakStop(const FString& problem)
	  {
        AController_eventSoakStop_Parms Parms;
		   Parms.problem=problem;
        ProcessEvent(FindFunctionChecked(ENGINE_SoakStop),&Parms);
	  }
	  void	eventHearNoise(FLOAT Loudness, class AActor* NoiseMaker)
	  {
        AController_eventHearNoise_Parms Parms;
		  if(IsProbing(NAME_HearNoise)) {
		   Parms.Loudness=Loudness;
		   Parms.NoiseMaker=NoiseMaker;
        ProcessEvent(FindFunctionChecked(ENGINE_HearNoise),&Parms);
		  }
	  }
	  void	eventAIHearSound(class AActor* Actor, class USound* S, FVector SoundLocation, FVector Parameters, BITFIELD Attenuate)
	  {
        AController_eventAIHearSound_Parms Parms;
		  if(IsProbing(NAME_AIHearSound)) {
		   Parms.Actor=Actor;
		   Parms.S=S;
		   Parms.SoundLocation=SoundLocation;
		   Parms.Parameters=Parameters;
		   Parms.Attenuate=Attenuate;
        ProcessEvent(FindFunctionChecked(ENGINE_AIHearSound),&Parms);
		  }
	  }
	  void	eventMayFall()
	  {
		  if(IsProbing(NAME_MayFall)) {
		   ProcessEvent(FindFunctionChecked(ENGINE_MayFall),NULL);
		  }
	  }
	   DECLARE_CLASS(AController,AActor,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AController)
};

// Class	APlayerController is declared in "..\Engine\Classes\PlayerController.uc"
class ENGINE_API	APlayerController	: public AController
{
public:
    class UPlayer* Player;
    BITFIELD bLookUpStairs:1;
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bCenterView:1;
    BITFIELD bBehindView:1;
    BITFIELD bFrozen:1;
    BITFIELD bPressedJump:1;
    BITFIELD bDoubleJump:1;
    BITFIELD bUpdatePosition:1;
    BITFIELD bIsTyping:1;
    BITFIELD bFixedCamera:1;
    BITFIELD bJumpStatus:1;
    BITFIELD bUpdating:1;
    BITFIELD bNeverSwitchOnPickup:1;
    BITFIELD bZooming:1;
    BITFIELD bAlwaysLevel:1;
    BITFIELD bSetTurnRot:1;
    BITFIELD bCheatFlying:1;
    BITFIELD bFreeCamera:1;
    BITFIELD bZeroRoll:1;
    BITFIELD bCameraPositionLocked:1;
    BITFIELD bViewBot:1;
    BITFIELD UseFixedVisibility:1;
    BITFIELD bBlockCloseCamera:1;
    BITFIELD bValidBehindCamera:1;
    BITFIELD bForcePrecache:1;
    BITFIELD bClientDemo:1;
    BITFIELD bAllActorsRelevant:1;
    BITFIELD bShortConnectTimeOut:1;
    BITFIELD bPendingDestroy:1;
    BITFIELD bNoVoiceMessages:1;
    BITFIELD bNoVoiceTaunts:1;
    BITFIELD bNoAutoTaunts:1;
    BITFIELD bAutoTaunt:1;
    BITFIELD bNoMatureLanguage:1;
    BITFIELD bDynamicNetSpeed:1;
    BYTE AnnouncerLevel;
    BYTE AnnouncerVolume;
    FLOAT AimingHelp;
    FLOAT MaxResponseTime;
    FLOAT WaitDelay;
    FLOAT aBaseX;
    FLOAT aBaseY;
    FLOAT aBaseZ;
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT aUp;
    FLOAT aLookUp;
    BYTE bStrafe;
    BYTE bSnapLevel;
    BYTE bLook;
    BYTE bFreeLook;
    BYTE bTurn180;
    BYTE bTurnToNearest;
    BYTE bXAxis;
    BYTE bYAxis;
    BYTE DoubleClickDir;
    INT ShowFlags;
    INT ExShowFlags;
    INT Misc1;
    INT Misc2;
    INT RendMap;
    FLOAT OrthoZoom;
    class AActor* ViewTarget;
    class AController* RealViewTarget;
    class APlayerController* DemoViewer;
    FLOAT CameraDist;
    FVector OldCameraLoc;
    FRotator OldCameraRot;
    TArrayNoInit<class UCameraEffect*> CameraEffects;
    FLOAT DesiredFOV;
    FLOAT DefaultFOV;
    FLOAT ZoomLevel;
    FVector FixedLocation;
    FRotator FixedRotation;
    FMatrix RenderWorldToCamera;
    FVector FlashScale;
    FVector FlashFog;
    FLOAT ConstantGlowScale;
    FVector ConstantGlowFog;
    BITFIELD bManualFogUpdate:1;
    FColor LastDistanceFogColor;
    FLOAT LastDistanceFogStart;
    FLOAT LastDistanceFogEnd;
    FLOAT CurrentDistanceFogEnd;
    FLOAT TimeSinceLastFogChange;
    INT LastZone;
    FRotator TargetViewRotation;
    FRotator BlendedTargetViewRotation;
    FLOAT TargetEyeHeight;
    FVector TargetWeaponViewOffset;
    class AHUD* myHUD;
    FLOAT LastPlaySound;
    FLOAT LastPlaySpeech;
    FStringNoInit Song;
    BYTE Transition;
    class ASavedMove* SavedMoves;
    class ASavedMove* FreeMoves;
    class ASavedMove* PendingMove;
    FLOAT CurrentTimeStamp;
    FLOAT LastUpdateTime;
    FLOAT ServerTimeStamp;
    FLOAT TimeMargin;
    FLOAT ClientUpdateTime;
    FLOAT MaxTimeMargin;
    INT WeaponUpdate;
    FStringNoInit ProgressMessage[4];
    FColor ProgressColor[4];
    FLOAT ProgressTimeOut;
    FStringNoInit QuickSaveName;
    FStringNoInit QuickSaveString;
    FStringNoInit NoPauseMessage;
    FStringNoInit ViewingFrom;
    FStringNoInit OwnCamera;
    class AGameReplicationInfo* GameReplicationInfo;
    class AVotingReplicationInfoBase* VoteReplicationInfo;
    FStringNoInit StatsUsername;
    FStringNoInit StatsPassword;
    class UClass* LocalMessageClass;
    FLOAT MaxShakeRoll;
    FVector MaxShakeOffset;
    FLOAT ShakeRollRate;
    FVector ShakeOffsetRate;
    FVector ShakeOffset;
    FLOAT ShakeRollTime;
    FVector ShakeOffsetTime;
    FVector CinematicShakeOffset;
    FRotator CinematicShakeRotate;
    class APawn* TurnTarget;
    INT EnemyTurnSpeed;
    INT GroundPitch;
    FRotator TurnRot180;
    FVector OldFloor;
    class UCheatManager* CheatManager;
    class UClass* CheatClass;
    class UPlayerInput* PlayerInput;
    class UClass* InputClass;
    class UAdminBase* AdminManager;
    FVector FailedPathStart;
    class ASecurity* PlayerSecurity;
    FLOAT ForcePrecacheTime;
    FLOAT LoginDelay;
    FLOAT NextLoginTime;
    FLOAT LastPingUpdate;
    FLOAT ExactPing;
    FLOAT OldPing;
    FLOAT SpectateSpeed;
    FLOAT DynamicPingThreshold;
    FLOAT NextSpeedChange;
    INT ClientCap;
    BITFIELD bEnablePickupForceFeedback:1;
    BITFIELD bEnableWeaponForceFeedback:1;
    BITFIELD bEnableDamageForceFeedback:1;
    BITFIELD bEnableGUIForceFeedback:1;
    BITFIELD bForceFeedbackSupported:1;
    FLOAT FOVBias;
	   DECLARE_FUNCTION(execChangeVoiceChatter);
	   DECLARE_FUNCTION(execLeaveVoiceChat);
	   DECLARE_FUNCTION(execSaveGameExists);
	   DECLARE_FUNCTION(execCheckCullDistance);
	   DECLARE_FUNCTION(execClientHearSound);
	   DECLARE_FUNCTION(execServerValidationResponse);
	   DECLARE_FUNCTION(execClientValidate);
	   DECLARE_FUNCTION(execPasteFromClipboard);
	   DECLARE_FUNCTION(execCopyToClipboard);
	   DECLARE_FUNCTION(execGetURLProtocol);
	   DECLARE_FUNCTION(execGetDefaultURL);
	   DECLARE_FUNCTION(execClientTravel);
	   DECLARE_FUNCTION(execSetViewTarget);
	   DECLARE_FUNCTION(execResetKeyboard);
	   DECLARE_FUNCTION(execGetEntryLevel);
	   DECLARE_FUNCTION(execConsoleCommand);
	   DECLARE_FUNCTION(execGetServerNetworkAddress);
	   DECLARE_FUNCTION(execGetPlayerNetworkAddress);
	   DECLARE_FUNCTION(execSetNetSpeed);
	  class APawn*	eventGetTravelPawn()
	  {
        APlayerController_eventGetTravelPawn_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetTravelPawn),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventStartClientDemoRec()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_StartClientDemoRec),NULL);
	  }
	  void	eventServerGetVoiceChatters(class APlayerController* Player)
	  {
        APlayerController_eventServerGetVoiceChatters_Parms Parms;
		   Parms.Player=Player;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerGetVoiceChatters),&Parms);
	  }
	  void	eventServerChangeVoiceChatter(class APlayerController* Player, INT IpAddr, INT Handle, BITFIELD Add)
	  {
        APlayerController_eventServerChangeVoiceChatter_Parms Parms;
		   Parms.Player=Player;
		   Parms.IpAddr=IpAddr;
		   Parms.Handle=Handle;
		   Parms.Add=Add;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerChangeVoiceChatter),&Parms);
	  }
	  void	eventClientCloseMenu(BITFIELD bCloseAll)
	  {
        APlayerController_eventClientCloseMenu_Parms Parms;
		   Parms.bCloseAll=bCloseAll;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientCloseMenu),&Parms);
	  }
	  void	eventClientOpenMenu(const FString& menuClass, const FString& MenuName, BITFIELD bDisconnect, const FString& Msg1, const FString& Msg2, INT Msg3)
	  {
        APlayerController_eventClientOpenMenu_Parms Parms;
		   Parms.menuClass=menuClass;
		   Parms.MenuName=MenuName;
		   Parms.bDisconnect=bDisconnect;
		   Parms.Msg1=Msg1;
		   Parms.Msg2=Msg2;
		   Parms.Msg3=Msg3;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientOpenMenu),&Parms);
	  }
	  void	eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
	  {
        APlayerController_eventPlayerCalcView_Parms Parms;
		   Parms.ViewActor=ViewActor;
		   Parms.CameraLocation=CameraLocation;
		   Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
		   ViewActor=Parms.ViewActor;
		   CameraLocation=Parms.CameraLocation;
		   CameraRotation=Parms.CameraRotation;
	  }
	  void	eventRemoveCameraEffect(class UCameraEffect* ExEffect)
	  {
        APlayerController_eventRemoveCameraEffect_Parms Parms;
		   Parms.ExEffect=ExEffect;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveCameraEffect),&Parms);
	  }
	  void	eventAddCameraEffect(class UCameraEffect* NewEffect, BITFIELD RemoveExisting)
	  {
        APlayerController_eventAddCameraEffect_Parms Parms;
		   Parms.NewEffect=NewEffect;
		   Parms.RemoveExisting=RemoveExisting;
        ProcessEvent(FindFunctionChecked(ENGINE_AddCameraEffect),&Parms);
	  }
	  void	eventPlayerTick(FLOAT DeltaTime)
	  {
        APlayerController_eventPlayerTick_Parms Parms;
		  if(IsProbing(NAME_PlayerTick)) {
		   Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTick),&Parms);
		  }
	  }
	  void	eventSetProgressTime(FLOAT t)
	  {
        APlayerController_eventSetProgressTime_Parms Parms;
		   Parms.t=t;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgressTime),&Parms);
	  }
	  void	eventSetProgressMessage(INT Index, const FString& S, FColor C)
	  {
        APlayerController_eventSetProgressMessage_Parms Parms;
		   Parms.Index=Index;
		   Parms.S=S;
		   Parms.C=C;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgressMessage),&Parms);
	  }
	  void	eventProgressCommand(const FString& Cmd, const FString& Msg1, const FString& Msg2, INT Seconds)
	  {
        APlayerController_eventProgressCommand_Parms Parms;
		   Parms.Cmd=Cmd;
		   Parms.Msg1=Msg1;
		   Parms.Msg2=Msg2;
		   Parms.Seconds=Seconds;
        ProcessEvent(FindFunctionChecked(ENGINE_ProgressCommand),&Parms);
	  }
	  void	eventPreClientTravel()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel),NULL);
	  }
	  void	eventOnFinishedPrecaching()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_OnFinishedPrecaching),NULL);
	  }
	  void	eventTeamMessage(class APlayerReplicationInfo* PRI, const FString& S, FName Type)
	  {
        APlayerController_eventTeamMessage_Parms Parms;
		   Parms.PRI=PRI;
		   Parms.S=S;
		   Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_TeamMessage),&Parms);
	  }
	  void	eventClientMessage(const FString& S, FName Type)
	  {
        APlayerController_eventClientMessage_Parms Parms;
		   Parms.S=S;
		   Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
	  }
	  void	eventReceiveLocalizedMessage(class UClass* Message, INT Switch, class UObject* Related1, class UObject* Related2, class UObject* OptionalObject, const FString& OptionalString)
	  {
        APlayerController_eventReceiveLocalizedMessage_Parms Parms;
		   Parms.Message=Message;
		   Parms.Switch=Switch;
		   Parms.Related1=Related1;
		   Parms.Related2=Related2;
		   Parms.OptionalObject=OptionalObject;
		   Parms.OptionalString=OptionalString;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveLocalizedMessage),&Parms);
	  }
	  void	eventInitInputSystem()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_InitInputSystem),NULL);
	  }
	  void	eventClientSetViewTarget(class AActor* A)
	  {
        APlayerController_eventClientSetViewTarget_Parms Parms;
		   Parms.A=A;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientSetViewTarget),&Parms);
	  }
	  void	eventShowSubtitle(const FString& Subtitle, FLOAT lifetime)
	  {
        APlayerController_eventShowSubtitle_Parms Parms;
		   Parms.Subtitle=Subtitle;
		   Parms.lifetime=lifetime;
        ProcessEvent(FindFunctionChecked(ENGINE_ShowSubtitle),&Parms);
	  }
	  void	eventGameSaved()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_GameSaved),NULL);
	  }
	  INT	eventClientHearSound(class AActor* Actor, class USound* S, FVector SoundLocation, FVector Parameters, FLOAT InnerRadius, INT flags, FLOAT FadeInTime, BITFIELD Attenuate)
	  {
        APlayerController_eventClientHearSound_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Actor=Actor;
		   Parms.S=S;
		   Parms.SoundLocation=SoundLocation;
		   Parms.Parameters=Parameters;
		   Parms.InnerRadius=InnerRadius;
		   Parms.flags=flags;
		   Parms.FadeInTime=FadeInTime;
		   Parms.Attenuate=Attenuate;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientHearSound),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventServerValidationResponse(const FString& R)
	  {
        APlayerController_eventServerValidationResponse_Parms Parms;
		   Parms.R=R;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerValidationResponse),&Parms);
	  }
	  void	eventClientValidate(const FString& C)
	  {
        APlayerController_eventClientValidate_Parms Parms;
		   Parms.C=C;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientValidate),&Parms);
	  }
	  void	eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
	  {
        APlayerController_eventClientTravel_Parms Parms;
		   Parms.URL=URL;
		   Parms.TravelType=TravelType;
		   Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
	  }
	   DECLARE_CLASS(APlayerController,AController,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APlayerController)
};

// Class	ACamera is declared in "..\Engine\Classes\Camera.uc"
class ENGINE_API	ACamera	: public APlayerController
{
public:
	   DECLARE_CLASS(ACamera,APlayerController,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ACamera)
};

// Class	ADamageType is declared in "..\Engine\Classes\DamageType.uc"
class ENGINE_API	ADamageType	: public AActor
{
public:
    FStringNoInit DeathString;
    FStringNoInit FemaleSuicide;
    FStringNoInit MaleSuicide;
    FLOAT ViewFlash;
    FVector ViewFog;
    class UClass* DamageEffect;
    FStringNoInit DamageWeaponName;
    BITFIELD bArmorStops:1;
    BITFIELD bInstantHit:1;
    BITFIELD bFastInstantHit:1;
    BITFIELD bAlwaysGibs:1;
    BITFIELD bNoSpecificLocation:1;
    BITFIELD bSkeletize:1;
    BITFIELD bCausesBlood:1;
    BITFIELD bKUseOwnDeathVel:1;
    FLOAT GibModifier;
    class UClass* PawnDamageEffect;
    class UClass* PawnDamageEmitter;
    TArrayNoInit<class USound*> PawnDamageSounds;
    class UClass* LowGoreDamageEffect;
    class UClass* LowGoreDamageEmitter;
    TArrayNoInit<class USound*> LowGoreDamageSounds;
    class UClass* LowDetailEffect;
    class UClass* LowDetailEmitter;
    FLOAT FlashScale;
    FVector FlashFog;
    INT DamageDesc;
    INT DamageThreshold;
    FVector DamageKick;
    FLOAT KDamageImpulse;
    FLOAT KDeathVel;
    FLOAT KDeathUpKick;
    FLOAT hkHitImpulseScale;
    class UMaterial* deathMessageIconMaterial;
    FMatCoords deathMessageIconCoords;
	   DECLARE_CLASS(ADamageType,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ADamageType)
};

// Class	ADecoVolumeObject is declared in "..\Engine\Classes\DecoVolumeObject.uc"
class ENGINE_API	ADecoVolumeObject	: public AActor
{
public:
	   DECLARE_CLASS(ADecoVolumeObject,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ADecoVolumeObject)
};

// Class	ADecoration is declared in "..\Engine\Classes\Decoration.uc"
class ENGINE_API	ADecoration	: public AActor
{
public:
    class UClass* EffectWhenDestroyed;
    BITFIELD bPushable:1;
    BITFIELD bDamageable:1;
    BITFIELD bPushSoundPlaying:1;
    BITFIELD bSplash:1;
    class USound* PushSound;
    class USound* EndPushSound;
    INT numLandings;
    INT NumFrags;
    class UTexture* FragSkin;
    class UClass* FragType;
    FVector FragMomentum;
    INT Health;
    FLOAT SplashTime;
	   DECLARE_CLASS(ADecoration,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ADecoration)
};

// Class	AEmitter is declared in "..\Engine\Classes\Emitter.uc"
class ENGINE_API	AEmitter	: public AActor
{
public:
    TArrayNoInit<class UParticleEmitter*> Emitters;
    BITFIELD AutoDestroy:1;
    BITFIELD AutoReset:1;
    BITFIELD DisableFogging:1;
    BITFIELD RotationAndVelocityFromOwner:1;
    FRangeVector GlobalOffsetRange;
    FRange TimeTillResetRange;
    INT Initialized;
    FBox BoundingBox;
    FLOAT EmitterRadius;
    FLOAT EmitterHeight;
    BITFIELD ActorForcesEnabled:1;
    FVector GlobalOffset;
    FLOAT TimeTillReset;
    BITFIELD UseParticleProjectors:1;
    class UParticleMaterial* ParticleMaterial;
    BITFIELD DeleteParticleEmitters:1;
    BITFIELD bPlaying:1;
    BITFIELD bStoppedOverTime:1;
	   DECLARE_FUNCTION(execKill);
	  void	eventPreAutoDestroyed()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PreAutoDestroyed),NULL);
	  }
	  void	eventStopEmitters(BITFIELD bStopOverTime)
	  {
        AEmitter_eventStopEmitters_Parms Parms;
		   Parms.bStopOverTime=bStopOverTime;
        ProcessEvent(FindFunctionChecked(ENGINE_StopEmitters),&Parms);
	  }
	  void	eventPlayEmitters()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PlayEmitters),NULL);
	  }
	   DECLARE_CLASS(AEmitter,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AEmitter)
};

// Class	AFluidSurfaceOscillator is declared in "..\Engine\Classes\FluidSurfaceOscillator.uc"
class ENGINE_API	AFluidSurfaceOscillator	: public AActor
{
public:
    class AFluidSurfaceInfo* FluidInfo;
    FLOAT Frequency;
    BYTE Phase;
    FLOAT Strength;
    FLOAT Radius;
    FLOAT OscTime;
	   DECLARE_CLASS(AFluidSurfaceOscillator,AActor,0,Engine)
	void UpdateOscillation( FLOAT DeltaTime );
	virtual void PostEditChange();
	virtual void Destroy();
};

// Class	AGenericExternalCamera is declared in "..\Engine\Classes\ExternalCameras\GenericExternalCamera.uc"
class ENGINE_API	AGenericExternalCamera	: public AActor
{
public:
    class UScriptedTexture* CameraTexture;
    INT ResolutionX;
    INT ResolutionY;
    INT OptimizedRadius;
    INT UpdateRate;
    INT FOV;
    BYTE OptimizeFor;
    BITFIELD bTimerHasElapsed:1;
	   DECLARE_CLASS(AGenericExternalCamera,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AGenericExternalCamera)
};

// Class	AMirrorCamera is declared in "..\Engine\Classes\ExternalCameras\MirrorCamera.uc"
class ENGINE_API	AMirrorCamera	: public AGenericExternalCamera
{
public:
    FLOAT MirrorOffset;
    class UShader* ReferenceShader;
    class UScriptedTexture* MirrorTexture;
    class UTexScaler* MirrorScaler;
    class UMaterial* MirrorMaterial;
	   DECLARE_FUNCTION(execCreateNewScriptedTexture);
	   DECLARE_FUNCTION(execInitialize);
	   DECLARE_CLASS(AMirrorCamera,AGenericExternalCamera,0,Engine)
    UScriptedTexture* CreateScriptedTexture( const TCHAR* BaseName );
};

// Class	AHUD is declared in "..\Engine\Classes\HUD.uc"
class ENGINE_API	AHUD	: public AActor
{
public:
    class UFont* SmallFont;
    class UFont* MedFont;
    class UFont* BigFont;
    class UFont* LargeFont;
    FStringNoInit HUDConfigWindowType;
    class AHUD* nextHUD;
    class APlayerController* PlayerOwner;
    FStringNoInit ProgressFontName;
    class UFont* ProgressFontFont;
    FLOAT ProgressFadeTime;
    FColor MOTDColor;
    class AScoreBoard* ScoreBoard;
    BITFIELD bHideHUD:1;
    BITFIELD bShowScores:1;
    BITFIELD bShowDebugInfo:1;
    BITFIELD bHideCenterMessages:1;
    BITFIELD bBadConnectionAlert:1;
    BITFIELD bMessageBeep:1;
    FLOAT HudCanvasScale;
    FStringNoInit LoadingMessage;
    FStringNoInit SavingMessage;
    FStringNoInit ConnectingMessage;
    FStringNoInit PausedMessage;
    FStringNoInit PrecachingMessage;
    FColor ConsoleColor;
    INT ConsoleMessageCount;
    INT ConsoleFontSize;
    INT MessageFontOffset;
    FConsoleMessage TextMessages[8];
    FLOAT ConsoleMessagePosX;
    FLOAT ConsoleMessagePosY;
    FStringNoInit FontArrayNames[9];
    class UFont* FontArrayFonts[9];
    INT FontScreenWidthMedium[9];
    INT FontScreenWidthSmall[9];
	   DECLARE_FUNCTION(execDraw3DCone);
	   DECLARE_FUNCTION(execDraw3DCylinder);
	   DECLARE_FUNCTION(execDraw3DCircle);
	   DECLARE_FUNCTION(execDraw3DLine);
	  void	eventPostRender(class UCanvas* Canvas)
	  {
        AHUD_eventPostRender_Parms Parms;
		   Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
	  }
	  void	eventConnectFailure(const FString& FailCode, const FString& URL)
	  {
        AHUD_eventConnectFailure_Parms Parms;
		   Parms.FailCode=FailCode;
		   Parms.URL=URL;
        ProcessEvent(FindFunctionChecked(ENGINE_ConnectFailure),&Parms);
	  }
	  void	eventWorldSpaceOverlays()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_WorldSpaceOverlays),NULL);
	  }
	   DECLARE_CLASS(AHUD,AActor,0|CLASS_Transient|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AHUD)
};

// Class	AHavokActor is declared in "..\Engine\Classes\HavokActor.uc"
class ENGINE_API	AHavokActor	: public AActor
{
public:
    BITFIELD bAcceptsShotImpulse:1;
	   DECLARE_CLASS(AHavokActor,AActor,0,Engine)
#ifdef UNREAL_HAVOK
	virtual void Spawned();
#endif
};

// Class	AHavokConstraint is declared in "..\Engine\Classes\HavokConstraint.uc"
class ENGINE_API	AHavokConstraint	: public AHavokActor
{
public:
    INT hkConstraintPtr;
    BITFIELD hkInitCalled:1;
    class AActor* hkAttachedActorA;
    FName hkAttachedSubPartA;
    class AActor* hkAttachedActorB;
    FName hkAttachedSubPartB;
    BITFIELD bDisableCollisions:1;
    FLOAT fMaxForceToBreak;
    FLOAT fSpecificStrength;
    FLOAT fSpecificDamping;
    BYTE AutoComputeLocals;
    FVector LocalPosA;
    FVector LocalAxisA;
    FVector LocalPerpAxisA;
    FVector LocalPosB;
    FVector LocalAxisB;
    FVector LocalPerpAxisB;
	   DECLARE_FUNCTION(execComputeLocalValues);
	   DECLARE_FUNCTION(execActivateAttachedBodies);
	   DECLARE_FUNCTION(execUpdateConstraintDetails);
	   DECLARE_FUNCTION(execRecreateConstraint);
	   DECLARE_CLASS(AHavokConstraint,AHavokActor,0,Engine)
#ifdef UNREAL_HAVOK
  
	virtual bool HavokInitActor();
	virtual void HavokQuitActor();
	virtual void HavokScriptMoveUpdate(FLOAT dt);

	virtual void Spawned(); // override the default (rigidbody) one in HavokActor

	virtual void PostEditChange(); // this wil auto recreate the constraint if not in Editor
	virtual void PostEditMove();

	virtual void RecreateConstraint(); // call this if you change of the constraint data and the attached body names and change tto/from 0 for damping and strength values (requires extra constraint layer to be changed)
    virtual void UpdateConstraintDetails(); // call this if you just change of the updateable constraint data (limits, positions etc, not the attached bodies though)
	virtual void ActivateAttachedBodies(); // called automatically when you update the constraint, but you can use it anytime.
	virtual void AutoComputeLocalValues(); // compute the Local Axis based on some set other axis (either from the other Actor or from this constraint actor itself). Called automatically on create and update.
	
	virtual void PrivateSetupExtraData(); // internal call
	virtual void PrivateUpdateExtraData(); // internal call
	virtual void* GetRigidBodyPtrA(); // internal call
	virtual void* GetRigidBodyPtrB(); // internal call
	virtual void* GetBaseConstraint(); // internal call

	virtual void CheckForErrors(); // used for checking that this constraint is valid during map build
	virtual void RenderEditorSelected(FLevelSceneNode* SceneNode,FRenderInterface* RI, FDynamicActor* FDA);
	virtual UBOOL CheckOwnerUpdated();

#endif
};

// Class	AHavok6DOFConstraint is declared in "..\Engine\Classes\Havok6DOFConstraint.uc"
class ENGINE_API	AHavok6DOFConstraint	: public AHavokConstraint
{
public:
    BITFIELD bConstrainAngular:1;
    BITFIELD bConstrainLinear:1;
    INT pivotAIndex;
    INT pivotBIndex;
    INT basisAIndex;
    INT basisBIndex;
	   DECLARE_CLASS(AHavok6DOFConstraint,AHavokConstraint,0,Engine)
#ifdef UNREAL_HAVOK
	virtual bool HavokInitActor();
	virtual void UpdateConstraintDetails();
#endif
};

// Class	AHavokBSConstraint is declared in "..\Engine\Classes\HavokBSConstraint.uc"
class ENGINE_API	AHavokBSConstraint	: public AHavokConstraint
{
public:
	   DECLARE_CLASS(AHavokBSConstraint,AHavokConstraint,0,Engine)
#ifdef UNREAL_HAVOK
	virtual bool HavokInitActor();
	virtual void UpdateConstraintDetails();
#endif
};

// Class	AHavokConeLimitConstraint is declared in "..\Engine\Classes\HavokConeLimitConstraint.uc"
class ENGINE_API	AHavokConeLimitConstraint	: public AHavokConstraint
{
public:
    FLOAT hkHalfAngle;
    INT basisAIndex;
    INT basisBIndex;
    INT coneIndex;
	   DECLARE_CLASS(AHavokConeLimitConstraint,AHavokConstraint,0,Engine)
#ifdef UNREAL_HAVOK
	virtual bool HavokInitActor();
	virtual void UpdateConstraintDetails();
#endif
};

// Class	AHavokHingeConstraint is declared in "..\Engine\Classes\HavokHingeConstraint.uc"
class ENGINE_API	AHavokHingeConstraint	: public AHavokConstraint
{
public:
    BYTE hkHingeType;
    BYTE hkHingeMotorType;
    BITFIELD hkMotorActive:1;
    FLOAT hkDesiredAngVel;
    FLOAT hkMaxForce;
    FLOAT hkMotorDamping;
    FLOAT hkDesiredAngleA;
    FLOAT hkDesiredAngleB;
    BITFIELD hkUseDesiredAngleB:1;
    FLOAT hkCurrentAngle;
	   DECLARE_CLASS(AHavokHingeConstraint,AHavokConstraint,0,Engine)
#ifdef UNREAL_HAVOK
	virtual bool HavokInitActor();
	virtual void UpdateConstraintDetails();
#endif
};

// Class	AHavokPrismaticConstraint is declared in "..\Engine\Classes\HavokPrismaticConstraint.uc"
class ENGINE_API	AHavokPrismaticConstraint	: public AHavokConstraint
{
public:
	   DECLARE_CLASS(AHavokPrismaticConstraint,AHavokConstraint,0,Engine)
#ifdef UNREAL_HAVOK
	virtual bool HavokInitActor();
	virtual void UpdateConstraintDetails();
#endif
};

// Class	AHavokWeakOrientationConstraint is declared in "..\Engine\Classes\HavokWeakOrientationConstraint.uc"
class ENGINE_API	AHavokWeakOrientationConstraint	: public AHavokConstraint
{
public:
	   DECLARE_CLASS(AHavokWeakOrientationConstraint,AHavokConstraint,0,Engine)
#ifdef UNREAL_HAVOK
	virtual bool HavokInitActor();
	virtual void HavokQuitActor(); // removes the Action, not constraint
	virtual void UpdateConstraintDetails();
	virtual void* GetBaseConstraint(); // returns the Action, not constraint
#endif
};

// Class	AInfo is declared in "..\Engine\Classes\Info.uc"
class ENGINE_API	AInfo	: public AActor
{
public:
	  BITFIELD	eventAcceptPlayInfoProperty(const FString& PropertyName)
	  {
        AInfo_eventAcceptPlayInfoProperty_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.PropertyName=PropertyName;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptPlayInfoProperty),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(AInfo,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AInfo)
};

// Class	AFileLog is declared in "..\Engine\Classes\FileLog.uc"
class ENGINE_API	AFileLog	: public AInfo
{
public:
    INT LogAr;
    FStringNoInit LogFileName;
	   DECLARE_FUNCTION(execLogf);
	   DECLARE_FUNCTION(execCloseLog);
	   DECLARE_FUNCTION(execOpenLog);
	   DECLARE_CLASS(AFileLog,AInfo,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AFileLog)
};

// Class	AGameInfo is declared in "..\Engine\Classes\GameInfo.uc"
class ENGINE_API	AGameInfo	: public AInfo
{
public:
    BITFIELD bRestartLevel:1;
    BITFIELD bPauseable:1;
    BITFIELD bWeaponStay:1;
    BITFIELD bCanChangeSkin:1;
    BITFIELD bTeamGame:1;
    BITFIELD bGameEnded:1;
    BITFIELD bOverTime:1;
    BITFIELD bAlternateMode:1;
    BITFIELD bCanViewOthers:1;
    BITFIELD bDelayedStart:1;
    BITFIELD bWaitingToStartMatch:1;
    BITFIELD bChangeLevels:1;
    BITFIELD bAlreadyChanged:1;
    BITFIELD bLoggingGame:1;
    BITFIELD bEnableStatLogging:1;
    BITFIELD bAllowWeaponThrowing:1;
    BITFIELD bAllowBehindView:1;
    BITFIELD bAdminCanPause:1;
    BITFIELD bGameRestarted:1;
    BITFIELD bKeepSamePlayerStart:1;
    FLOAT GameDifficulty;
    INT GoreLevel;
    FLOAT AutoAim;
    FLOAT GameSpeed;
    FLOAT StartTime;
    FStringNoInit DefaultPlayerClassName;
    FStringNoInit ScoreBoardType;
    FStringNoInit BotMenuType;
    FStringNoInit RulesMenuType;
    FStringNoInit SettingsMenuType;
    FStringNoInit GameUMenuType;
    FStringNoInit MultiplayerUMenuType;
    FStringNoInit GameOptionsMenuType;
    FStringNoInit HUDType;
    FStringNoInit MapListType;
    FStringNoInit MapPrefix;
    FStringNoInit BeaconName;
    INT MaxSpectators;
    INT NumSpectators;
    INT MaxPlayers;
    INT NumPlayers;
    INT NumBots;
    INT CurrentID;
    FStringNoInit DefaultPlayerName;
    FStringNoInit GameName;
    FStringNoInit GameDescription;
    FLOAT FearCostFallOff;
    INT GoalScore;
    INT MaxLives;
    INT TimeLimit;
    class UClass* DeathMessageClass;
    class UClass* GameMessageClass;
    FName OtherMesgGroup;
    FStringNoInit MutatorClass;
    class AMutator* BaseMutator;
    FStringNoInit AccessControlClass;
    class AAccessControl* AccessControl;
    class AGameRules* GameRulesModifiers;
    FStringNoInit BroadcastHandlerClass;
    class ABroadcastHandler* BroadcastHandler;
    class UClass* PlayerControllerClass;
    FStringNoInit PlayerControllerClassName;
    class UClass* GameReplicationInfoClass;
    class AGameReplicationInfo* GameReplicationInfo;
    BITFIELD bWelcomePending:1;
    class AGameStats* GameStats;
    FStringNoInit GameStatsClass;
    TArrayNoInit<FVoiceChatterInfo> VoiceChatters;
    FStringNoInit SecurityClass;
    FStringNoInit ScreenShotName;
    FStringNoInit DecoTextName;
    FStringNoInit Acronym;
    FStringNoInit GIPropsDisplayText[11];
    FStringNoInit GIPropsExtras[2];
    INT difficulty;
    FStringNoInit VotingHandlerType;
    class UClass* VotingHandlerClass;
    class AVotingHandler* VotingHandler;
    BITFIELD bMapRotationTraveling:1;
    class AVolume* BoundaryVolume;
	   DECLARE_FUNCTION(execParseKillMessage);
	   DECLARE_FUNCTION(execGetNetworkNumber);
	   DECLARE_FUNCTION(execLoadMapList);
	  FString	eventGetRestartMap()
	  {
        AGameInfo_eventGetRestartMap_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetRestartMap),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventSaveAllowed()
	  {
        AGameInfo_eventSaveAllowed_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SaveAllowed),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventOnServerTravelSuccess(const FString& URL)
	  {
        AGameInfo_eventOnServerTravelSuccess_Parms Parms;
		   Parms.URL=URL;
        ProcessEvent(FindFunctionChecked(ENGINE_OnServerTravelSuccess),&Parms);
	  }
	  void	eventOnServerTravelFail(const FString& URL)
	  {
        AGameInfo_eventOnServerTravelFail_Parms Parms;
		   Parms.URL=URL;
        ProcessEvent(FindFunctionChecked(ENGINE_OnServerTravelFail),&Parms);
	  }
	  void	eventBroadcastLocalizedTeam(class AActor* Sender, class UClass* Message, INT Switch, class UObject* Related1, class UObject* Related2, class UObject* OptionalObject, const FString& OptionalString)
	  {
        AGameInfo_eventBroadcastLocalizedTeam_Parms Parms;
		   Parms.Sender=Sender;
		   Parms.Message=Message;
		   Parms.Switch=Switch;
		   Parms.Related1=Related1;
		   Parms.Related2=Related2;
		   Parms.OptionalObject=OptionalObject;
		   Parms.OptionalString=OptionalString;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalizedTeam),&Parms);
	  }
	  void	eventBroadcastLocalized(class AActor* Sender, class UClass* Message, INT Switch, class UObject* Related1, class UObject* Related2, class UObject* OptionalObject, const FString& OptionalString)
	  {
        AGameInfo_eventBroadcastLocalized_Parms Parms;
		   Parms.Sender=Sender;
		   Parms.Message=Message;
		   Parms.Switch=Switch;
		   Parms.Related1=Related1;
		   Parms.Related2=Related2;
		   Parms.OptionalObject=OptionalObject;
		   Parms.OptionalString=OptionalString;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalized),&Parms);
	  }
	  void	eventBroadcast(class AActor* Sender, const FString& msg, FName Type)
	  {
        AGameInfo_eventBroadcast_Parms Parms;
		   Parms.Sender=Sender;
		   Parms.msg=msg;
		   Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_Broadcast),&Parms);
	  }
	  void	eventAcceptInventory(class APawn* PlayerPawn)
	  {
        AGameInfo_eventAcceptInventory_Parms Parms;
		   Parms.PlayerPawn=PlayerPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory),&Parms);
	  }
	  void	eventPostLogin(class APlayerController* NewPlayer)
	  {
        AGameInfo_eventPostLogin_Parms Parms;
		   Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLogin),&Parms);
	  }
	  class APlayerController*	eventLogin(const FString& Portal, const FString& Options, FString& Error)
	  {
        AGameInfo_eventLogin_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Portal=Portal;
		   Parms.Options=Options;
		   Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
		   Error=Parms.Error;
		   return Parms.ReturnValue;
	  }
	  void	eventPreLogin(const FString& Options, const FString& Address, FString& Error, FString& FailCode)
	  {
        AGameInfo_eventPreLogin_Parms Parms;
		   Parms.Options=Options;
		   Parms.Address=Address;
		   Parms.Error=Error;
		   Parms.FailCode=FailCode;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogin),&Parms);
		   Error=Parms.Error;
		   FailCode=Parms.FailCode;
	  }
	  FString	eventGetBeaconText()
	  {
        AGameInfo_eventGetBeaconText_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventInitGame(const FString& Options, FString& Error)
	  {
        AGameInfo_eventInitGame_Parms Parms;
		   Parms.Options=Options;
		   Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_InitGame),&Parms);
		   Error=Parms.Error;
	  }
	  void	eventDetailChange()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
	  }
	  void	eventGameEnding()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_GameEnding),NULL);
	  }
	  void	eventLevelChange()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_LevelChange),NULL);
	  }
	   DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};

// Class	AGameStats is declared in "..\Engine\Classes\GameStats.uc"
class ENGINE_API	AGameStats	: public AInfo
{
public:
    class AFileLog* TempLog;
    class AGameReplicationInfo* GRI;
    BITFIELD bShowBots:1;
	   DECLARE_FUNCTION(execGetMapFileName);
	   DECLARE_FUNCTION(execGetStatsIdentifier);
	   DECLARE_CLASS(AGameStats,AInfo,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AGameStats)
};

// Class	AInternetInfo is declared in "..\Engine\Classes\InternetInfo.uc"
class ENGINE_API	AInternetInfo	: public AInfo
{
public:
	   DECLARE_CLASS(AInternetInfo,AInfo,0|CLASS_Transient,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};

// Class	AMapList is declared in "..\Engine\Classes\MapList.uc"
class ENGINE_API	AMapList	: public AInfo
{
public:
    TArrayNoInit<FString> Maps;
    INT MapNum;
	   DECLARE_CLASS(AMapList,AInfo,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AMapList)
};

// Class	AMusicManagerBase is declared in "..\Engine\Classes\Music\MusicManagerBase.uc"
class ENGINE_API	AMusicManagerBase	: public AInfo
{
public:
	   DECLARE_CLASS(AMusicManagerBase,AInfo,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AMusicManagerBase)
};

// Class	AMutator is declared in "..\Engine\Classes\Mutator.uc"
class ENGINE_API	AMutator	: public AInfo
{
public:
    class AMutator* NextMutator;
    FStringNoInit DefaultWeaponName;
    FStringNoInit ConfigMenuClassName;
    FStringNoInit GroupName;
    FStringNoInit FriendlyName;
    FStringNoInit Description;
    BITFIELD bUserAdded:1;
    BITFIELD bAddToServerPackages:1;
	  BITFIELD	eventCheckRelevance(class AActor* Other, class AActor*& replacement)
	  {
        AMutator_eventCheckRelevance_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Other=Other;
		   Parms.replacement=replacement;
        ProcessEvent(FindFunctionChecked(ENGINE_CheckRelevance),&Parms);
		   replacement=Parms.replacement;
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(AMutator,AInfo,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AMutator)
};

// Class	APlayerStart is declared in "..\Engine\Classes\PlayerStart.uc"
class ENGINE_API	APlayerStart	: public AInfo
{
public:
    BYTE TeamNumber;
    BITFIELD bSinglePlayer:1;
    BITFIELD bCoop:1;
    BITFIELD bEnabled:1;
    BITFIELD bPrimary:1;
    FLOAT LastSpawnCampTime;
	   DECLARE_CLASS(APlayerStart,AInfo,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APlayerStart)
};

// Class	APotentialClimbWatcher is declared in "..\Engine\Classes\PotentialClimbWatcher.uc"
class ENGINE_API	APotentialClimbWatcher	: public AInfo
{
public:
	   DECLARE_CLASS(APotentialClimbWatcher,AInfo,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APotentialClimbWatcher)
};

// Class	AReplicationInfo is declared in "..\Engine\Classes\ReplicationInfo.uc"
class ENGINE_API	AReplicationInfo	: public AInfo
{
public:
	   DECLARE_CLASS(AReplicationInfo,AInfo,0,Engine)
	INT* GetOptimizedRepList( BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

// Class	AGameReplicationInfo is declared in "..\Engine\Classes\GameReplicationInfo.uc"
class ENGINE_API	AGameReplicationInfo	: public AReplicationInfo
{
public:
    FStringNoInit GameName;
    FStringNoInit GameClass;
    BITFIELD bTeamGame:1;
    BITFIELD bStopCountDown:1;
    BITFIELD bMatchHasBegun:1;
    BITFIELD bTeamSymbolsUpdated:1;
    BITFIELD bTournamentMode:1;
    FLOAT playerTeamDamagePercentage;
    INT RemainingTime;
    INT ElapsedTime;
    INT RemainingMinute;
    FLOAT SecondCount;
    INT GoalScore;
    INT TimeLimit;
    INT MaxLives;
    FStringNoInit ServerName;
    FStringNoInit ShortName;
    FStringNoInit AdminName;
    FStringNoInit AdminEmail;
    FStringNoInit AdminPass;
    BITFIELD bAdvertise:1;
    BITFIELD bCollectStats:1;
    INT ServerRegion;
    FStringNoInit MOTDLine1;
    FStringNoInit MOTDLine2;
    FStringNoInit MOTDLine3;
    FStringNoInit MOTDLine4;
    class AActor* Winner;
    TArrayNoInit<class APlayerReplicationInfo*> PRIArray;
    FVector FlagPos;
    BYTE CarriedObjectState[2];
    INT MatchID;
	   DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AGameReplicationInfo)
};

// Class	APlayerReplicationInfo is declared in "..\Engine\Classes\PlayerReplicationInfo.uc"
class ENGINE_API	APlayerReplicationInfo	: public AReplicationInfo
{
public:
    FLOAT Score;
    FLOAT Deaths;
    INT Ping;
    class AVolume* PlayerVolume;
    class AZoneInfo* PlayerZone;
    INT NumLives;
    FStringNoInit PlayerName;
    FStringNoInit CharacterName;
    FStringNoInit OldCharacterName;
    FStringNoInit OldName;
    FStringNoInit PreviousName;
    INT PlayerID;
    class UClass* VoiceType;
    BITFIELD bAdmin:1;
    BITFIELD bIsFemale:1;
    BITFIELD bIsSpectator:1;
    BITFIELD bOnlySpectator:1;
    BITFIELD bWaitingPlayer:1;
    BITFIELD bReadyToPlay:1;
    BITFIELD bOutOfLives:1;
    BITFIELD bBot:1;
    BITFIELD bWelcomed:1;
    BITFIELD bReceivedPing:1;
    BITFIELD bHasFlag:1;
    INT StartTime;
    FStringNoInit StringDead;
    FStringNoInit StringSpectating;
    FStringNoInit StringUnknown;
    INT GoalsScored;
    INT Kills;
	  void	eventClientNameChange()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_ClientNameChange),NULL);
	  }
	  void	eventUpdateCharacter()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_UpdateCharacter),NULL);
	  }
	   DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APlayerReplicationInfo)
};

// Class	ASecurity is declared in "..\Engine\Classes\Security.uc"
class ENGINE_API	ASecurity	: public AInfo
{
public:
    INT LastType;
    FStringNoInit LastParams[2];
	   DECLARE_FUNCTION(execNativePerform);
	  void	eventServerCallback(INT SecType, const FString& data)
	  {
        ASecurity_eventServerCallback_Parms Parms;
		   Parms.SecType=SecType;
		   Parms.data=data;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerCallback),&Parms);
	  }
	   DECLARE_CLASS(ASecurity,AInfo,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ASecurity)
};

// Class	AZoneInfo is declared in "..\Engine\Classes\ZoneInfo.uc"
class ENGINE_API	AZoneInfo	: public AInfo
{
public:
    class ASkyZoneInfo* SkyZone;
    FName ZoneTag;
    FStringNoInit LocationName;
    BITFIELD bTerrainZone:1;
    BITFIELD bDistanceFog:1;
    BITFIELD bClearToFogColor:1;
    TArrayNoInit<class ATerrainInfo*> Terrains;
    FVector AmbientVector;
    BYTE AmbientBrightness;
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    FLOAT AmbientXGroundRatio;
    FColor DistanceFogColor;
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    FLOAT DistanceFogBlendTime;
    BYTE DistanceFogType;
    FLOAT DistanceFogExpBias;
    FLOAT DistanceFogClipBias;
    BITFIELD bClipToDistanceFog:1;
    BITFIELD bDisableFogScaling:1;
    class UTexture* EnvironmentMap;
    FLOAT TexUPanSpeed;
    FLOAT TexVPanSpeed;
    class UI3DL2Listener* ZoneEffect;
    FName SkyZoneTag;
    BITFIELD bLonelyZone:1;
    TArrayNoInit<class AZoneInfo*> ManualExcludes;
    TArrayNoInit<FName> EffectsContexts;
	   DECLARE_FUNCTION(execZoneActors);
	  void	eventActorLeaving(class AActor* Other)
	  {
        AZoneInfo_eventActorLeaving_Parms Parms;
		  if(IsProbing(NAME_ActorLeaving)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving),&Parms);
		  }
	  }
	  void	eventActorEntered(class AActor* Other)
	  {
        AZoneInfo_eventActorEntered_Parms Parms;
		  if(IsProbing(NAME_ActorEntered)) {
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered),&Parms);
		  }
	  }
	   DECLARE_CLASS(AZoneInfo,AInfo,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AZoneInfo)
};

// Class	ALevelInfo is declared in "..\Engine\Classes\LevelInfo.uc"
class ENGINE_API	ALevelInfo	: public AZoneInfo
{
public:
    FLOAT TimeDilation;
    FLOAT TimeSeconds;
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    FLOAT PauseDelay;
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit LocalisationFile;
    TArrayNoInit<class UClass*> SupportedModes;
    TArrayNoInit<INT> SupportedModesScoreLimits;
    FStringNoInit Description;
    class UMaterial* Screenshot;
    INT IdealPlayerCountMin;
    INT IdealPlayerCountMax;
    FStringNoInit ExtraInfo;
    class AMusicManagerBase* MusicMgr;
    BYTE PhysicsDetailLevel;
    FLOAT KarmaTimeScale;
    FLOAT RagdollTimeScale;
    INT MaxRagdolls;
    FLOAT KarmaGravScale;
    BITFIELD bKStaticFriction:1;
    BITFIELD bKNoInit:1;
    BITFIELD bHavokDisabled:1;
    FLOAT HavokStepTimeQuantum;
    FStringNoInit HavokMoppCodeFilename;
    INT HavokBroadPhaseDimension;
    BITFIELD vehicleCeilingEnabled:1;
    FLOAT vehicleCeilingHeight;
    BITFIELD bNoPathfinding:1;
    FLOAT DecalStayScale;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    class APlayerReplicationInfo* Pauser;
    class ULevelSummary* Summary;
    FStringNoInit VisibleGroups;
    FStringNoInit SelectedGroups;
    BITFIELD HideFromMenus:1;
    BITFIELD bLonePlayer:1;
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BYTE DetailMode;
    BITFIELD bDropDetail:1;
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bLowSoundDetail:1;
    BITFIELD bPathsRebuilt:1;
    BITFIELD bHasPathNodes:1;
    BITFIELD bCapFramerate:1;
    BITFIELD bLevelChange:1;
    BITFIELD bNeverPrecache:1;
    FVector CameraLocationDynamic;
    FVector CameraLocationTop;
    FVector CameraLocationFront;
    FVector CameraLocationSide;
    FRotator CameraRotationDynamic;
    FStringNoInit Song;
    FLOAT PlayerDoppler;
    FLOAT MusicVolumeOverride;
    FLOAT Brightness;
    class UTexture* DefaultTexture;
    class UTexture* WireframeTexture;
    class UTexture* WhiteSquareTexture;
    class UTexture* LargeVertex;
    INT HubStackLevel;
    BYTE LevelAction;
    class AGameReplicationInfo* GRI;
    FLOAT MaxClientFrameRate;
    BYTE NetMode;
    FStringNoInit ComputerName;
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    FStringNoInit BuildVersion;
    FStringNoInit DefaultGameType;
    FStringNoInit PreCacheGame;
    class AGameInfo* Game;
    FLOAT DefaultGravity;
    class ANavigationPoint* NavigationPointList;
    class AController* ControllerList;
    class APlayerController* LocalPlayerController;
    class APawn* PawnList;
    FStringNoInit NextURL;
    BITFIELD bNextItems:1;
    FLOAT NextSwitchCountdown;
    class UObjectPool* ObjectPool;
    TArrayNoInit<class UMaterial*> PrecacheMaterials;
    TArrayNoInit<class UStaticMesh*> PrecacheStaticMeshes;
    TArrayNoInit<class UMesh*> PrecacheMeshes;
    BYTE Platform;
    class UIGEffectsSystemBase* EffectsSystem;
    TArrayNoInit<class AActor*> InterestedActorsGameStarted;
    class UMessageDispatcher* MessageDispatcher;
    class UObject* cutsceneManager;
    class USpeechManager* SpeechManager;
    class ATyrion_Setup* AI_Setup;
    BITFIELD bGameStarted:1;
    BITFIELD bSkipMojoCutscenes:1;
    FStringNoInit MojoFileURL;
    FLOAT MoveRepSize;
    class APlayerController* ReplicationViewer;
    class AActor* ReplicationViewTarget;
    BITFIELD bIsMojoPlaying:1;
    class UObject* savedCampaign;
    TArrayNoInit<class IIInterestedTeamChanged*> teamChangedListeners;
	   DECLARE_FUNCTION(execAllControllers);
	   DECLARE_FUNCTION(execUnRegisterNotifyActorDestroyed);
	   DECLARE_FUNCTION(execRegisterNotifyActorDestroyed);
	   DECLARE_FUNCTION(execUnRegisterNotifyPawnDied);
	   DECLARE_FUNCTION(execRegisterNotifyPawnDied);
	   DECLARE_FUNCTION(execGetAddressURL);
	   DECLARE_FUNCTION(execIsDemoBuild);
	   DECLARE_FUNCTION(execGetLocalURL);
	   DECLARE_FUNCTION(execIsPendingActive);
	   DECLARE_FUNCTION(execIsEntry);
	   DECLARE_FUNCTION(execDetailChange);
	   DECLARE_FUNCTION(execUpdateMovementConfiguration);
	   DECLARE_FUNCTION(execEscapeCutscene);
	   DECLARE_FUNCTION(execPlayAllMojoCutscenes);
	   DECLARE_FUNCTION(execPlayMojoCutscene);
	   DECLARE_FUNCTION(execHavokGetNextFreeSystemLayer);
	   DECLARE_FUNCTION(execHavokSetCollisionLayerEnabled);
	   DECLARE_FUNCTION(execGetGameSpyManager);
	   DECLARE_FUNCTION(execGetMapTextureExtent);
	   DECLARE_FUNCTION(execGetMapTextureOrigin);
	   DECLARE_FUNCTION(execGetMapTexture);
	  class APlayerController*	eventGetLocalPlayerController()
	  {
        ALevelInfo_eventGetLocalPlayerController_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetLocalPlayerController),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventNotifyGameStarted()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_NotifyGameStarted),NULL);
	  }
	  void	eventServerTravel(const FString& URL, BITFIELD bItems)
	  {
        ALevelInfo_eventServerTravel_Parms Parms;
		   Parms.URL=URL;
		   Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel),&Parms);
	  }
	  void	eventFillRenderPrecacheArrays()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_FillRenderPrecacheArrays),NULL);
	  }
	   DECLARE_CLASS(ALevelInfo,AZoneInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ALevelInfo)
};

// Class	ASkyZoneInfo is declared in "..\Engine\Classes\SkyZoneInfo.uc"
class ENGINE_API	ASkyZoneInfo	: public AZoneInfo
{
public:
	   DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

// Class	AWarpZoneInfo is declared in "..\Engine\Classes\WarpZoneInfo.uc"
class ENGINE_API	AWarpZoneInfo	: public AZoneInfo
{
public:
    FStringNoInit OtherSideURL;
    FName ThisTag;
    BITFIELD bNoTeleFrag:1;
    INT iWarpZone;
    FCoords WarpCoords;
    class AWarpZoneInfo* OtherSideActor;
    class UObject* OtherSideLevel;
    FStringNoInit Destinations[8];
    INT numDestinations;
	   DECLARE_FUNCTION(execUnWarp);
	   DECLARE_FUNCTION(execWarp);
	  void	eventForceGenerate()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate),NULL);
	  }
	  void	eventGenerate()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_Generate),NULL);
	  }
	   DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AWarpZoneInfo)
};

// Class	AKActor is declared in "..\Engine\Classes\KActor.uc"
class ENGINE_API	AKActor	: public AActor
{
public:
	   DECLARE_CLASS(AKActor,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AKActor)
};

// Class	AKConstraint is declared in "..\Engine\Classes\KConstraint.uc"
class ENGINE_API	AKConstraint	: public AKActor
{
public:
	   DECLARE_CLASS(AKConstraint,AKActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AKConstraint)
};

// Class	AKBSJoint is declared in "..\Engine\Classes\KBSJoint.uc"
class ENGINE_API	AKBSJoint	: public AKConstraint
{
public:
	   DECLARE_CLASS(AKBSJoint,AKConstraint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AKBSJoint)
};

// Class	AKCarWheelJoint is declared in "..\Engine\Classes\KCarWheelJoint.uc"
class ENGINE_API	AKCarWheelJoint	: public AKConstraint
{
public:
	   DECLARE_CLASS(AKCarWheelJoint,AKConstraint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AKCarWheelJoint)
};

// Class	AKConeLimit is declared in "..\Engine\Classes\KConeLimit.uc"
class ENGINE_API	AKConeLimit	: public AKConstraint
{
public:
	   DECLARE_CLASS(AKConeLimit,AKConstraint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AKConeLimit)
};

// Class	AKHinge is declared in "..\Engine\Classes\KHinge.uc"
class ENGINE_API	AKHinge	: public AKConstraint
{
public:
	   DECLARE_CLASS(AKHinge,AKConstraint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AKHinge)
};

// Class	AKRPROJoint is declared in "..\Engine\Classes\KRPROJoint.uc"
class ENGINE_API	AKRPROJoint	: public AKConstraint
{
public:
	   DECLARE_CLASS(AKRPROJoint,AKConstraint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AKRPROJoint)
};

// Class	AKTire is declared in "..\Engine\Classes\KTire.uc"
class ENGINE_API	AKTire	: public AKActor
{
public:
	   DECLARE_CLASS(AKTire,AKActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AKTire)
};

// Class	AKRepulsor is declared in "..\Engine\Classes\KRepulsor.uc"
class ENGINE_API	AKRepulsor	: public AActor
{
public:
	   DECLARE_CLASS(AKRepulsor,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AKRepulsor)
};

// Class	AKeypoint is declared in "..\Engine\Classes\Keypoint.uc"
class ENGINE_API	AKeypoint	: public AActor
{
public:
	   DECLARE_CLASS(AKeypoint,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};

// Class	AClipMarker is declared in "..\Engine\Classes\ClipMarker.uc"
class ENGINE_API	AClipMarker	: public AKeypoint
{
public:
	   DECLARE_CLASS(AClipMarker,AKeypoint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};

// Class	ADecorationList is declared in "..\Engine\Classes\DecorationList.uc"
class ENGINE_API	ADecorationList	: public AKeypoint
{
public:
    TArrayNoInit<FDecorationType> Decorations;
	   DECLARE_CLASS(ADecorationList,AKeypoint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ADecorationList)
};

// Class	APolyMarker is declared in "..\Engine\Classes\PolyMarker.uc"
class ENGINE_API	APolyMarker	: public AKeypoint
{
public:
	   DECLARE_CLASS(APolyMarker,AKeypoint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APolyMarker)
};

// Class	ALight is declared in "..\Engine\Classes\Light.uc"
class ENGINE_API	ALight	: public AActor
{
public:
    FLOAT MinCoronaSize;
    FLOAT MaxCoronaSize;
    FLOAT CoronaRotation;
    FLOAT CoronaRotationOffset;
    BITFIELD UseOwnFinalBlend:1;
	   DECLARE_CLASS(ALight,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ALight)
};

// Class	AMirror is declared in "..\Engine\Classes\ExternalCameras\Mirror.uc"
class ENGINE_API	AMirror	: public AActor
{
public:
    class AMirrorCamera* MyCamera;
    INT MirrorSkinIndex;
	   DECLARE_CLASS(AMirror,AActor,0,Engine)
	virtual void CheckForErrors();
    virtual void PostEditAdd(GroupFactory& Grouper);
	virtual void PostEditChange();
	virtual void PostEditLoad();
};

// Class	AMover is declared in "..\Engine\Classes\Mover.uc"
class ENGINE_API	AMover	: public AActor
{
public:
    BYTE MoverEncroachType;
    BYTE MoverGlideType;
    BYTE BumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    FLOAT MoveTime;
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    INT EncroachDamage;
    BITFIELD bToggleDirection:1;
    BITFIELD bTriggerOnceOnly:1;
    BITFIELD bSlave:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bDamageTriggered:1;
    BITFIELD bDynamicLightMover:1;
    BITFIELD bUseShortestRotation:1;
    BITFIELD bIsLeader:1;
    FName PlayerBumpEvent;
    FName BumpEvent;
    class AActor* SavedTrigger;
    FLOAT DamageThreshold;
    INT numTriggerEvents;
    class AMover* Leader;
    class AMover* Follower;
    FName ReturnGroup;
    FLOAT DelayTime;
    class USound* OpeningSound;
    class USound* OpenedSound;
    class USound* ClosingSound;
    class USound* ClosedSound;
    class USound* LoopSound;
    FName OpeningEvent;
    FName OpenedEvent;
    FName ClosingEvent;
    FName ClosedEvent;
    FName LoopEvent;
    BITFIELD bOscillatingLoop:1;
    BITFIELD bLockKeysRelativeToBase:1;
    FVector KeyPos[24];
    FRotator KeyRot[24];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator OldRot;
    FRotator SavedRot;
    FLOAT PhysAlpha;
    FLOAT PhysRate;
    class ANavigationPoint* myMarker;
    BITFIELD bOpening:1;
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bClosed:1;
    BITFIELD bPlayerOnly:1;
    BITFIELD bAutoDoor:1;
    BITFIELD bNoAIRelevance:1;
    FVector SimOldPos;
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    INT ClientUpdate;
    INT StepDirection;
    TArrayNoInit<class AAntiPortalActor*> AntiPortals;
    FName AntiPortalTag;
	  void	eventKeyFrameReached()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_KeyFrameReached),NULL);
	  }
	   DECLARE_CLASS(AMover,AActor,0|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AMover)
};

// Class	ANavigationPoint is declared in "..\Engine\Classes\NavigationPoint.uc"
class ENGINE_API	ANavigationPoint	: public AActor
{
public:
    TArrayNoInit<class UReachSpec*> PathList;
    FName ProscribedPaths[4];
    FName ForcedPaths[4];
    INT visitedWeight;
    INT bestPathWeight;
    class ANavigationPoint* nextNavigationPoint;
    class ANavigationPoint* nextOrdered;
    class ANavigationPoint* prevOrdered;
    class ANavigationPoint* previousPath;
    INT cost;
    INT ExtraCost;
    INT TransientCost;
    INT FearCost;
    BITFIELD bEndPoint:1;
    BITFIELD bTransientEndPoint:1;
    BITFIELD taken:1;
    BITFIELD bBlocked:1;
    BITFIELD bPropagatesSound:1;
    BITFIELD bOneWayPath:1;
    BITFIELD bNeverUseStrafing:1;
    BITFIELD bAlwaysUseStrafing:1;
    BITFIELD bForceNoStrafing:1;
    BITFIELD bAutoBuilt:1;
    BITFIELD bSpecialMove:1;
    BITFIELD bNoAutoConnect:1;
    BITFIELD bNotBased:1;
    BITFIELD bPathsChanged:1;
    BITFIELD bDestinationOnly:1;
    BITFIELD bSourceOnly:1;
    BITFIELD bSpecialForced:1;
    BITFIELD bMustBeReachable:1;
    FLOAT InventoryDist;
	  BITFIELD	eventSuggestMovePreparation(class APawn* Other)
	  {
        ANavigationPoint_eventSuggestMovePreparation_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SuggestMovePreparation),&Parms);
		   return Parms.ReturnValue;
	  }
	  FLOAT	eventDetourWeight(class APawn* Other, FLOAT PathWeight)
	  {
        ANavigationPoint_eventDetourWeight_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Other=Other;
		   Parms.PathWeight=PathWeight;
        ProcessEvent(FindFunctionChecked(ENGINE_DetourWeight),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventAccept(class AActor* Incoming, class AActor* Source)
	  {
        ANavigationPoint_eventAccept_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Incoming=Incoming;
		   Parms.Source=Source;
        ProcessEvent(FindFunctionChecked(ENGINE_Accept),&Parms);
		   return Parms.ReturnValue;
	  }
	  INT	eventSpecialCost(class APawn* Seeker, class UReachSpec* Path)
	  {
        ANavigationPoint_eventSpecialCost_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.Seeker=Seeker;
		   Parms.Path=Path;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialCost),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(ANavigationPoint,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ANavigationPoint)
};

// Class	ADoor is declared in "..\Engine\Classes\Door.uc"
class ENGINE_API	ADoor	: public ANavigationPoint
{
public:
    FName DoorTag;
    class AMover* MyDoor;
    FName DoorTrigger;
    class AActor* RecommendedTrigger;
    BITFIELD bInitiallyClosed:1;
    BITFIELD bBlockedWhenClosed:1;
    BITFIELD bDoorOpen:1;
    BITFIELD bTempNoCollide:1;
	   DECLARE_CLASS(ADoor,ANavigationPoint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ADoor)
};

// Class	AAutoDoor is declared in "..\Engine\Classes\AutoDoor.uc"
class ENGINE_API	AAutoDoor	: public ADoor
{
public:
	   DECLARE_CLASS(AAutoDoor,ADoor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AAutoDoor)
};

// Class	AJumpDest is declared in "..\Engine\Classes\JumpDest.uc"
class ENGINE_API	AJumpDest	: public ANavigationPoint
{
public:
    BITFIELD bOptionalJumpDest:1;
    INT NumUpstreamPaths;
    class UReachSpec* UpstreamPaths[8];
    FVector NeededJump[8];
    FLOAT CalculatedGravityZ[8];
	   DECLARE_CLASS(AJumpDest,ANavigationPoint,0,Engine)
	virtual void SetupForcedPath(APawn* Scout, UReachSpec* Path);
	void ClearPaths();
	UBOOL ReviewPath(APawn* Scout);
};

// Class	AJumpPad is declared in "..\Engine\Classes\JumpPad.uc"
class ENGINE_API	AJumpPad	: public ANavigationPoint
{
public:
    FVector JumpVelocity;
    class AActor* JumpTarget;
    FLOAT JumpZModifier;
    class USound* JumpSound;
	   DECLARE_CLASS(AJumpPad,ANavigationPoint,0,Engine)
	void addReachSpecs(APawn * Scout, UBOOL bOnlyChanged);
	void RenderEditorSelected(FLevelSceneNode* SceneNode,FRenderInterface* RI, FDynamicActor* FDA);
};

// Class	ALiftCenter is declared in "..\Engine\Classes\LiftCenter.uc"
class ENGINE_API	ALiftCenter	: public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT MaxDist2D;
    FVector LiftOffset;
	   DECLARE_CLASS(ALiftCenter,ANavigationPoint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ALiftCenter)
};

// Class	ALiftExit is declared in "..\Engine\Classes\LiftExit.uc"
class ENGINE_API	ALiftExit	: public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    BYTE SuggestedKeyFrame;
    BYTE KeyFrame;
	   DECLARE_CLASS(ALiftExit,ANavigationPoint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ALiftExit)
};

// Class	APathNode is declared in "..\Engine\Classes\PathNode.uc"
class ENGINE_API	APathNode	: public ANavigationPoint
{
public:
	   DECLARE_CLASS(APathNode,ANavigationPoint,0,Engine)
	virtual UBOOL ReviewPath(APawn* Scout);
	virtual void CheckSymmetry(ANavigationPoint* Other);
	virtual INT AddMyMarker(AActor *S);
};

// Class	ASmallNavigationPoint is declared in "..\Engine\Classes\SmallNavigationPoint.uc"
class ENGINE_API	ASmallNavigationPoint	: public ANavigationPoint
{
public:
	   DECLARE_CLASS(ASmallNavigationPoint,ANavigationPoint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ASmallNavigationPoint)
};

// Class	ALadder is declared in "..\Engine\Classes\Ladder.uc"
class ENGINE_API	ALadder	: public ASmallNavigationPoint
{
public:
    class ALadderVolume* MyLadder;
    class ALadder* LadderList;
	   DECLARE_CLASS(ALadder,ASmallNavigationPoint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ALadder)
};

// Class	AAutoLadder is declared in "..\Engine\Classes\AutoLadder.uc"
class ENGINE_API	AAutoLadder	: public ALadder
{
public:
	   DECLARE_CLASS(AAutoLadder,ALadder,0,Engine)
	virtual UBOOL IsIdentifiedAs(FName ActorName);
};

// Class	ATeleporter is declared in "..\Engine\Classes\Teleporter.uc"
class ENGINE_API	ATeleporter	: public ASmallNavigationPoint
{
public:
    FStringNoInit URL;
    FName ProductRequired;
    BITFIELD bChangesVelocity:1;
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    FVector TargetVelocity;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FLOAT LastFired;
	   DECLARE_CLASS(ATeleporter,ASmallNavigationPoint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ATeleporter)
};

// Class	AWarpZoneMarker is declared in "..\Engine\Classes\WarpZoneMarker.uc"
class ENGINE_API	AWarpZoneMarker	: public ASmallNavigationPoint
{
public:
    class AWarpZoneInfo* markedWarpZone;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
	   DECLARE_CLASS(AWarpZoneMarker,ASmallNavigationPoint,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AWarpZoneMarker)
};

// Class	ANote is declared in "..\Engine\Classes\Note.uc"
class ENGINE_API	ANote	: public AActor
{
public:
    FStringNoInit Text;
	   DECLARE_CLASS(ANote,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ANote)
};

// Class	APawn is declared in "..\Engine\Classes\Pawn.uc"
class ENGINE_API	APawn	: public AActor
{
public:
    class AController* Controller;
    BITFIELD movementSimProxyPending:1;
    FVector movementSimProxyPosition;
    FVector movementSimProxyVelocity;
    FRotator movementSimProxyRotation;
    TArrayNoInit<class UClass*> goals;
    TArrayNoInit<class UClass*> abilities;
    BYTE AI_LOD_LevelOrig;
    class UTyrion_ResourceBase* CharacterAI;
    class UTyrion_ResourceBase* MovementAI;
    class UTyrion_ResourceBase* WeaponAI;
    class UTyrion_ResourceBase* HeadAI;
    BYTE AI_LOD_Level;
    BITFIELD logTyrion:1;
    BITFIELD logDLM:1;
    BITFIELD logNavigationSystem:1;
    class APawn* nextPawn;
    FLOAT NetRelevancyTime;
    class APlayerController* LastRealViewer;
    class AActor* LastViewer;
    BITFIELD bJustLanded:1;
    BITFIELD bUpAndOut:1;
    BITFIELD bIsWalking:1;
    BITFIELD bWarping:1;
    BITFIELD bWantsToCrouch:1;
    BITFIELD bIsCrouched:1;
    BITFIELD bTryToUncrouch:1;
    BITFIELD bCanCrouch:1;
    BITFIELD bCrawler:1;
    BITFIELD bReducedSpeed:1;
    BITFIELD bJumpCapable:1;
    BITFIELD bCanJump:1;
    BITFIELD bCanWalk:1;
    BITFIELD bCanSwim:1;
    BITFIELD bCanFly:1;
    BITFIELD bCanClimbLadders:1;
    BITFIELD bCanStrafe:1;
    BITFIELD bCanDoubleJump:1;
    BITFIELD bAvoidLedges:1;
    BITFIELD bStopAtLedges:1;
    BITFIELD bNoJumpAdjust:1;
    BITFIELD bCountJumps:1;
    BITFIELD bSimulateGravity:1;
    BITFIELD bUpdateEyeHeight:1;
    BITFIELD bIgnoreForces:1;
    BITFIELD bNoVelocityUpdate:1;
    BITFIELD bCanWalkOffLedges:1;
    BITFIELD bSteadyFiring:1;
    BITFIELD bCanBeBaseForPawns:1;
    BITFIELD bClientCollision:1;
    BITFIELD bSimGravityDisabled:1;
    BITFIELD bDirectHitWall:1;
    BITFIELD bHavokCharacterCollisions:1;
    BITFIELD bHavokInitCalled:1;
    FLOAT bHavokCharacterCollisionExtraRadius;
    BITFIELD bThumped:1;
    BITFIELD bInvulnerableBody:1;
    BITFIELD bIsFemale:1;
    BITFIELD bUpdatingDisplay:1;
    BITFIELD bAmbientCreature:1;
    BITFIELD bLOSHearing:1;
    BITFIELD bSameZoneHearing:1;
    BITFIELD bAdjacentZoneHearing:1;
    BITFIELD bMuffledHearing:1;
    BITFIELD bDontPossess:1;
    BITFIELD bRollToDesired:1;
    BITFIELD bCachedRelevant:1;
    BITFIELD bUseCompressedPosition:1;
    BITFIELD bWeaponBob:1;
    BITFIELD bHideRegularHUD:1;
    BITFIELD bSpecialHUD:1;
    BITFIELD bSpecialCalcView:1;
    BITFIELD bNoWeaponFiring:1;
    BITFIELD bIsTyping:1;
    BITFIELD bCouldSeeLastTick:1;
    BITFIELD bGroundNavigationObstruction:1;
    BYTE Visibility;
    FLOAT DesiredSpeed;
    FName AIScriptTag;
    FLOAT HearingThreshold;
    FLOAT Alertness;
    FLOAT SightRadius;
    FLOAT PeripheralVision;
    FLOAT AvgPhysicsTime;
    FLOAT MeleeRange;
    class ANavigationPoint* Anchor;
    class ANavigationPoint* LastAnchor;
    FLOAT LastValidAnchorTime;
    FLOAT DestinationOffset;
    FLOAT SerpentineDist;
    FLOAT SerpentineTime;
    FLOAT UncrouchTime;
    FLOAT SpawnTime;
    FLOAT VisionCounter;
    FRange VisionUpdateRange;
    FLOAT GroundSpeed;
    FLOAT WaterSpeed;
    FLOAT AirSpeed;
    FLOAT LadderSpeed;
    FLOAT AccelRate;
    FLOAT JumpZ;
    FLOAT AirControl;
    FLOAT WalkingPct;
    FLOAT CrouchedPct;
    FLOAT MaxFallSpeed;
    FVector ConstantAcceleration;
    FStringNoInit OwnerName;
    FLOAT BaseEyeHeight;
    FLOAT EyeHeight;
    FVector Floor;
    FLOAT SplashTime;
    FLOAT CrouchHeight;
    FLOAT CrouchRadius;
    FLOAT OldZ;
    class APhysicsVolume* HeadVolume;
    FLOAT Health;
    FLOAT BreathTime;
    FLOAT UnderWaterTime;
    FLOAT LastPainTime;
    class UClass* ReducedDamageType;
    FLOAT HeadScale;
    FVector noise1spot;
    FLOAT noise1time;
    class APawn* noise1other;
    FLOAT noise1loudness;
    FVector noise2spot;
    FLOAT noise2time;
    class APawn* noise2other;
    FLOAT noise2loudness;
    FLOAT LastPainSound;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    FVector WalkBob;
    FLOAT SoundDampening;
    FLOAT DamageScaling;
    FStringNoInit MenuName;
    class AShadowProjector* Shadow;
    class UClass* BloodEffect;
    class UClass* LowGoreBlood;
    FStringNoInit ControllerClassName;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class ALadderVolume* OnLadder;
    FName LandMovementState;
    FName WaterMovementState;
    class AActor* LastStartSpot;
    FLOAT LastStartTime;
    FName AnimAction;
    FVector TakeHitLocation;
    class UClass* HitDamageType;
    FVector TearOffMomentum;
    BITFIELD bPhysicsAnimUpdate:1;
    BITFIELD bWasCrouched:1;
    BITFIELD bWasWalking:1;
    BITFIELD bWasOnGround:1;
    BITFIELD bInitializeAnimation:1;
    BITFIELD bPlayedDeath:1;
    BYTE OldPhysics;
    FLOAT OldRotYaw;
    FVector OldAcceleration;
    FLOAT BaseMovementRate;
    FName MovementAnims[4];
    FName TurnLeftAnim;
    FName TurnRightAnim;
    FLOAT BlendChangeTime;
    FLOAT MovementBlendStartTime;
    FLOAT ForwardStrafeBias;
    FLOAT BackwardStrafeBias;
    FCompressedPosition PawnPosition;
    BITFIELD bNotifiedDeathListeners:1;
    BITFIELD bSendsDamagedMessages:1;
	   DECLARE_FUNCTION(execNotifyPawnDeathListeners);
	   DECLARE_FUNCTION(execLineOfSightTo);
	   DECLARE_FUNCTION(execForceCrouch);
	   DECLARE_FUNCTION(execReachedDestination);
	   DECLARE_FUNCTION(execCanSee);
	   DECLARE_FUNCTION(execGetViewPoint);
	   DECLARE_FUNCTION(execGetViewDirection);
	   DECLARE_FUNCTION(execRemovePawn);
	   DECLARE_FUNCTION(execAddPawn);
	  void	eventPlayLandingAnimation(FLOAT impactVel)
	  {
        APawn_eventPlayLandingAnimation_Parms Parms;
		   Parms.impactVel=impactVel;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayLandingAnimation),&Parms);
	  }
	  void	eventPlayFalling()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PlayFalling),NULL);
	  }
	  void	eventPlayJump()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PlayJump),NULL);
	  }
	  void	eventChangeAnimation()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_ChangeAnimation),NULL);
	  }
	  void	eventStopPlayFiring()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_StopPlayFiring),NULL);
	  }
	  void	eventPlayDying(class UClass* DamageType, FVector HitLoc)
	  {
        APawn_eventPlayDying_Parms Parms;
		   Parms.DamageType=DamageType;
		   Parms.HitLoc=HitLoc;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayDying),&Parms);
	  }
	  void	eventSetAnimAction(FName NewAction)
	  {
        APawn_eventSetAnimAction_Parms Parms;
		   Parms.NewAction=NewAction;
        ProcessEvent(FindFunctionChecked(ENGINE_SetAnimAction),&Parms);
	  }
	  void	eventBreathTimer()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_BreathTimer),NULL);
	  }
	  void	eventHeadVolumeChange(class APhysicsVolume* newHeadVolume)
	  {
        APawn_eventHeadVolumeChange_Parms Parms;
		  if(IsProbing(NAME_HeadVolumeChange)) {
		   Parms.newHeadVolume=newHeadVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_HeadVolumeChange),&Parms);
		  }
	  }
	  void	eventsetLimitedTimeLODActivation(INT ticksToKeepActivated)
	  {
        APawn_eventsetLimitedTimeLODActivation_Parms Parms;
		   Parms.ticksToKeepActivated=ticksToKeepActivated;
        ProcessEvent(FindFunctionChecked(ENGINE_setLimitedTimeLODActivation),&Parms);
	  }
	  BITFIELD	eventisAlive()
	  {
        APawn_eventisAlive_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_isAlive),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventUpdateEyeHeight(FLOAT DeltaTime)
	  {
        APawn_eventUpdateEyeHeight_Parms Parms;
		  if(IsProbing(NAME_UpdateEyeHeight)) {
		   Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateEyeHeight),&Parms);
		  }
	  }
	  void	eventStartCrouch(FLOAT HeightAdjust)
	  {
        APawn_eventStartCrouch_Parms Parms;
		   Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_StartCrouch),&Parms);
	  }
	  void	eventEndCrouch(FLOAT HeightAdjust)
	  {
        APawn_eventEndCrouch_Parms Parms;
		   Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_EndCrouch),&Parms);
	  }
	  void	eventModifyVelocity(FLOAT DeltaTime, FVector OldVelocity)
	  {
        APawn_eventModifyVelocity_Parms Parms;
		  if(IsProbing(NAME_ModifyVelocity)) {
		   Parms.DeltaTime=DeltaTime;
		   Parms.OldVelocity=OldVelocity;
        ProcessEvent(FindFunctionChecked(ENGINE_ModifyVelocity),&Parms);
		  }
	  }
	  void	eventClientMessage(const FString& S, FName Type)
	  {
        APawn_eventClientMessage_Parms Parms;
		   Parms.S=S;
		   Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
	  }
	  void	eventSetWalking(BITFIELD bNewIsWalking)
	  {
        APawn_eventSetWalking_Parms Parms;
		   Parms.bNewIsWalking=bNewIsWalking;
        ProcessEvent(FindFunctionChecked(ENGINE_SetWalking),&Parms);
	  }
	  void	eventSetHeadScale(FLOAT NewScale)
	  {
        APawn_eventSetHeadScale_Parms Parms;
		   Parms.NewScale=NewScale;
        ProcessEvent(FindFunctionChecked(ENGINE_SetHeadScale),&Parms);
	  }
	  BITFIELD	eventHavokCharacterCollision(FHavokCharacterObjectInteractionEvent data, FHavokCharacterObjectInteractionResult& res)
	  {
        APawn_eventHavokCharacterCollision_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.data=data;
		   Parms.res=res;
        ProcessEvent(FindFunctionChecked(ENGINE_HavokCharacterCollision),&Parms);
		   res=Parms.res;
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventIgnoresSeenPawnsOfType(class UClass* SeenType)
	  {
        APawn_eventIgnoresSeenPawnsOfType_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.SeenType=SeenType;
        ProcessEvent(FindFunctionChecked(ENGINE_IgnoresSeenPawnsOfType),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(APawn,AActor,0|CLASS_NativeReplication,Engine)
	   NO_DEFAULT_CONSTRUCTOR(APawn)
};

// Class	AHavokVehicle is declared in "..\Engine\Classes\HavokVehicle.uc"
class ENGINE_API	AHavokVehicle	: public APawn
{
public:
    INT hkVehicleDataPtr;
    TArrayNoInit<class UHavokVehicleWheel*> Wheels;
    TArrayNoInit<FLOAT> GearRatios;
    FLOAT Steering;
    FLOAT Throttle;
    FLOAT Rise;
    class APawn* Driver;
    TArrayNoInit<FVector> ExitPositions;
    TArrayNoInit<FVector> EntryPositions;
    FVector DrivePos;
    FRotator DriveRot;
    FName DriveAnim;
    BITFIELD bDrawMeshInFP:1;
    BITFIELD bDrawDriverInTP:1;
    BITFIELD bZeroPCRotOnEntry:1;
    FVector FPCamPos;
    FVector TPCamLookat;
    FLOAT TPCamDistance;
    INT MaxViewYaw;
    INT MaxViewPitch;
    FLOAT ChassisMass;
    FLOAT SteeringMaxAngle;
    FLOAT MaxSpeedFullSteeringAngle;
    FLOAT FrictionEqualizer;
    FLOAT TorqueRollFactor;
    FLOAT TorquePitchFactor;
    FLOAT TorqueYawFactor;
    FLOAT TorqueExtraFactor;
    FLOAT ChassisUnitInertiaYaw;
    FLOAT ChassisUnitInertiaRoll;
    FLOAT ChassisUnitInertiaPitch;
    FLOAT EngineTorque;
    FLOAT EngineMinRPM;
    FLOAT EngineOptRPM;
    FLOAT EngineMaxRPM;
    FLOAT EngineTorqueFactorAtMinRPM;
    FLOAT EngineTorqueFactorAtMaxRPM;
    FLOAT EngineResistanceFactorAtMinRPM;
    FLOAT EngineResistanceFactorAtOptRPM;
    FLOAT EngineResistanceFactorAtMaxRPM;
    FLOAT GearDownshiftRPM;
    FLOAT GearUpshiftRPM;
    FLOAT GearClutchDelayTime;
    FLOAT GearReverseRatio;
    FLOAT TopSpeed;
    FLOAT AerodynamicsAirDensity;
    FLOAT AerodynamicsFrontalArea;
    FLOAT AerodynamicsDragCoeff;
    FLOAT AerodynamicsLiftCoeff;
    FVector ExtraGravity;
    FLOAT SpinDamping;
    FLOAT CollisionSpinDamping;
    FLOAT CollisionThreshold;
    class UClass* DestroyEffectClass;
    BITFIELD bGetOut:1;
    class AHavokVehicleFactory* ParentFactory;
    class AShadowProjector* VehicleShadow;
    FHavokCarState CarState;
    BITFIELD bNewCarState:1;
	   DECLARE_FUNCTION(execRemakeVehicle);
	   DECLARE_FUNCTION(execGraphData);
	  void	eventHavokVehicleHasChanged()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_HavokVehicleHasChanged),NULL);
	  }
	  void	eventUpdateVehicle(FLOAT DeltaTime)
	  {
        AHavokVehicle_eventUpdateVehicle_Parms Parms;
		   Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateVehicle),&Parms);
	  }
	  void	eventHavokVehicleStateReceived()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_HavokVehicleStateReceived),NULL);
	  }
	   DECLARE_CLASS(AHavokVehicle,APawn,0,Engine)
#ifdef UNREAL_HAVOK

	// Actor interface.
	virtual bool HavokInitActor();
	virtual void HavokQuitActor();
	
	virtual void PostNetReceive();
    virtual void PostEditChange();
    
	virtual void setPhysics(BYTE NewPhysics, AActor *NewFloor, FVector NewFloorV);
	
	virtual void TickSimulated( FLOAT DeltaSeconds );
	virtual void TickAuthoritative( FLOAT DeltaSeconds );
	
	virtual void HavokPreStepCallback(FLOAT DeltaTime);
	
	virtual void RemakeVehicle();  // updates the internal Havok Raycast vehicle. Called by default in VehicleUpdateParams event, but you can call it whenever you change suspension params etc. No need to call this if you just chaneg steering + throtle in the UpdateVehicle event.
	virtual void BuildVehicle();    // constructs the vehicle, internal call from PostBeginPlay

	virtual void syncVehicleToBones();
	
#endif
};

// Class	AKVehicle is declared in "..\Engine\Classes\KVehicle.uc"
class ENGINE_API	AKVehicle	: public APawn
{
public:
	   DECLARE_CLASS(AKVehicle,APawn,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AKVehicle)
};

// Class	ASVehicle is declared in "..\Engine\Classes\SVehicle.uc"
class ENGINE_API	ASVehicle	: public APawn
{
public:
	   DECLARE_CLASS(ASVehicle,APawn,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ASVehicle)
};

// Class	AScout is declared in "..\Engine\Classes\Scout.uc"
class ENGINE_API	AScout	: public APawn
{
public:
    FLOAT MaxLandingVelocity;
	   DECLARE_CLASS(AScout,APawn,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AScout)
};

// Class	AProjector is declared in "..\Engine\Classes\Projector.uc"
class ENGINE_API	AProjector	: public AActor
{
public:
    BYTE MaterialBlendingOp;
    BYTE FrameBufferBlendingOp;
    class UMaterial* ProjTexture;
    INT FOV;
    INT MaxTraceDistance;
    BITFIELD bProjectBSP:1;
    BITFIELD bProjectTerrain:1;
    BITFIELD bProjectStaticMesh:1;
    BITFIELD bProjectParticles:1;
    BITFIELD bProjectActor:1;
    BITFIELD bLevelStatic:1;
    BITFIELD bClipBSP:1;
    BITFIELD bClipStaticMesh:1;
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bGradient:1;
    BITFIELD bProjectOnBackfaces:1;
    BITFIELD bProjectOnAlpha:1;
    BITFIELD bProjectOnParallelBSP:1;
    FName ProjectTag;
    BITFIELD bDynamicAttach:1;
    BITFIELD bNoProjectOnOwner:1;
    FLOAT FadeInTime;
    FPlane FrustumPlanes[6];
    FVector FrustumVertices[8];
    FBox Box;
    FProjectorRenderInfoPtr RenderInfo;
    class UTexture* GradientTexture;
    FMatrix GradientMatrix;
    FMatrix Matrix;
    FVector OldLocation;
	   DECLARE_FUNCTION(execUpdateMatrix);
	   DECLARE_FUNCTION(execDetachActor);
	   DECLARE_FUNCTION(execAttachActor);
	   DECLARE_FUNCTION(execAbandonProjector);
	   DECLARE_FUNCTION(execDetachProjector);
	   DECLARE_FUNCTION(execAttachProjector);
	  void	eventPreRenderCallback()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PreRenderCallback),NULL);
	  }
	   DECLARE_CLASS(AProjector,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AProjector)
};

// Class	AShadowProjector is declared in "..\Engine\Classes\ShadowProjector.uc"
class ENGINE_API	AShadowProjector	: public AProjector
{
public:
    class AActor* ShadowActor;
    FVector LightDirection;
    FLOAT LightDistance;
    BITFIELD RootMotion:1;
    BITFIELD bBlobShadow:1;
    BITFIELD bShadowActive:1;
    class UShadowBitmapMaterial* ShadowTexture;
    INT Resolution;
	   DECLARE_FUNCTION(execUpdateShadow);
	   DECLARE_FUNCTION(execUpdateDetailSetting);
	   DECLARE_CLASS(AShadowProjector,AProjector,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AShadowProjector)
};

// Class	AStaticMeshActor is declared in "..\Engine\Classes\StaticMeshActor.uc"
class ENGINE_API	AStaticMeshActor	: public AActor
{
public:
    BITFIELD bExactProjectileCollision:1;
    BITFIELD bIncludeInGroundNavigation:1;
	   DECLARE_CLASS(AStaticMeshActor,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AStaticMeshActor)
};

// Class	ATriggers is declared in "..\Engine\Classes\Triggers.uc"
class ENGINE_API	ATriggers	: public AActor
{
public:
    BITFIELD trigger_cutscene:1;
    FName cutscene_name;
	   DECLARE_FUNCTION(execTriggerMojoCutscene);
	   DECLARE_CLASS(ATriggers,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ATriggers)
};

// Class	ALineOfSightTrigger is declared in "..\Engine\Classes\LineOfSightTrigger.uc"
class ENGINE_API	ALineOfSightTrigger	: public ATriggers
{
public:
    FLOAT MaxViewDist;
    FLOAT OldTickTime;
    BITFIELD bEnabled:1;
    BITFIELD bTriggered:1;
    FName SeenActorTag;
    class AActor* SeenActor;
    INT MaxViewAngle;
    FLOAT RequiredViewDir;
	  void	eventPlayerSeesMe(class APlayerController* p)
	  {
        ALineOfSightTrigger_eventPlayerSeesMe_Parms Parms;
		   Parms.p=p;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerSeesMe),&Parms);
	  }
	   DECLARE_CLASS(ALineOfSightTrigger,ATriggers,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ALineOfSightTrigger)
};

// Class	ATrigger is declared in "..\Engine\Classes\Trigger.uc"
class ENGINE_API	ATrigger	: public ATriggers
{
public:
    BYTE TriggerType;
    FStringNoInit Message;
    BITFIELD bTriggerOnceOnly:1;
    BITFIELD bInitiallyActive:1;
    class UClass* ClassProximityType;
    FLOAT RepeatTriggerTime;
    FLOAT ReTriggerDelay;
    FLOAT TriggerTime;
    FLOAT DamageThreshold;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    BITFIELD bSavedInitialCollision:1;
    BITFIELD bSavedInitialActive:1;
	   DECLARE_CLASS(ATrigger,ATriggers,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ATrigger)
};

// Class	ATyrion_Setup is declared in "..\Engine\Classes\TyrionInterface\Tyrion_Setup.uc"
class ENGINE_API	ATyrion_Setup	: public AActor
{
public:
    class UObject* deadClasses;
	   DECLARE_FUNCTION(execcopyParameters);
	   DECLARE_FUNCTION(execmakeSafeOuter);
	   DECLARE_FUNCTION(execshutDownVision);
	   DECLARE_FUNCTION(execsetAILOD);
	  void	eventenemyListSanityCheck(class APawn* AI)
	  {
        ATyrion_Setup_eventenemyListSanityCheck_Parms Parms;
		   Parms.AI=AI;
        ProcessEvent(FindFunctionChecked(ENGINE_enemyListSanityCheck),&Parms);
	  }
	  void	eventstopActions(class APawn* Pawn)
	  {
        ATyrion_Setup_eventstopActions_Parms Parms;
		   Parms.Pawn=Pawn;
        ProcessEvent(FindFunctionChecked(ENGINE_stopActions),&Parms);
	  }
	  void	eventdoRookRelatedAIProcessing(FLOAT DeltaSeconds, class APawn* Pawn)
	  {
        ATyrion_Setup_eventdoRookRelatedAIProcessing_Parms Parms;
		   Parms.DeltaSeconds=DeltaSeconds;
		   Parms.Pawn=Pawn;
        ProcessEvent(FindFunctionChecked(ENGINE_doRookRelatedAIProcessing),&Parms);
	  }
	   DECLARE_CLASS(ATyrion_Setup,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ATyrion_Setup)
};

// Class	AxWeatherEffect is declared in "..\Engine\Classes\Effects\xWeatherEffect.uc"
class ENGINE_API	AxWeatherEffect	: public AActor
{
public:
    BYTE WeatherType;
    INT numParticles;
    INT numActive;
    FBox Box;
    FVector eyePos;
    FVector eyeDir;
    FVector spawnOrigin;
    FVector eyeMoveVec;
    FLOAT eyeVel;
    FLOAT deviation;
    FLOAT maxPclEyeDist;
    FLOAT numCols;
    FLOAT numRows;
    FLOAT numFrames;
    FLOAT texU;
    FLOAT texV;
    BITFIELD noReference:1;
    FVector spawnVecU;
    FVector spawnVecV;
    FVector spawnVel;
    FRangeVector Position;
    FRange speed;
    FRange Life;
    FRange Size;
    FRange EyeSizeClamp;
    BITFIELD bForceAffected:1;
    BITFIELD OnlyPlayInZone:1;
    TArrayNoInit<FWeatherPcl> pcl;
    TArrayNoInit<class AVolume*> pclBlockers;
	   DECLARE_CLASS(AxWeatherEffect,AActor,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(AxWeatherEffect)
};

// Class	UAdminBase is declared in "..\Engine\Classes\AdminBase.uc"
class ENGINE_API	UAdminBase	: public UObject
{
public:
    BITFIELD bAdmin:1;
	   DECLARE_CLASS(UAdminBase,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UAdminBase)
};

// Class	UAnimNotify is declared in "..\Engine\Classes\AnimNotify.uc"
class ENGINE_API	UAnimNotify	: public UObject
{
public:
    INT Revision;
	   DECLARE_CLASS(UAnimNotify,UObject,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner ) {};
	// UObject interface.
	virtual void PostEditChange();
};

// Class	UAnimNotify_DestroyEffect is declared in "..\Engine\Classes\AnimNotify_DestroyEffect.uc"
class ENGINE_API	UAnimNotify_DestroyEffect	: public UAnimNotify
{
public:
    FName DestroyTag;
    BITFIELD bExpireParticles:1;
	   DECLARE_CLASS(UAnimNotify_DestroyEffect,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

// Class	UAnimNotify_Effect is declared in "..\Engine\Classes\AnimNotify_Effect.uc"
class ENGINE_API	UAnimNotify_Effect	: public UAnimNotify
{
public:
    class UClass* EffectClass;
    FName Bone;
    FVector OffsetLocation;
    FRotator OffsetRotation;
    BITFIELD Attach:1;
    FName Tag;
    FLOAT DrawScale;
    FVector DrawScale3D;
    class AActor* LastSpawnedEffect;
	   DECLARE_CLASS(UAnimNotify_Effect,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

// Class	UAnimNotify_LIPSinc is declared in "..\Engine\Classes\AnimNotify_LIPSinc.uc"
class ENGINE_API	UAnimNotify_LIPSinc	: public UAnimNotify
{
public:
    FName LIPSincAnimName;
    FLOAT Volume;
    INT Radius;
    FLOAT Pitch;
	   DECLARE_CLASS(UAnimNotify_LIPSinc,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

// Class	UAnimNotify_Script is declared in "..\Engine\Classes\AnimNotify_Script.uc"
class ENGINE_API	UAnimNotify_Script	: public UAnimNotify
{
public:
    FName NotifyName;
	   DECLARE_CLASS(UAnimNotify_Script,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

// Class	UAnimNotify_Scripted is declared in "..\Engine\Classes\AnimNotify_Scripted.uc"
class ENGINE_API	UAnimNotify_Scripted	: public UAnimNotify
{
public:
	  void	eventNotify(class AActor* Owner)
	  {
        UAnimNotify_Scripted_eventNotify_Parms Parms;
		   Parms.Owner=Owner;
        ProcessEvent(FindFunctionChecked(ENGINE_Notify),&Parms);
	  }
	   DECLARE_CLASS(UAnimNotify_Scripted,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

// Class	UAnimNotify_Sound is declared in "..\Engine\Classes\AnimNotify_Sound.uc"
class ENGINE_API	UAnimNotify_Sound	: public UAnimNotify
{
public:
    class USound* Sound;
    FLOAT Volume;
    INT Radius;
	   DECLARE_CLASS(UAnimNotify_Sound,UAnimNotify,0,Engine)
	// AnimNotify interface.
	virtual void Notify( UMeshInstance *Instance, AActor *Owner );
};

// Class	UCheatManager is declared in "..\Engine\Classes\CheatManager.uc"
class ENGINE_API	UCheatManager	: public UObject
{
public:
    FRotator LockedRotation;
	   DECLARE_CLASS(UCheatManager,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UCheatManager)
};

// Class	UFluidSurfaceParamaters is declared in "..\Engine\Classes\FluidVolume\FluidSurfaceParamaters.uc"
class ENGINE_API	UFluidSurfaceParamaters	: public UObject
{
public:
    FPlane WaveHeights;
    FPlane WaveSpeeds;
    FPlane WaveOffsets;
    FPlane WaveXSizes;
    FPlane WaveYSizes;
	   DECLARE_CLASS(UFluidSurfaceParamaters,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UFluidSurfaceParamaters)
};

// Class	UGameSpyManager is declared in "..\Engine\Classes\GameSpy\GameSpyManager.uc"
class ENGINE_API	UGameSpyManager	: public UObject
{
public:
    class UGameEngine* Engine;
    BITFIELD bAvailable:1;
    BITFIELD bFailedAvailabilityCheck:1;
    BITFIELD bInitAsServer:1;
    BITFIELD bInitAsClient:1;
    BITFIELD bInitialised:1;
    BITFIELD bFailedInitialisation:1;
    BITFIELD bTrackingStats:1;
    BITFIELD bStatsInitalised:1;
    BITFIELD bUsingPresence:1;
    BITFIELD bPresenceInitalised:1;
    BITFIELD bServerUpdateFinished:1;
    INT currentServerIndex;
    TArrayNoInit<BYTE> ServerKeyIds;
    TArrayNoInit<FString> ServerKeyNames;
    TArrayNoInit<BYTE> PlayerKeyIds;
    TArrayNoInit<FString> PlayerKeyNames;
    TArrayNoInit<BYTE> TeamKeyIds;
    TArrayNoInit<FString> TeamKeyNames;
    TArrayNoInit<BYTE> CustomServerKeyIds;
    TArrayNoInit<FString> CustomServerKeyNames;
    TArrayNoInit<BYTE> CustomPlayerKeyIds;
    TArrayNoInit<FString> CustomPlayerKeyNames;
    TArrayNoInit<BYTE> CustomTeamKeyIds;
    TArrayNoInit<FString> CustomTeamKeyNames;
    TArrayNoInit<BYTE> InitialKeyIds;
    FStringNoInit ProductVersionID;
    FStringNoInit ProductRegionID;
    FStringNoInit BaseFilePlanetPatchURL;
    FScriptDelegate __OnQueryPatchResult__Delegate;
	   DECLARE_FUNCTION(execQueryPatch);
	   DECLARE_FUNCTION(execSetTeamAffiliation);
	   DECLARE_FUNCTION(execHTTPGetRequest);
	   DECLARE_FUNCTION(execSetDataPrivateRW);
	   DECLARE_FUNCTION(execFindTeam);
	   DECLARE_FUNCTION(execAuthenticateProfile);
	   DECLARE_FUNCTION(execRegisterUniqueNick);
	   DECLARE_FUNCTION(execDisconnectUserAccount);
	   DECLARE_FUNCTION(execConnectUserAccount);
	   DECLARE_FUNCTION(execCheckUserAccount);
	   DECLARE_FUNCTION(execCreateUserAccount);
	   DECLARE_FUNCTION(execSendStatSnapshot);
	   DECLARE_FUNCTION(execSetTeamStat);
	   DECLARE_FUNCTION(execSetPlayerStat);
	   DECLARE_FUNCTION(execSetServerStat);
	   DECLARE_FUNCTION(execStatsRemoveTeam);
	   DECLARE_FUNCTION(execStatsRemovePlayer);
	   DECLARE_FUNCTION(execStatsNewTeam);
	   DECLARE_FUNCTION(execStatsNewPlayer);
	   DECLARE_FUNCTION(execStatsGetStatResponse);
	   DECLARE_FUNCTION(execStatsGetPID);
	   DECLARE_FUNCTION(execStatsHasPIDAndResponse);
	   DECLARE_FUNCTION(execStatsNewGameStarted);
	   DECLARE_FUNCTION(execGetNextServer);
	   DECLARE_FUNCTION(execGetNumPotentialServers);
	   DECLARE_FUNCTION(execGetServerPort);
	   DECLARE_FUNCTION(execGetServerIpAddress);
	   DECLARE_FUNCTION(execCancelUpdate);
	   DECLARE_FUNCTION(execUpdateServer);
	   DECLARE_FUNCTION(execUpdateServerByIP);
	   DECLARE_FUNCTION(execClearServerList);
	   DECLARE_FUNCTION(execLANUpdateServerList);
	   DECLARE_FUNCTION(execUpdateServerList);
	   DECLARE_FUNCTION(execSendGameSpyGameModeChange);
	   DECLARE_FUNCTION(execGetPlayerObject);
	   DECLARE_FUNCTION(execGetLevelInfo);
	   DECLARE_FUNCTION(execInitGameSpyClient);
	  void	delegateOnQueryPatchResult(BITFIELD bNeeded, BITFIELD bMandatory, const FString& versionName, const FString& URL)
	  {
        UGameSpyManager_eventOnQueryPatchResult_Parms Parms;
		   Parms.bNeeded=bNeeded;
		   Parms.bMandatory=bMandatory;
		   Parms.versionName=versionName;
		   Parms.URL=URL;
		   ProcessDelegate(ENGINE_OnQueryPatchResult,&__OnQueryPatchResult__Delegate,&Parms);
	  }
	  void	eventQueryPatchCompleted(BITFIELD bNeeded, BITFIELD bMandatory, const FString& versionName, INT FilePlanetID, const FString& URL)
	  {
        UGameSpyManager_eventQueryPatchCompleted_Parms Parms;
		   Parms.bNeeded=bNeeded;
		   Parms.bMandatory=bMandatory;
		   Parms.versionName=versionName;
		   Parms.FilePlanetID=FilePlanetID;
		   Parms.URL=URL;
        ProcessEvent(FindFunctionChecked(ENGINE_QueryPatchCompleted),&Parms);
	  }
	  FString	eventGetPatchDownloadURL(INT FilePlanetID)
	  {
        UGameSpyManager_eventGetPatchDownloadURL_Parms Parms;
		   Parms.FilePlanetID=FilePlanetID;
        ProcessEvent(FindFunctionChecked(ENGINE_GetPatchDownloadURL),&Parms);
		   return Parms.ReturnValue;
	  }
	  FString	eventGetProductRegionID()
	  {
        UGameSpyManager_eventGetProductRegionID_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetProductRegionID),&Parms);
		   return Parms.ReturnValue;
	  }
	  FString	eventGetProductVersionID()
	  {
        UGameSpyManager_eventGetProductVersionID_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetProductVersionID),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventProfileCheckResult(BYTE Result, INT profileId)
	  {
        UGameSpyManager_eventProfileCheckResult_Parms Parms;
		   Parms.Result=Result;
		   Parms.profileId=profileId;
        ProcessEvent(FindFunctionChecked(ENGINE_ProfileCheckResult),&Parms);
	  }
	  void	eventProfileCreateResult(BYTE Result, INT profileId)
	  {
        UGameSpyManager_eventProfileCreateResult_Parms Parms;
		   Parms.Result=Result;
		   Parms.profileId=profileId;
        ProcessEvent(FindFunctionChecked(ENGINE_ProfileCreateResult),&Parms);
	  }
	  void	eventEmailAlreadyTaken()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_EmailAlreadyTaken),NULL);
	  }
	  FString	eventGetGameSpyPassword()
	  {
        UGameSpyManager_eventGetGameSpyPassword_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetGameSpyPassword),&Parms);
		   return Parms.ReturnValue;
	  }
	  FString	eventGetGameSpyProfileId()
	  {
        UGameSpyManager_eventGetGameSpyProfileId_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetGameSpyProfileId),&Parms);
		   return Parms.ReturnValue;
	  }
	  INT	eventGetNumTeams()
	  {
        UGameSpyManager_eventGetNumTeams_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetNumTeams),&Parms);
		   return Parms.ReturnValue;
	  }
	  FString	eventGetValueForTeamKey(INT Key, INT Index)
	  {
        UGameSpyManager_eventGetValueForTeamKey_Parms Parms;
		   Parms.Key=Key;
		   Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_GetValueForTeamKey),&Parms);
		   return Parms.ReturnValue;
	  }
	  FString	eventGetValueForPlayerKey(INT Key, INT Index)
	  {
        UGameSpyManager_eventGetValueForPlayerKey_Parms Parms;
		   Parms.Key=Key;
		   Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_GetValueForPlayerKey),&Parms);
		   return Parms.ReturnValue;
	  }
	  FString	eventGetValueForKey(INT Key)
	  {
        UGameSpyManager_eventGetValueForKey_Parms Parms;
		   Parms.Key=Key;
        ProcessEvent(FindFunctionChecked(ENGINE_GetValueForKey),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventUpdateComplete(BITFIELD bLAN)
	  {
        UGameSpyManager_eventUpdateComplete_Parms Parms;
		   Parms.bLAN=bLAN;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateComplete),&Parms);
	  }
	  void	eventUpdatedServerData(INT ServerID, const FString& ipAddress, INT Ping, BITFIELD bLAN, TArray<FString> serverData, TArray<FString> playerData, TArray<FString> teamData)
	  {
        UGameSpyManager_eventUpdatedServerData_Parms Parms;
		   Parms.ServerID=ServerID;
		   Parms.ipAddress=ipAddress;
		   Parms.Ping=Ping;
		   Parms.bLAN=bLAN;
		   Parms.serverData=serverData;
		   Parms.playerData=playerData;
		   Parms.teamData=teamData;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdatedServerData),&Parms);
	  }
	  void	eventSetTeamAffiliationResult(BYTE Result, const FString& teamTag, class APlayerReplicationInfo* PRI)
	  {
        UGameSpyManager_eventSetTeamAffiliationResult_Parms Parms;
		   Parms.Result=Result;
		   Parms.teamTag=teamTag;
		   Parms.PRI=PRI;
        ProcessEvent(FindFunctionChecked(ENGINE_SetTeamAffiliationResult),&Parms);
	  }
	  void	eventHTTPGetRequestResult(BITFIELD succeeded, const FString& ResponseData)
	  {
        UGameSpyManager_eventHTTPGetRequestResult_Parms Parms;
		   Parms.succeeded=succeeded;
		   Parms.ResponseData=ResponseData;
        ProcessEvent(FindFunctionChecked(ENGINE_HTTPGetRequestResult),&Parms);
	  }
	  void	eventSetDataPrivateRWResult(INT success)
	  {
        UGameSpyManager_eventSetDataPrivateRWResult_Parms Parms;
		   Parms.success=success;
        ProcessEvent(FindFunctionChecked(ENGINE_SetDataPrivateRWResult),&Parms);
	  }
	  void	eventFindTeamResult(INT TeamID)
	  {
        UGameSpyManager_eventFindTeamResult_Parms Parms;
		   Parms.TeamID=TeamID;
        ProcessEvent(FindFunctionChecked(ENGINE_FindTeamResult),&Parms);
	  }
	  void	eventAuthenticatedProfileResult(INT profileId, INT authenticated, const FString& Error)
	  {
        UGameSpyManager_eventAuthenticatedProfileResult_Parms Parms;
		   Parms.profileId=profileId;
		   Parms.authenticated=authenticated;
		   Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_AuthenticatedProfileResult),&Parms);
	  }
	  void	eventUniqueNickRegistrationResult(BYTE Result)
	  {
        UGameSpyManager_eventUniqueNickRegistrationResult_Parms Parms;
		   Parms.Result=Result;
        ProcessEvent(FindFunctionChecked(ENGINE_UniqueNickRegistrationResult),&Parms);
	  }
	  void	eventUserConnectionResult(BYTE Result, INT profileId, const FString& UniqueNick)
	  {
        UGameSpyManager_eventUserConnectionResult_Parms Parms;
		   Parms.Result=Result;
		   Parms.profileId=profileId;
		   Parms.UniqueNick=UniqueNick;
        ProcessEvent(FindFunctionChecked(ENGINE_UserConnectionResult),&Parms);
	  }
	  void	eventInitGameSpyData()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_InitGameSpyData),NULL);
	  }
	  void	eventOnLevelChange()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_OnLevelChange),NULL);
	  }
	  void	eventGameSpyInitialised()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_GameSpyInitialised),NULL);
	  }
	   DECLARE_CLASS(UGameSpyManager,UObject,0|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UGameSpyManager)
};

// Class	UHavokObject is declared in "..\Engine\Classes\HavokObject.uc"
class ENGINE_API	UHavokObject	: public UObject
{
public:
    BITFIELD hkInitCalled:1;
	   DECLARE_CLASS(UHavokObject,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UHavokObject)
};

// Class	UHavokRigidBody is declared in "..\Engine\Classes\HavokRigidBody.uc"
class ENGINE_API	UHavokRigidBody	: public UHavokObject
{
public:
    INT hkEntityPtr;
    INT hkUprightConstraintPtr;
    BITFIELD bHighDetailOnly:1;
    BITFIELD bClientOnly:1;
    FLOAT hkMass;
    BITFIELD hkStabilizedInertia:1;
    FLOAT hkFriction;
    FLOAT hkRestitution;
    FLOAT hkLinearDamping;
    FLOAT hkAngularDamping;
    BITFIELD hkActive:1;
    BITFIELD hkKeyframed:1;
    FVector hkLinearVel;
    FVector hkAngularVel;
    INT hkCollisionLayer;
    INT hkCollisionSystemGroup;
    INT hkCollisionSubpartID;
    INT hkCollisionSubpartIgnoreID;
    BYTE hkForceUpright;
    FLOAT hkForceUprightStrength;
    FLOAT hkForceUprightDamping;
	   DECLARE_CLASS(UHavokRigidBody,UHavokObject,0,Engine)
#	ifdef UNREAL_HAVOK
		void PostEditChange();
#	endif
};

// Class	UHavokSkeletalSystem is declared in "..\Engine\Classes\HavokSkeletalSystem.uc"
class ENGINE_API	UHavokSkeletalSystem	: public UHavokObject
{
public:
    INT RigidBodySystemNumber;
    INT RigidBodyRootBoneIndex;
    INT RigidBodyLastBoneIndex;
    INT CachedLastRigidBodyRootBoneIndex;
    BITFIELD useIntrusionDrivenUpdates:1;
    INT hkPhantom;
    FStringNoInit SkeletonPhysicsFile;
    BITFIELD hkActive:1;
    FLOAT hkJointFriction;
    FLOAT TearOffImpulseScale;
	   DECLARE_CLASS(UHavokSkeletalSystem,UHavokObject,0,Engine)
#ifdef UNREAL_HAVOK
	void PostEditChange();
#endif
};

// Class	UHavokVehicleWheel is declared in "..\Engine\Classes\HavokVehicleWheel.uc"
class ENGINE_API	UHavokVehicleWheel	: public UObject
{
public:
    FLOAT SuspensionStrength;
    FLOAT SuspensionDampingCompression;
    FLOAT SuspensionDampingRelaxation;
    FLOAT MaxBrakingTorque;
    BITFIELD HasHandbrake:1;
    FLOAT WheelTorqueRatio;
    FLOAT WheelRadius;
    FLOAT WheelWidth;
    INT WheelAxleNumber;
    FLOAT WheelMass;
    FLOAT WheelFriction;
    FLOAT WheelViscosityFriction;
    BYTE SteerType;
    FName BoneName;
    FVector BoneOffset;
    FLOAT SuspensionTravel;
    FLOAT SuspensionOffset;
    FName SupportBoneName;
    BYTE SupportBoneAxis;
    FVector WheelPosition;
    FLOAT SupportPivotDistance;
    FLOAT SuspensionPosition;
    FLOAT CurrentRotation;
	   DECLARE_CLASS(UHavokVehicleWheel,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UHavokVehicleWheel)
};

// Class	UI3DL2Listener is declared in "..\Engine\Classes\I3DL2Listener.uc"
class ENGINE_API	UI3DL2Listener	: public UObject
{
public:
    FLOAT EnvironmentSize;
    FLOAT EnvironmentDiffusion;
    INT Room;
    INT RoomHF;
    INT RoomLF;
    FLOAT DecayTime;
    FLOAT DecayHFRatio;
    FLOAT DecayLFRatio;
    INT Reflections;
    FLOAT ReflectionsDelay;
    FVector ReflectionsPan;
    INT Reverb;
    FLOAT ReverbDelay;
    FVector ReverbPan;
    FLOAT EchoTime;
    FLOAT EchoDepth;
    FLOAT ModulationTime;
    FLOAT ModulationDepth;
    FLOAT RoomRolloffFactor;
    FLOAT AirAbsorptionHF;
    FLOAT HFReference;
    FLOAT LFReference;
    BITFIELD bDecayTimeScale:1;
    BITFIELD bReflectionsScale:1;
    BITFIELD bReflectionsDelayScale:1;
    BITFIELD bReverbScale:1;
    BITFIELD bReverbDelayScale:1;
    BITFIELD bEchoTimeScale:1;
    BITFIELD bModulationTimeScale:1;
    BITFIELD bDecayHFLimit:1;
    INT Environment;
    INT Updated;
	   DECLARE_CLASS(UI3DL2Listener,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UI3DL2Listener)
};

// Class	IIEffectObserver is declared in "..\Engine\Classes\IEffectObserver.uc"
class ENGINE_API	IIEffectObserver	: public UObject
{
public:
	  void OnEffectInitialized(class AActor* inInitializedEffect)
	  {
        IIEffectObserver_OnEffectInitialized_Parms Parms;
		   Parms.inInitializedEffect=inInitializedEffect;
        ProcessFunction(FindFunctionChecked(ENGINE_OnEffectInitialized),&Parms);
	  }
	  void OnEffectStopped(class AActor* inStoppedEffect, BITFIELD Completed)
	  {
        IIEffectObserver_OnEffectStopped_Parms Parms;
		   Parms.inStoppedEffect=inStoppedEffect;
		   Parms.Completed=Completed;
        ProcessFunction(FindFunctionChecked(ENGINE_OnEffectStopped),&Parms);
	  }
	  void OnEffectStarted(class AActor* inStartedEffect)
	  {
        IIEffectObserver_OnEffectStarted_Parms Parms;
		   Parms.inStartedEffect=inStartedEffect;
        ProcessFunction(FindFunctionChecked(ENGINE_OnEffectStarted),&Parms);
	  }
	   DECLARE_CLASS(IIEffectObserver,UObject,0|CLASS_Interface,Engine)
	   NO_DEFAULT_CONSTRUCTOR(IIEffectObserver)
};

// Class	UIGEffectsSystemBase is declared in "..\Engine\Classes\IGEffectsSystemBase.uc"
class ENGINE_API	UIGEffectsSystemBase	: public UObject
{
public:
	   DECLARE_CLASS(UIGEffectsSystemBase,UObject,0|CLASS_Transient,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UIGEffectsSystemBase)
};

// Class	IIInterestedActorDestroyed is declared in "..\Engine\Classes\IInterestedActorDestroyed.uc"
class ENGINE_API	IIInterestedActorDestroyed	: public UObject
{
public:
	  void OnOtherActorDestroyed(class AActor* ActorBeingDestroyed)
	  {
        IIInterestedActorDestroyed_OnOtherActorDestroyed_Parms Parms;
		   Parms.ActorBeingDestroyed=ActorBeingDestroyed;
        ProcessFunction(FindFunctionChecked(ENGINE_OnOtherActorDestroyed),&Parms);
	  }
	   DECLARE_CLASS(IIInterestedActorDestroyed,UObject,0|CLASS_Interface,Engine)
	   NO_DEFAULT_CONSTRUCTOR(IIInterestedActorDestroyed)
};

// Class	IIInterestedPawnDied is declared in "..\Engine\Classes\IInterestedPawnDied.uc"
class ENGINE_API	IIInterestedPawnDied	: public UObject
{
public:
	  void OnOtherPawnDied(class APawn* DeadPawn)
	  {
        IIInterestedPawnDied_OnOtherPawnDied_Parms Parms;
		   Parms.DeadPawn=DeadPawn;
        ProcessFunction(FindFunctionChecked(ENGINE_OnOtherPawnDied),&Parms);
	  }
	   DECLARE_CLASS(IIInterestedPawnDied,UObject,0|CLASS_Interface,Engine)
	   NO_DEFAULT_CONSTRUCTOR(IIInterestedPawnDied)
};

// Class	UInteractions is declared in "..\Engine\Classes\Interactions.uc"
class ENGINE_API	UInteractions	: public UObject
{
public:
	   DECLARE_CLASS(UInteractions,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UInteractions)
};

// Class	UInteraction is declared in "..\Engine\Classes\Interaction.uc"
class ENGINE_API	UInteraction	: public UInteractions
{
public:
    BITFIELD bActive:1;
    BITFIELD bVisible:1;
    BITFIELD bRequiresTick:1;
    BITFIELD bNativeEvents:1;
    class UPlayer* ViewportOwner;
    class UInteractionMaster* Master;
	   DECLARE_FUNCTION(execScreenToWorld);
	   DECLARE_FUNCTION(execWorldToScreen);
	   DECLARE_FUNCTION(execConsoleCommand);
	   DECLARE_FUNCTION(execInitialize);
	  void	eventInitialized()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_Initialized),NULL);
	  }
	   DECLARE_CLASS(UInteraction,UInteractions,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UInteraction)
};

// Class	UBaseGUIController is declared in "..\Engine\Classes\BaseGUIController.uc"
class ENGINE_API	UBaseGUIController	: public UInteraction
{
public:
    class UMaterial* DefaultPens[3];
    BITFIELD bIsConsole:1;
    BITFIELD bHackDoNotRenderGUIPages:1;
    FScriptDelegate __OnAdminReply__Delegate;
    FScriptDelegate __OnPostPrecache__Delegate;
	  BITFIELD	eventIsPageActive(const FString& menuClass)
	  {
        UBaseGUIController_eventIsPageActive_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.menuClass=menuClass;
        ProcessEvent(FindFunctionChecked(ENGINE_IsPageActive),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventOnNetworkBrowse(const FString& URL, const FString& ProfileOption, BITFIELD bSelectProfile)
	  {
        UBaseGUIController_eventOnNetworkBrowse_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.URL=URL;
		   Parms.ProfileOption=ProfileOption;
		   Parms.bSelectProfile=bSelectProfile;
        ProcessEvent(FindFunctionChecked(ENGINE_OnNetworkBrowse),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventOnProgress(const FString& Str1, const FString& Str2)
	  {
        UBaseGUIController_eventOnProgress_Parms Parms;
		   Parms.Str1=Str1;
		   Parms.Str2=Str2;
        ProcessEvent(FindFunctionChecked(ENGINE_OnProgress),&Parms);
	  }
	  void	eventOnMojoFinished()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_OnMojoFinished),NULL);
	  }
	  void	eventInitializeController()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_InitializeController),NULL);
	  }
	  void	eventCloseAll()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_CloseAll),NULL);
	  }
	  BITFIELD	eventCloseMenu()
	  {
        UBaseGUIController_eventCloseMenu_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CloseMenu),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventReplaceMenu(const FString& NewMenuName, const FString& MenuNameOverride, const FString& Param1, const FString& Param2, INT param3)
	  {
        UBaseGUIController_eventReplaceMenu_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.NewMenuName=NewMenuName;
		   Parms.MenuNameOverride=MenuNameOverride;
		   Parms.Param1=Param1;
		   Parms.Param2=Param2;
		   Parms.param3=param3;
        ProcessEvent(FindFunctionChecked(ENGINE_ReplaceMenu),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventAutoLoadMenuClass(class UClass* menuClass)
	  {
        UBaseGUIController_eventAutoLoadMenuClass_Parms Parms;
		   Parms.menuClass=menuClass;
        ProcessEvent(FindFunctionChecked(ENGINE_AutoLoadMenuClass),&Parms);
	  }
	  void	eventAutoLoadMenus()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_AutoLoadMenus),NULL);
	  }
	  BITFIELD	eventOpenMenu(const FString& NewMenuName, const FString& MenuNameOverride, const FString& Param1, const FString& Param2, INT param3)
	  {
        UBaseGUIController_eventOpenMenu_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.NewMenuName=NewMenuName;
		   Parms.MenuNameOverride=MenuNameOverride;
		   Parms.Param1=Param1;
		   Parms.Param2=Param2;
		   Parms.param3=param3;
        ProcessEvent(FindFunctionChecked(ENGINE_OpenMenu),&Parms);
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventShouldSuppressLevelRender()
	  {
        UBaseGUIController_eventShouldSuppressLevelRender_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_ShouldSuppressLevelRender),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	delegateOnPostPrecache()
	  {
		   ProcessDelegate(ENGINE_OnPostPrecache,&__OnPostPrecache__Delegate,NULL);
	  }
	  void	eventPostPrecache()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_PostPrecache),NULL);
	  }
	  void	eventPostLevelChange(class ALevelInfo* newLevel, BITFIELD bSaveGame)
	  {
        UBaseGUIController_eventPostLevelChange_Parms Parms;
		   Parms.newLevel=newLevel;
		   Parms.bSaveGame=bSaveGame;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLevelChange),&Parms);
	  }
	  void	eventPreLevelChange(const FString& DestURL, class ULevelSummary* NewSummary)
	  {
        UBaseGUIController_eventPreLevelChange_Parms Parms;
		   Parms.DestURL=DestURL;
		   Parms.NewSummary=NewSummary;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLevelChange),&Parms);
	  }
	  void	delegateOnAdminReply(const FString& Reply)
	  {
        UBaseGUIController_eventOnAdminReply_Parms Parms;
		   Parms.Reply=Reply;
		   ProcessDelegate(ENGINE_OnAdminReply,&__OnAdminReply__Delegate,&Parms);
	  }
	   DECLARE_CLASS(UBaseGUIController,UInteraction,0,Engine)
		virtual void InitializeController();
};

// Class	UInteractionMaster is declared in "..\Engine\Classes\InteractionMaster.uc"
class ENGINE_API	UInteractionMaster	: public UInteractions
{
public:
    class UClient* Client;
    class UInteraction* BaseMenu;
    class UInteraction* Console;
    TArrayNoInit<class UInteraction*> GlobalInteractions;
    BITFIELD bRequireRawJoystick:1;
	   DECLARE_FUNCTION(execGetKeyFromBinding);
	   DECLARE_FUNCTION(execTravel);
	  void	eventProcess_Message(const FString& msg, FLOAT MsgLife, TArray<class UInteraction*> InteractionArray)
	  {
        UInteractionMaster_eventProcess_Message_Parms Parms;
		   Parms.msg=msg;
		   Parms.MsgLife=MsgLife;
		   Parms.InteractionArray=InteractionArray;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_Message),&Parms);
	  }
	  void	eventProcess_Tick(TArray<class UInteraction*> InteractionArray, FLOAT DeltaTime)
	  {
        UInteractionMaster_eventProcess_Tick_Parms Parms;
		   Parms.InteractionArray=InteractionArray;
		   Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_Tick),&Parms);
	  }
	  void	eventProcess_PostRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
	  {
        UInteractionMaster_eventProcess_PostRender_Parms Parms;
		   Parms.InteractionArray=InteractionArray;
		   Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_PostRender),&Parms);
	  }
	  void	eventProcess_PreRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
	  {
        UInteractionMaster_eventProcess_PreRender_Parms Parms;
		   Parms.InteractionArray=InteractionArray;
		   Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_PreRender),&Parms);
	  }
	  BITFIELD	eventProcess_KeyEvent(TArray<class UInteraction*> InteractionArray, BYTE& Key, BYTE& Action, FLOAT Delta)
	  {
        UInteractionMaster_eventProcess_KeyEvent_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.InteractionArray=InteractionArray;
		   Parms.Key=Key;
		   Parms.Action=Action;
		   Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_KeyEvent),&Parms);
		   Key=Parms.Key;
		   Action=Parms.Action;
		   return Parms.ReturnValue;
	  }
	  BITFIELD	eventProcess_KeyType(TArray<class UInteraction*> InteractionArray, BYTE& Key, const FString& Unicode)
	  {
        UInteractionMaster_eventProcess_KeyType_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.InteractionArray=InteractionArray;
		   Parms.Key=Key;
		   Parms.Unicode=Unicode;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_KeyType),&Parms);
		   Key=Parms.Key;
		   return Parms.ReturnValue;
	  }
	  void	eventSetFocusTo(class UInteraction* Inter, class UPlayer* ViewportOwner)
	  {
        UInteractionMaster_eventSetFocusTo_Parms Parms;
		   Parms.Inter=Inter;
		   Parms.ViewportOwner=ViewportOwner;
        ProcessEvent(FindFunctionChecked(ENGINE_SetFocusTo),&Parms);
	  }
	  void	eventRemoveInteraction(class UInteraction* RemoveMe)
	  {
        UInteractionMaster_eventRemoveInteraction_Parms Parms;
		   Parms.RemoveMe=RemoveMe;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveInteraction),&Parms);
	  }
	  class UInteraction*	eventAddInteraction(const FString& InteractionName, class UPlayer* AttachTo)
	  {
        UInteractionMaster_eventAddInteraction_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.InteractionName=InteractionName;
		   Parms.AttachTo=AttachTo;
        ProcessEvent(FindFunctionChecked(ENGINE_AddInteraction),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(UInteractionMaster,UInteractions,0|CLASS_Transient,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UInteractionMaster)
};

// Class	UKarmaParamsCollision is declared in "..\Engine\Classes\KarmaParamsCollision.uc"
class ENGINE_API	UKarmaParamsCollision	: public UObject
{
public:
	   DECLARE_CLASS(UKarmaParamsCollision,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UKarmaParamsCollision)
};

// Class	UKarmaParams is declared in "..\Engine\Classes\KarmaParams.uc"
class ENGINE_API	UKarmaParams	: public UKarmaParamsCollision
{
public:
	   DECLARE_CLASS(UKarmaParams,UKarmaParamsCollision,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UKarmaParams)
};

// Class	UKarmaParamsRBFull is declared in "..\Engine\Classes\KarmaParamsRBFull.uc"
class ENGINE_API	UKarmaParamsRBFull	: public UKarmaParams
{
public:
	   DECLARE_CLASS(UKarmaParamsRBFull,UKarmaParams,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UKarmaParamsRBFull)
};

// Class	UKarmaParamsSkel is declared in "..\Engine\Classes\KarmaParamsSkel.uc"
class ENGINE_API	UKarmaParamsSkel	: public UKarmaParams
{
public:
	   DECLARE_CLASS(UKarmaParamsSkel,UKarmaParams,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UKarmaParamsSkel)
};

// Class	ULevelSummary is declared in "..\Engine\Classes\LevelSummary.uc"
class ENGINE_API	ULevelSummary	: public UObject
{
public:
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit LevelEnterText;
    TArrayNoInit<class UClass*> SupportedModes;
    TArrayNoInit<INT> SupportedModesScoreLimits;
    FStringNoInit Description;
    class UMaterial* Screenshot;
    INT IdealPlayerCountMin;
    INT IdealPlayerCountMax;
    FStringNoInit ExtraInfo;
    BITFIELD HideFromMenus:1;
	   DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(ULevelSummary)
};

// Class	UCombiner is declared in "..\Engine\Classes\Combiner.uc"
class ENGINE_API	UCombiner	: public UMaterial
{
public:
    BYTE CombineOperation;
    BYTE AlphaOperation;
    class UMaterial* Material1;
    class UMaterial* Material2;
    class UMaterial* Mask;
    BITFIELD InvertMask:1;
    BITFIELD Modulate2X:1;
    BITFIELD Modulate4X:1;
	   DECLARE_CLASS(UCombiner,UMaterial,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UCombiner)
};

// Class	UModifier is declared in "..\Engine\Classes\Modifier.uc"
class ENGINE_API	UModifier	: public UMaterial
{
public:
    class UMaterial* Material;
	   DECLARE_CLASS(UModifier,UMaterial,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UModifier)
};

// Class	UColorModifier is declared in "..\Engine\Classes\ColorModifier.uc"
class ENGINE_API	UColorModifier	: public UModifier
{
public:
    FColor Color;
    BITFIELD RenderTwoSided:1;
    BITFIELD AlphaBlend:1;
	   DECLARE_CLASS(UColorModifier,UModifier,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UColorModifier)
};

// Class	UFinalBlend is declared in "..\Engine\Classes\FinalBlend.uc"
class ENGINE_API	UFinalBlend	: public UModifier
{
public:
    BYTE FrameBufferBlending;
    BITFIELD ZWrite:1;
    BITFIELD ZTest:1;
    BITFIELD AlphaTest:1;
    BITFIELD TwoSided:1;
    BYTE AlphaRef;
	   DECLARE_CLASS(UFinalBlend,UModifier,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UFinalBlend)
};

// Class	UMaterialSequence is declared in "..\Engine\Classes\MaterialSequence.uc"
class ENGINE_API	UMaterialSequence	: public UModifier
{
public:
    TArrayNoInit<FMaterialSequenceItem> SequenceItems;
    BYTE TriggerAction;
    BITFIELD Loop:1;
    BITFIELD Paused:1;
    FLOAT CurrentTime;
    FLOAT LastTime;
    FLOAT TotalTime;
	   DECLARE_CLASS(UMaterialSequence,UModifier,0,Engine)
	virtual void PostEditChange();
	virtual UBOOL CheckCircularReferences( TArray<class UMaterial*>& History );
	virtual void PreSetMaterial(FLOAT TimeSeconds);
	virtual void Serialize(FArchive& Ar);
#if IG_SHARED // ckline: support glow in material sequences
    virtual UBOOL IsGlowMaterial()
    {
	    return (SequenceItems.Num() && SequenceItems(0).Material) ? SequenceItems(0).Material->IsGlowMaterial() : 0;
    }
    virtual UBOOL IsBumpMapped()
    {
	    return (SequenceItems.Num() && SequenceItems(0).Material) ? SequenceItems(0).Material->IsBumpMapped() : 0;
    }
#endif
};

// Class	UMaterialSwitch is declared in "..\Engine\Classes\MaterialSwitch.uc"
class ENGINE_API	UMaterialSwitch	: public UModifier
{
public:
    INT Current;
    TArrayNoInit<class UMaterial*> Materials;
	   DECLARE_CLASS(UMaterialSwitch,UModifier,0,Engine)
	virtual void PostEditChange();
	virtual UBOOL CheckCircularReferences( TArray<class UMaterial*>& History );
};

// Class	UOpacityModifier is declared in "..\Engine\Classes\OpacityModifier.uc"
class ENGINE_API	UOpacityModifier	: public UModifier
{
public:
    class UMaterial* Opacity;
    BITFIELD bOverrideTexModifier:1;
	   DECLARE_CLASS(UOpacityModifier,UModifier,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UOpacityModifier)
};

// Class	UTexModifier is declared in "..\Engine\Classes\TexModifier.uc"
class ENGINE_API	UTexModifier	: public UModifier
{
public:
    BYTE TexCoordSource;
    BYTE TexCoordCount;
    BITFIELD TexCoordProjected:1;
	   DECLARE_CLASS(UTexModifier,UModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds) { return NULL; }

	// Material interface.
	virtual INT MaterialUSize();
	virtual INT MaterialVSize();
	virtual BYTE RequiredUVStreams();
	virtual UBOOL GetValidated();
	virtual void SetValidated( UBOOL InValidated );
};

// Class	UTexCoordSource is declared in "..\Engine\Classes\TexCoordSource.uc"
class ENGINE_API	UTexCoordSource	: public UTexModifier
{
public:
    INT SourceChannel;
	   DECLARE_CLASS(UTexCoordSource,UTexModifier,0,Engine)
	void PostEditChange();
};

// Class	UTexEnvMap is declared in "..\Engine\Classes\TexEnvMap.uc"
class ENGINE_API	UTexEnvMap	: public UTexModifier
{
public:
    BYTE EnvMapType;
	   DECLARE_CLASS(UTexEnvMap,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

// Class	UTexMatrix is declared in "..\Engine\Classes\TexMatrix.uc"
class ENGINE_API	UTexMatrix	: public UTexModifier
{
public:
    FMatrix Matrix;
	   DECLARE_CLASS(UTexMatrix,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds) { return &Matrix; }
};

// Class	UTexOscillator is declared in "..\Engine\Classes\TexOscillator.uc"
class ENGINE_API	UTexOscillator	: public UTexModifier
{
public:
    FLOAT UOscillationRate;
    FLOAT VOscillationRate;
    FLOAT UOscillationPhase;
    FLOAT VOscillationPhase;
    FLOAT UOscillationAmplitude;
    FLOAT VOscillationAmplitude;
    BYTE UOscillationType;
    BYTE VOscillationType;
    FLOAT UOffset;
    FLOAT VOffset;
    FMatrix M;
    FLOAT LastSu;
    FLOAT LastSv;
    FLOAT CurrentUJitter;
    FLOAT CurrentVJitter;
	   DECLARE_CLASS(UTexOscillator,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
	// UObject interface
	virtual void PostEditChange();
};

// Class	UTexOscillatorTriggered is declared in "..\Engine\Classes\TexOscillatorTriggered.uc"
class ENGINE_API	UTexOscillatorTriggered	: public UTexOscillator
{
public:
    BYTE RetriggerAction;
    FLOAT StopAfterPeriod;
    FLOAT TriggeredTime;
    BITFIELD Reverse:1;
    BITFIELD Triggered:1;
	   DECLARE_CLASS(UTexOscillatorTriggered,UTexOscillator,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

// Class	UTexPanner is declared in "..\Engine\Classes\TexPanner.uc"
class ENGINE_API	UTexPanner	: public UTexModifier
{
public:
    FRotator PanDirection;
    FLOAT PanRate;
    FMatrix M;
	   DECLARE_CLASS(UTexPanner,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

// Class	UTexPannerTriggered is declared in "..\Engine\Classes\TexPannerTriggered.uc"
class ENGINE_API	UTexPannerTriggered	: public UTexPanner
{
public:
    BYTE RetriggerAction;
    FLOAT StopAfterPeriod;
    FLOAT TriggeredTime;
    BITFIELD Reverse:1;
    BITFIELD Triggered:1;
	   DECLARE_CLASS(UTexPannerTriggered,UTexPanner,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

// Class	UTexRotator is declared in "..\Engine\Classes\TexRotator.uc"
class ENGINE_API	UTexRotator	: public UTexModifier
{
public:
    FMatrix M;
    BYTE TexRotationType;
    FRotator Rotation;
    BITFIELD ConstantRotation:1;
    FLOAT UOffset;
    FLOAT VOffset;
    FRotator OscillationRate;
    FRotator OscillationAmplitude;
    FRotator OscillationPhase;
	   DECLARE_CLASS(UTexRotator,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
	void PostLoad()
	{
		Super::PostLoad();
		//!!OLDVER
		if( ConstantRotation )
		{
			ConstantRotation = 0;
			TexRotationType = TR_ConstantlyRotating;
		}
	}
};

// Class	UTexScaler is declared in "..\Engine\Classes\TexScaler.uc"
class ENGINE_API	UTexScaler	: public UTexModifier
{
public:
    FMatrix M;
    FLOAT UScale;
    FLOAT VScale;
    FLOAT UOffset;
    FLOAT VOffset;
	   DECLARE_CLASS(UTexScaler,UTexModifier,0,Engine)
	// UTexModifier interface
	virtual FMatrix* GetMatrix(FLOAT TimeSeconds);
};

// Class	UScriptedTexture is declared in "..\Engine\Classes\ScriptedTexture.uc"
class ENGINE_API	UScriptedTexture	: public UBitmapMaterial
{
public:
    INT RenderTarget;
    class UViewport* RenderViewport;
    class AActor* Client;
    BITFIELD bSerializeClient:1;
    BITFIELD bNotifyClientBeforeRendering:1;
    INT Revision;
    INT OldRevision;
    INT Invalid;
	   DECLARE_FUNCTION(execDrawPortal);
	   DECLARE_FUNCTION(execDrawTile);
	   DECLARE_FUNCTION(execTextSize);
	   DECLARE_FUNCTION(execDrawText);
	   DECLARE_FUNCTION(execSetSize);
	   DECLARE_CLASS(UScriptedTexture,UBitmapMaterial,0,Engine)
	void Render(FRenderInterface* RI);

	virtual void Serialize( FArchive& Ar );
	virtual UBitmapMaterial* Get(FTime Time,UViewport* Viewport);
	virtual FBaseTexture* GetRenderInterface();
	virtual void Destroy();
	virtual void PostEditChange();
    
	// IG_SHARED note: we have moved code out of execSetSize() and into its own function in UnScriptedTexture.cpp
    void SetSize(INT Width, INT Height);
};

// Class	UShadowBitmapMaterial is declared in "..\Engine\Classes\ShadowBitmapMaterial.uc"
class ENGINE_API	UShadowBitmapMaterial	: public UBitmapMaterial
{
public:
    INT TextureInterfaces[2];
    class AActor* ShadowActor;
    FVector LightDirection;
    FLOAT LightDistance;
    FLOAT LightFOV;
    BITFIELD Dirty:1;
    BITFIELD Invalid:1;
    BITFIELD bBlobShadow:1;
    FLOAT CullDistance;
    BYTE ShadowDarkness;
    class UBitmapMaterial* BlobShadow;
	   DECLARE_FUNCTION(execSetResolution);
	   DECLARE_FUNCTION(execGetShadowLocation);
	   DECLARE_CLASS(UShadowBitmapMaterial,UBitmapMaterial,0,Engine)
	virtual void Destroy();

	virtual FBaseTexture* GetRenderInterface();
	virtual UBitmapMaterial* Get(FTime Time,UViewport* Viewport);
#if IG_SHARED	// rowan: GetShadowLocation, needed for shadow projector culling
	FVector	GetShadowLocation();
#endif

#if IG_DYNAMIC_SHADOW_DETAIL	// rowan: native change shadow resolution
	void SetResolution(INT Resolution);
#endif
};

// Class	UConstantMaterial is declared in "..\Engine\Classes\ConstantMaterial.uc"
class ENGINE_API	UConstantMaterial	: public URenderedMaterial
{
public:
	   DECLARE_CLASS(UConstantMaterial,URenderedMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds) { return FColor(0,0,0,0); }
};

// Class	UConstantColor is declared in "..\Engine\Classes\ConstantColor.uc"
class ENGINE_API	UConstantColor	: public UConstantMaterial
{
public:
    FColor Color;
	   DECLARE_CLASS(UConstantColor,UConstantMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds) { return Color; }
};

// Class	UFadeColor is declared in "..\Engine\Classes\FadeColor.uc"
class ENGINE_API	UFadeColor	: public UConstantMaterial
{
public:
    FColor Color1;
    FColor Color2;
    FLOAT FadePeriod;
    FLOAT FadePhase;
    BYTE ColorFadeType;
	   DECLARE_CLASS(UFadeColor,UConstantMaterial,0,Engine)
	//
	// UConstantMaterial interface
	//
	virtual FColor GetColor(FLOAT TimeSeconds);
};

// Class	UParticleMaterial is declared in "..\Engine\Classes\ParticleMaterial.uc"
class ENGINE_API	UParticleMaterial	: public URenderedMaterial
{
public:
    INT ParticleBlending;
    INT BlendBetweenSubdivisions;
    INT RenderTwoSided;
    INT UseTFactor;
    class UBitmapMaterial* BitmapMaterial;
    INT AlphaTest;
    INT AlphaRef;
    INT ZTest;
    INT ZWrite;
    INT Wireframe;
    BITFIELD AcceptsProjectors:1;
    INT NumProjectors;
    FParticleProjectorInfo Projectors[8];
	   DECLARE_CLASS(UParticleMaterial,URenderedMaterial,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UParticleMaterial)
};

// Class	UProjectorMaterial is declared in "..\Engine\Classes\ProjectorMaterial.uc"
class ENGINE_API	UProjectorMaterial	: public URenderedMaterial
{
public:
    class UBitmapMaterial* Gradient;
    class UMaterial* Projected;
    class UMaterial* BaseMaterial;
    BYTE BaseMaterialBlending;
    BYTE FrameBufferBlending;
    FMatrix Matrix;
    FMatrix GradientMatrix;
    BITFIELD bProjected:1;
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bGradient:1;
    BITFIELD bProjectOnAlpha:1;
    BITFIELD bProjectOnBackfaces:1;
    BITFIELD bStaticProjector:1;
    BITFIELD bTwoSided:1;
	   DECLARE_CLASS(UProjectorMaterial,URenderedMaterial,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UProjectorMaterial)
};

// Class	UShader is declared in "..\Engine\Classes\Shader.uc"
class ENGINE_API	UShader	: public URenderedMaterial
{
public:
    class UMaterial* Diffuse;
    class UMaterial* Opacity;
    class UMaterial* NormalMap;
    class UCubemap* PerPixelReflection;
    class UMaterial* PerPixelReflectionMask;
    BYTE PerPixelSpecular;
    BYTE PerPixelSpecularType;
    BYTE PerPixelSpecularBrightness;
    class UMaterial* Specular;
    class UMaterial* SpecularityMask;
    class UMaterial* SelfIllumination;
    class UMaterial* SelfIlluminationMask;
    BYTE GlowBrightness;
    class UMaterial* GlowMapOverride;
    class UMaterial* GlowMaskOverride;
    class UMaterial* Detail;
    FLOAT DetailScale;
    BYTE OutputBlending;
    BITFIELD bAllowSelfIlluminationLOD:1;
    BITFIELD TwoSided:1;
    BITFIELD Wireframe:1;
    BITFIELD ModulateStaticLighting2X:1;
    BITFIELD PerformLightingOnSpecularPass:1;
	   DECLARE_CLASS(UShader,URenderedMaterial,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UShader)
};

// Class	UTerrainMaterial is declared in "..\Engine\Classes\TerrainMaterial.uc"
class ENGINE_API	UTerrainMaterial	: public URenderedMaterial
{
public:
    TArrayNoInit<FTerrainMaterialLayer> Layers;
    class UTexture* MacroTexture;
    FMatrix MacroTextureTransform;
    BITFIELD ForceFogOverride:1;
    BITFIELD DisableLayer2xModulate:1;
    BYTE RenderMethod;
    BITFIELD FirstPass:1;
	   DECLARE_CLASS(UTerrainMaterial,URenderedMaterial,0,Engine)
	virtual UMaterial* CheckFallback();
	virtual UBOOL HasFallback();
};

// Class	UVertexColor is declared in "..\Engine\Classes\VertexColor.uc"
class ENGINE_API	UVertexColor	: public URenderedMaterial
{
public:
	   DECLARE_CLASS(UVertexColor,URenderedMaterial,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UVertexColor)
};

// Class	UMeshObject is declared in "..\Engine\Classes\MeshObject.uc"
class ENGINE_API	UMeshObject	: public UObject
{
public:
	   DECLARE_CLASS(UMeshObject,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMeshObject)
};

// Class	UMessage is declared in "..\Engine\Classes\Messaging\Message.uc"
class ENGINE_API	UMessage	: public UObject
{
public:
    class UClass* specificTo;
	   DECLARE_FUNCTION(execAllocate);
	   DECLARE_CLASS(UMessage,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMessage)
};

// Class	UMessagePostRender is declared in "..\Engine\Classes\Messaging\MessagePostRender.uc"
class ENGINE_API	UMessagePostRender	: public UMessage
{
public:
    class UCanvas* Canvas;
	   DECLARE_CLASS(UMessagePostRender,UMessage,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMessagePostRender)
};

// Class	UMessagePostRenderFinal is declared in "..\Engine\Classes\Messaging\MessagePostRenderFinal.uc"
class ENGINE_API	UMessagePostRenderFinal	: public UMessage
{
public:
    class UCanvas* Canvas;
	   DECLARE_CLASS(UMessagePostRenderFinal,UMessage,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMessagePostRenderFinal)
};

// Class	UMessagePreRender is declared in "..\Engine\Classes\Messaging\MessagePreRender.uc"
class ENGINE_API	UMessagePreRender	: public UMessage
{
public:
    class UCanvas* Canvas;
	   DECLARE_CLASS(UMessagePreRender,UMessage,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMessagePreRender)
};

// Class	UMessageDispatcher is declared in "..\Engine\Classes\Messaging\MessageDispatcher.uc"
class ENGINE_API	UMessageDispatcher	: public UObject
{
public:
	   DECLARE_FUNCTION(execdeleteMessage);
	   DECLARE_FUNCTION(execdispatch);
	   DECLARE_FUNCTION(execregisterReceiver);
	   DECLARE_CLASS(UMessageDispatcher,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMessageDispatcher)
};

// Class	UMovementObject is declared in "..\Engine\Classes\Movement\MovementObject.uc"
class ENGINE_API	UMovementObject	: public UObject
{
public:
	   DECLARE_FUNCTION(execcalculateExtents);
	   DECLARE_FUNCTION(execwake);
	   DECLARE_FUNCTION(execaddForce);
	   DECLARE_FUNCTION(execsetAcceleration);
	   DECLARE_FUNCTION(execaddImpulse);
	   DECLARE_FUNCTION(execAddVelocity);
	   DECLARE_FUNCTION(execsetVelocity);
	   DECLARE_FUNCTION(execgetAccumulator);
	   DECLARE_FUNCTION(execsetAccumulator);
	   DECLARE_FUNCTION(execgetEndPosition);
	   DECLARE_FUNCTION(execgetStartPosition);
	   DECLARE_FUNCTION(execsetStartPosition);
	   DECLARE_FUNCTION(execsetEndPosition);
	   DECLARE_FUNCTION(execsetPosition);
	   DECLARE_FUNCTION(execforceMovementState);
	   DECLARE_FUNCTION(execsetInput);
	   DECLARE_CLASS(UMovementObject,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMovementObject)
};

// Class	UParticleEmitter is declared in "..\Engine\Classes\ParticleEmitter.uc"
class ENGINE_API	UParticleEmitter	: public UObject
{
public:
    FVector Acceleration;
    BITFIELD UseCollision:1;
    FVector ExtentMultiplier;
    FRangeVector DampingFactorRange;
    BITFIELD UseCollisionPlanes:1;
    TArrayNoInit<FPlane> CollisionPlanes;
    BITFIELD UseMaxCollisions:1;
    FRange MaxCollisions;
    INT SpawnFromOtherEmitter;
    INT SpawnAmount;
    FRangeVector SpawnedVelocityScaleRange;
    BITFIELD UseSpawnedVelocityScale:1;
    BITFIELD UseColorScale:1;
    TArrayNoInit<FParticleColorScale> ColorScale;
    FLOAT ColorScaleRepeats;
    FRangeVector ColorMultiplierRange;
    FPlane FadeOutFactor;
    FLOAT FadeOutStartTime;
    BITFIELD FadeOut:1;
    FPlane FadeInFactor;
    FLOAT FadeInEndTime;
    BITFIELD FadeIn:1;
    BITFIELD UseActorForces:1;
    BYTE CoordinateSystem;
    INT MaxParticles;
    BITFIELD ResetAfterChange:1;
    BYTE EffectAxis;
    BITFIELD RespawnDeadParticles:1;
    BITFIELD AutoDestroy:1;
    BITFIELD AutoReset:1;
    BITFIELD Disabled:1;
    BITFIELD DisableFogging:1;
    FRange AutoResetTimeRange;
    FStringNoInit Name;
    FVector StartLocationOffset;
    FRangeVector StartLocationRange;
    INT AddLocationFromOtherEmitter;
    BYTE StartLocationShape;
    FRange SphereRadiusRange;
    FRangeVector StartLocationPolarRange;
    FRange StartMassRange;
    class UStaticMesh* MeshSpawningStaticMesh;
    BYTE MeshSpawning;
    BITFIELD VelocityFromMesh:1;
    FRangeVector VelocityScaleRange;
    FRangeVector MeshScaleRange;
    BITFIELD UniformMeshScale:1;
    BITFIELD UniformVelocityScale:1;
    BITFIELD UseColorFromMesh:1;
    BITFIELD SpawnOnlyInDirectionOfNormal:1;
    FVector MeshNormal;
    FRange MeshNormalThresholdRange;
    INT AlphaRef;
    BITFIELD AlphaTest:1;
    BITFIELD AcceptsProjectors:1;
    BITFIELD ZTest:1;
    BITFIELD ZWrite:1;
    BITFIELD UseRevolution:1;
    FRangeVector RevolutionCenterOffsetRange;
    FRangeVector RevolutionsPerSecondRange;
    BITFIELD UseRevolutionScale:1;
    TArrayNoInit<FParticleRevolutionScale> RevolutionScale;
    FLOAT RevolutionScaleRepeats;
    BYTE UseRotationFrom;
    BITFIELD SpinParticles:1;
    FRotator RotationOffset;
    FVector SpinCCWorCW;
    FRangeVector SpinsPerSecondRange;
    FRangeVector StartSpinRange;
    BITFIELD DampRotation:1;
    FRangeVector RotationDampingFactorRange;
    FVector RotationNormal;
    BITFIELD UseSizeScale:1;
    BITFIELD UseRegularSizeScale:1;
    TArrayNoInit<FParticleTimeScale> SizeScale;
    FLOAT SizeScaleRepeats;
    FRangeVector StartSizeRange;
    BITFIELD UniformSize:1;
    BYTE UseSkeletalLocationAs;
    class AActor* SkeletalMeshActor;
    FVector SkeletalScale;
    FRange RelativeBoneIndexRange;
    TArrayNoInit<FParticleSound> Sounds;
    BYTE SpawningSound;
    FRange SpawningSoundIndex;
    FRange SpawningSoundProbability;
    BYTE CollisionSound;
    FRange CollisionSoundIndex;
    FRange CollisionSoundProbability;
    FLOAT ParticlesPerSecond;
    FLOAT InitialParticlesPerSecond;
    BITFIELD AutomaticInitialSpawning:1;
    BITFIELD ForceMinimumOneFrameLifetime:1;
    BYTE DrawStyle;
    class UTexture* Texture;
    INT TextureUSubdivisions;
    INT TextureVSubdivisions;
    BITFIELD BlendBetweenSubdivisions:1;
    BITFIELD UseSubdivisionScale:1;
    TArrayNoInit<FLOAT> SubdivisionScale;
    INT SubdivisionStart;
    INT SubdivisionEnd;
    BITFIELD UseRandomSubdivision:1;
    FLOAT SecondsBeforeInactive;
    FLOAT MinSquaredVelocity;
    FRange InitialTimeRange;
    FRange LifetimeRange;
    FRange InitialDelayRange;
    BITFIELD TriggerDisabled:1;
    BITFIELD ResetOnTrigger:1;
    FRange SpawnOnTriggerRange;
    FLOAT SpawnOnTriggerPPS;
    FRangeVector StartVelocityRange;
    FRange StartVelocityRadialRange;
    FVector MaxAbsVelocity;
    FRangeVector VelocityLossRange;
    INT AddVelocityFromOtherEmitter;
    FRangeVector AddVelocityMultiplierRange;
    BYTE GetVelocityDirectionFrom;
    BITFIELD UseVelocityScale:1;
    BITFIELD InheritOwnersVelocity:1;
    TArrayNoInit<FParticleVelocityScale> VelocityScale;
    FLOAT VelocityScaleRepeats;
    FLOAT WarmupTicksPerSecond;
    FLOAT RelativeWarmupTime;
    class AEmitter* Owner;
    BITFIELD Initialized:1;
    BITFIELD Inactive:1;
    FLOAT InactiveTime;
    TArrayNoInit<FParticle> Particles;
    INT ParticleIndex;
    INT ActiveParticles;
    FLOAT PPSFraction;
    FBox BoundingBox;
    FVector RealExtentMultiplier;
    BITFIELD RealDisableFogging:1;
    BITFIELD AllParticlesDead:1;
    BITFIELD WarmedUp:1;
    INT OtherIndex;
    FLOAT InitialDelay;
    FVector GlobalOffset;
    FLOAT TimeTillReset;
    INT PS2Data;
    INT MaxActiveParticles;
    INT CurrentCollisionSoundIndex;
    INT CurrentSpawningSoundIndex;
    INT CurrentMeshSpawningIndex;
    FLOAT MaxSizeScale;
    INT KillPending;
    INT DeferredParticles;
    FVector RealMeshNormal;
    TArrayNoInit<FVector> MeshVertsAndNormals;
    INT CurrentSpawnOnTrigger;
    INT RenderableParticles;
    FRangeVector RealVelocityLossRange;
	   DECLARE_FUNCTION(execResetParticles);
	   DECLARE_FUNCTION(execTrigger);
	   DECLARE_FUNCTION(execSpawnParticle);
	   DECLARE_CLASS(UParticleEmitter,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UParticleEmitter)
};

// Class	UBeamEmitter is declared in "..\Engine\Classes\BeamEmitter.uc"
class ENGINE_API	UBeamEmitter	: public UParticleEmitter
{
public:
    FRange BeamDistanceRange;
    TArrayNoInit<FParticleBeamEndPoint> BeamEndPoints;
    BYTE DetermineEndPointBy;
    FLOAT BeamTextureUScale;
    FLOAT BeamTextureVScale;
    INT RotatingSheets;
    BITFIELD TriggerEndpoint:1;
    FRangeVector LowFrequencyNoiseRange;
    INT LowFrequencyPoints;
    FRangeVector HighFrequencyNoiseRange;
    INT HighFrequencyPoints;
    TArrayNoInit<FParticleBeamScale> LFScaleFactors;
    TArrayNoInit<FParticleBeamScale> HFScaleFactors;
    FLOAT LFScaleRepeats;
    FLOAT HFScaleRepeats;
    BITFIELD UseHighFrequencyScale:1;
    BITFIELD UseLowFrequencyScale:1;
    BITFIELD NoiseDeterminesEndPoint:1;
    FRangeVector DynamicHFNoiseRange;
    FRange DynamicHFNoisePointsRange;
    FRange DynamicTimeBetweenNoiseRange;
    BITFIELD UseBranching:1;
    FRange BranchProbability;
    FRange BranchHFPointsRange;
    INT BranchEmitter;
    FRange BranchSpawnAmountRange;
    BITFIELD LinkupLifetime:1;
    INT SheetsUsed;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    FLOAT BeamValueSum;
    TArrayNoInit<FParticleBeamData> HFPoints;
    TArrayNoInit<FVector> LFPoints;
    TArrayNoInit<class AActor*> HitActors;
    FLOAT TimeSinceLastDynamicNoise;
	   DECLARE_CLASS(UBeamEmitter,UParticleEmitter,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UBeamEmitter)
};

// Class	UMeshEmitter is declared in "..\Engine\Classes\MeshEmitter.uc"
class ENGINE_API	UMeshEmitter	: public UParticleEmitter
{
public:
    class UStaticMesh* StaticMesh;
    BITFIELD UseMeshBlendMode:1;
    BITFIELD RenderTwoSided:1;
    BITFIELD UseParticleColor:1;
    FVector MeshExtent;
	   DECLARE_CLASS(UMeshEmitter,UParticleEmitter,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UMeshEmitter)
};

// Class	URibbonEmitter is declared in "..\Engine\Classes\Effects\RibbonEmitter.uc"
class ENGINE_API	URibbonEmitter	: public UParticleEmitter
{
public:
    FLOAT SampleRate;
    FLOAT DecayRate;
    INT NumPoints;
    FLOAT RibbonWidth;
    BYTE GetPointAxisFrom;
    FVector AxisNormal;
    FLOAT MinSampleDist;
    FLOAT MinSampleDot;
    FLOAT PointOriginOffset;
    FLOAT RibbonTextureUScale;
    FLOAT RibbonTextureVScale;
    INT NumSheets;
    TArrayNoInit<FLOAT> SheetScale;
    BITFIELD bBillboardSheets:1;
    FVector StartBoneOffset;
    FVector EndBoneOffset;
    FName BoneNameStart;
    FName BoneNameEnd;
    TArrayNoInit<FRibbonPoint> RibbonPoints;
    INT RibbonNumSplinePoints;
    INT RibbonSplineDegree;
    TArrayNoInit<INT> RibbonSplineKnots;
    TArrayNoInit<FRibbonPoint> RibbonSplinePoints;
    BITFIELD bSamplePoints:1;
    BITFIELD bDecayPoints:1;
    BITFIELD bDecayPointsWhenStopped:1;
    BITFIELD bSyncDecayWhenKilled:1;
    BITFIELD bRemainAttachedWhenStopped:1;
    BITFIELD bSyncFadeOutWhenKilled:1;
    BITFIELD bMatchPawnVelocity:1;
    FLOAT VelocityLeadFactor;
    BITFIELD bLengthBasedTextureU:1;
    BITFIELD bUseSheetScale:1;
    BITFIELD bUseBones:1;
    BITFIELD bUseBoneDistance:1;
    FLOAT SampleTimer;
    FLOAT DecayTimer;
    FLOAT RealSampleRate;
    FLOAT RealDecayRate;
    FLOAT RibbonDecayLength;
    INT SheetsUsed;
    FRibbonPoint LastSampledPoint;
    BITFIELD bKilled:1;
    BITFIELD bDecaying:1;
    INT LastNumSplineKnotPoints;
    INT LastSplineDegree;
	   DECLARE_CLASS(URibbonEmitter,UParticleEmitter,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(URibbonEmitter)
};

// Class	USparkEmitter is declared in "..\Engine\Classes\SparkEmitter.uc"
class ENGINE_API	USparkEmitter	: public UParticleEmitter
{
public:
    FRange LineSegmentsRange;
    FRange TimeBeforeVisibleRange;
    FRange TimeBetweenSegmentsRange;
    TArrayNoInit<FParticleSparkData> SparkData;
    class UVertexBuffer* VertexBuffer;
    class UIndexBuffer* IndexBuffer;
    INT NumSegments;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
	   DECLARE_CLASS(USparkEmitter,UParticleEmitter,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(USparkEmitter)
};

// Class	USpriteEmitter is declared in "..\Engine\Classes\SpriteEmitter.uc"
class ENGINE_API	USpriteEmitter	: public UParticleEmitter
{
public:
    BYTE UseDirectionAs;
    FVector ProjectionNormal;
    FVector RealProjectionNormal;
	   DECLARE_CLASS(USpriteEmitter,UParticleEmitter,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(USpriteEmitter)
};

// Class	UTrailEmitter is declared in "..\Engine\Classes\TrailEmitter.uc"
class ENGINE_API	UTrailEmitter	: public UParticleEmitter
{
public:
    INT MaxPointsPerTrail;
    FLOAT DistanceThreshold;
    BITFIELD UseCrossedSheets:1;
    INT MaxTrailTwistAngle;
    TArrayNoInit<FParticleTrailData> TrailData;
    TArrayNoInit<FParticleTrailInfo> TrailInfo;
    class UVertexBuffer* VertexBuffer;
    class UIndexBuffer* IndexBuffer;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
	   DECLARE_CLASS(UTrailEmitter,UParticleEmitter,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UTrailEmitter)
};

// Class	IPathfindingObstacle is declared in "..\Engine\Classes\Pathfinding\PathfindingObstacle.uc"
class ENGINE_API	IPathfindingObstacle	: public UObject
{
public:
	  BITFIELD canBePassed(FName teamName)
	  {
        IPathfindingObstacle_canBePassed_Parms Parms;
		   Parms.ReturnValue=0;
		   Parms.teamName=teamName;
        ProcessFunction(FindFunctionChecked(ENGINE_canBePassed),&Parms);
		   return Parms.ReturnValue;
	  }
	   DECLARE_CLASS(IPathfindingObstacle,UObject,0|CLASS_Interface,Engine)
	   NO_DEFAULT_CONSTRUCTOR(IPathfindingObstacle)
};

// Class	UPlayInfo is declared in "..\Engine\Classes\PlayInfo.uc"
class ENGINE_API	UPlayInfo	: public UObject
{
public:
    TArrayNoInit<FPlayInfoData> Settings;
    TArrayNoInit<class UClass*> InfoClasses;
    TArrayNoInit<INT> ClassStack;
    TArrayNoInit<FString> Groups;
    FStringNoInit LastError;
	   DECLARE_FUNCTION(execSplitStringToArray);
	   DECLARE_FUNCTION(execFindIndex);
	   DECLARE_FUNCTION(execStoreSetting);
	   DECLARE_FUNCTION(execSaveSettings);
	   DECLARE_FUNCTION(execAddSetting);
	   DECLARE_FUNCTION(execPopClass);
	   DECLARE_FUNCTION(execAddClass);
	   DECLARE_FUNCTION(execClear);
	   DECLARE_CLASS(UPlayInfo,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UPlayInfo)
};

// Class	UPlayerInput is declared in "..\Engine\Classes\PlayerInput.uc"
class ENGINE_API	UPlayerInput	: public UObject
{
public:
    BITFIELD bInvertMouse:1;
    BITFIELD bWasForward:1;
    BITFIELD bWasBack:1;
    BITFIELD bWasLeft:1;
    BITFIELD bWasRight:1;
    BITFIELD bEdgeForward:1;
    BITFIELD bEdgeBack:1;
    BITFIELD bEdgeLeft:1;
    BITFIELD bEdgeRight:1;
    BITFIELD bAdjustSampling:1;
    BYTE MouseSmoothingMode;
    FLOAT MouseSmoothingStrength;
    FLOAT MouseSensitivity;
    FLOAT MouseSamplingTime;
    FLOAT MouseAccelThreshold;
    FLOAT SmoothedMouse[2];
    FLOAT ZeroTime[2];
    FLOAT SamplingTime[2];
    FLOAT MaybeTime[2];
    FLOAT OldSamples[4];
    INT MouseSamples[2];
    FLOAT DoubleClickTimer;
    FLOAT DoubleClickTime;
	  void	eventPlayerInput(FLOAT DeltaTime)
	  {
        UPlayerInput_eventPlayerInput_Parms Parms;
		   Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerInput),&Parms);
	  }
	   DECLARE_CLASS(UPlayerInput,UObject,0|CLASS_Transient|CLASS_Config,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UPlayerInput)
};

// Class	UReachSpec is declared in "..\Engine\Classes\ReachSpec.uc"
class ENGINE_API	UReachSpec	: public UObject
{
public:
    INT Distance;
    class ANavigationPoint* Start;
    class ANavigationPoint* End;
    INT CollisionRadius;
    INT CollisionHeight;
    INT reachFlags;
    INT MaxLandingVelocity;
    BYTE bPruned;
    BITFIELD bForced:1;
	   DECLARE_CLASS(UReachSpec,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UReachSpec)
};

// Class	UTyrion_ActionBase is declared in "..\Engine\Classes\TyrionInterface\Tyrion_ActionBase.uc"
class ENGINE_API	UTyrion_ActionBase	: public URefCount
{
public:
	   DECLARE_CLASS(UTyrion_ActionBase,URefCount,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UTyrion_ActionBase)
};

// Class	UTyrion_GoalBase is declared in "..\Engine\Classes\TyrionInterface\Tyrion_GoalBase.uc"
class ENGINE_API	UTyrion_GoalBase	: public URefCount
{
public:
	   DECLARE_CLASS(UTyrion_GoalBase,URefCount,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UTyrion_GoalBase)
};

// Class	UTyrion_ResourceBase is declared in "..\Engine\Classes\TyrionInterface\Tyrion_ResourceBase.uc"
class ENGINE_API	UTyrion_ResourceBase	: public URefCount
{
public:
    TArrayNoInit<class UTyrion_GoalBase*> goals;
    TArrayNoInit<class UTyrion_ActionBase*> abilities;
    BITFIELD bMatchGoals:1;
    BITFIELD bUnInitialized:1;
    BITFIELD bGoalsReset:1;
	   DECLARE_FUNCTION(execTick);
	  BITFIELD	eventisActive()
	  {
        UTyrion_ResourceBase_eventisActive_Parms Parms;
		   Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_isActive),&Parms);
		   return Parms.ReturnValue;
	  }
	  void	eventresetGoals()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_resetGoals),NULL);
	  }
	  void	eventdeleteRemovedActions()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_deleteRemovedActions),NULL);
	  }
	  void	eventInit()
	  {
		   ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
	  }
	   DECLARE_CLASS(UTyrion_ResourceBase,URefCount,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(UTyrion_ResourceBase)
};

// Class	USVehicleWheel is declared in "..\Engine\Classes\SVehicleWheel.uc"
class ENGINE_API	USVehicleWheel	: public UObject
{
public:
    FLOAT Steer;
    FLOAT DriveForce;
    FLOAT LongFriction;
    FLOAT LatFriction;
    FLOAT LongSlip;
    FLOAT LatSlip;
    FLOAT ChassisTorque;
    FLOAT TrackVel;
    BITFIELD bPoweredWheel:1;
    BITFIELD bHandbrakeWheel:1;
    BITFIELD bTrackWheel:1;
    BYTE SteerType;
    FName BoneName;
    FVector BoneOffset;
    FLOAT WheelRadius;
    FLOAT Softness;
    FLOAT PenScale;
    FLOAT Restitution;
    FLOAT Adhesion;
    FLOAT WheelInertia;
    FLOAT SuspensionTravel;
    FLOAT SuspensionOffset;
    FLOAT HandbrakeSlipFactor;
    FLOAT HandbrakeFrictionFactor;
    FName SupportBoneName;
    BYTE SupportBoneAxis;
    FInterpCurve LongFrictionFunc;
    FInterpCurve LatSlipFunc;
    FVector WheelPosition;
    FLOAT SupportPivotDistance;
    BITFIELD bWheelOnGround:1;
    FLOAT TireLoad;
    FVector WheelDir;
    FVector WheelAxle;
    FLOAT SpinVel;
    FLOAT SlipAngle;
    FLOAT SlipVel;
    FLOAT SuspensionPosition;
    FLOAT CurrentRotation;
    INT KContact;
	   DECLARE_CLASS(USVehicleWheel,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(USVehicleWheel)
};

// Class	USpeechManager is declared in "..\Engine\Classes\SpeechManager\SpeechManager.uc"
class ENGINE_API	USpeechManager	: public UObject
{
public:
	   DECLARE_FUNCTION(execCancelSpeech);
	   DECLARE_FUNCTION(execPlayMovementSpeech);
	   DECLARE_FUNCTION(execPlayAnnouncerSpeech);
	   DECLARE_FUNCTION(execPlayScriptedSpeech);
	   DECLARE_FUNCTION(execPlayQuickChatSpeech);
	   DECLARE_FUNCTION(execPlayDynamicSpeech);
	   DECLARE_CLASS(USpeechManager,UObject,0,Engine)
	   NO_DEFAULT_CONSTRUCTOR(USpeechManager)
};

#endif

AUTOGENERATE_FUNCTION(AActor,-1,execGetUrlOption);
AUTOGENERATE_FUNCTION(AActor,-1,execUpdateURL);
AUTOGENERATE_FUNCTION(AActor,-1,execcheckSocket);
AUTOGENERATE_FUNCTION(AActor,-1,execgetSocket);
AUTOGENERATE_FUNCTION(AActor,-1,execGetClosestBone);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimStopLooping);
AUTOGENERATE_FUNCTION(AActor,-1,execGetCurrentMaterial);
AUTOGENERATE_FUNCTION(AActor,552,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,551,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,550,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,549,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,321,execCollidingActors);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,313,execDynamicActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,-1,execMoveCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,547,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,545,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,539,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,-1,execSuggestFallVelocity);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,568,execForceFeedbackSupported);
AUTOGENERATE_FUNCTION(AActor,567,execStopFeedbackEffect);
AUTOGENERATE_FUNCTION(AActor,566,execPlayFeedbackEffect);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayStream);
AUTOGENERATE_FUNCTION(AActor,-1,execResumeSound);
AUTOGENERATE_FUNCTION(AActor,-1,execPauseSound);
AUTOGENERATE_FUNCTION(AActor,-1,execInterruptSound);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execDemoPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayOwnedSound);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,553,execAITrace);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,-1,execStopAllMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execStopMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execUnClock);
AUTOGENERATE_FUNCTION(AActor,-1,execClock);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokReturnSkeletalActorToAnimationSystem);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokCollisionGroupChange);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSlowSetCollisionEnabled);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokGetState);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetGameTickForce);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokGetCenterOfMass);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokImpartLinearForceAll);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetCOM);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetPosition);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokGetPosition);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetBlocking);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokActivate);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokImpartCOMImpulse);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokGetLastTracedBone);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetAngularDamping);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetLinearDamping);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetLinearVelocityAll);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetAngularVelocity);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokSetLinearVelocity);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokGetAngularVelocity);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokGetLinearVelocity);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokImpartForce);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokImpartImpulse);
AUTOGENERATE_FUNCTION(AActor,-1,execHavokIsActive);
AUTOGENERATE_FUNCTION(AActor,-1,execOnlyAffectPawns);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,-1,execDebugUnclock);
AUTOGENERATE_FUNCTION(AActor,-1,execDebugClock);
AUTOGENERATE_FUNCTION(AActor,-1,execDrawDebugLine);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRenderBoundingSphere);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimIsInGroup);
AUTOGENERATE_FUNCTION(AActor,-1,execGetAnimParams);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneDirection);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneScale);
AUTOGENERATE_FUNCTION(AActor,-1,execLockRootMotion);
AUTOGENERATE_FUNCTION(AActor,-1,execUpdateAttachmentLocations);
AUTOGENERATE_FUNCTION(AActor,-1,execDetachFromBone);
AUTOGENERATE_FUNCTION(AActor,-1,execAttachToBone);
AUTOGENERATE_FUNCTION(AActor,-1,execGetMeshOrigin);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootRotationDelta);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootLocationDelta);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneCoords);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimBlendToAlpha);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimBlendParams);
AUTOGENERATE_FUNCTION(AActor,-1,execBoneRefresh);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkMesh);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkSkelAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNotifyChannel);
AUTOGENERATE_FUNCTION(AActor,-1,execEnableChannelNotify);
AUTOGENERATE_FUNCTION(AActor,-1,execGetLIPSincAnimDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execCurrentLIPSincAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execIsPlayingLIPSincAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execHasLIPSincAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execStopLIPSincAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayLIPSincAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execGetAnimLength);
AUTOGENERATE_FUNCTION(AActor,-1,execIsTweening);
AUTOGENERATE_FUNCTION(AActor,-1,execSetAnimFrame);
AUTOGENERATE_FUNCTION(AActor,-1,execFreezeAnimAt);
AUTOGENERATE_FUNCTION(AActor,-1,execStopAnimating);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayAnimAdditive);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execGetMeshName);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,-1,execSetRelativeLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetRelativeRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execTestMove);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,-1,execShallowCopyMaterial);
AUTOGENERATE_FUNCTION(AActor,-1,execGetMaterial);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawType);
AUTOGENERATE_FUNCTION(AActor,-1,execSetStaticMesh);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawScale3D);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawScale);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,-1,execConstruct_ActorNameVectorRotator);
AUTOGENERATE_FUNCTION(AActor,-1,execConstruct_Void);
AUTOGENERATE_FUNCTION(AActor,-1,execAllocate);
AUTOGENERATE_FUNCTION(AActor,-1,execstaticActorLabel);
AUTOGENERATE_FUNCTION(AActor,-1,execactorLabel);
AUTOGENERATE_FUNCTION(AActor,-1,execnearbyControlledPawns);
AUTOGENERATE_FUNCTION(AActor,-1,execIsOverlapping);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(AActor,-1,execAddDebugMessage);
AUTOGENERATE_FUNCTION(AController,-1,execInLatentExecution);
AUTOGENERATE_FUNCTION(AController,530,execRemoveController);
AUTOGENERATE_FUNCTION(AController,529,execAddController);
AUTOGENERATE_FUNCTION(AController,-1,execDebugTraversalCheck);
AUTOGENERATE_FUNCTION(AController,-1,execPathDiagnostics);
AUTOGENERATE_FUNCTION(AController,-1,execDrawPathDebug);
AUTOGENERATE_FUNCTION(AController,-1,execContinueFindPath);
AUTOGENERATE_FUNCTION(AController,-1,execFindPath);
AUTOGENERATE_FUNCTION(AController,-1,execIsFindPathComplete);
AUTOGENERATE_FUNCTION(AController,-1,execDiscardFindPath);
AUTOGENERATE_FUNCTION(AController,-1,execGetFindPathResult);
AUTOGENERATE_FUNCTION(AController,514,execLineOfSightTo);
AUTOGENERATE_FUNCTION(AEmitter,-1,execKill);
AUTOGENERATE_FUNCTION(AFileLog,-1,execLogf);
AUTOGENERATE_FUNCTION(AFileLog,-1,execCloseLog);
AUTOGENERATE_FUNCTION(AFileLog,-1,execOpenLog);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execLoadMapList);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execQueryPatch);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSetTeamAffiliation);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execHTTPGetRequest);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSetDataPrivateRW);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execFindTeam);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execAuthenticateProfile);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execRegisterUniqueNick);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execDisconnectUserAccount);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execConnectUserAccount);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execCheckUserAccount);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execCreateUserAccount);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSendStatSnapshot);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSetTeamStat);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSetPlayerStat);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSetServerStat);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsRemoveTeam);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsRemovePlayer);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsNewTeam);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsNewPlayer);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsGetStatResponse);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsGetPID);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsHasPIDAndResponse);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execStatsNewGameStarted);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execGetNextServer);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execGetNumPotentialServers);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execGetServerPort);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execGetServerIpAddress);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execCancelUpdate);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execUpdateServer);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execUpdateServerByIP);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execClearServerList);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execLANUpdateServerList);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execUpdateServerList);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execSendGameSpyGameModeChange);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execGetPlayerObject);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execGetLevelInfo);
AUTOGENERATE_FUNCTION(UGameSpyManager,-1,execInitGameSpyClient);
AUTOGENERATE_FUNCTION(AGameStats,-1,execGetMapFileName);
AUTOGENERATE_FUNCTION(AGameStats,-1,execGetStatsIdentifier);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DCone);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DCylinder);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DCircle);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DLine);
AUTOGENERATE_FUNCTION(AHavokConstraint,-1,execComputeLocalValues);
AUTOGENERATE_FUNCTION(AHavokConstraint,-1,execActivateAttachedBodies);
AUTOGENERATE_FUNCTION(AHavokConstraint,-1,execUpdateConstraintDetails);
AUTOGENERATE_FUNCTION(AHavokConstraint,-1,execRecreateConstraint);
AUTOGENERATE_FUNCTION(AHavokVehicle,-1,execRemakeVehicle);
AUTOGENERATE_FUNCTION(AHavokVehicle,-1,execGraphData);
AUTOGENERATE_FUNCTION(UInteraction,-1,execScreenToWorld);
AUTOGENERATE_FUNCTION(UInteraction,-1,execWorldToScreen);
AUTOGENERATE_FUNCTION(UInteraction,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(UInteraction,-1,execInitialize);
AUTOGENERATE_FUNCTION(UInteractionMaster,-1,execGetKeyFromBinding);
AUTOGENERATE_FUNCTION(UInteractionMaster,-1,execTravel);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execAllControllers);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execUnRegisterNotifyActorDestroyed);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execRegisterNotifyActorDestroyed);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execUnRegisterNotifyPawnDied);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execRegisterNotifyPawnDied);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execIsDemoBuild);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execIsPendingActive);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execIsEntry);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execDetailChange);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execUpdateMovementConfiguration);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execEscapeCutscene);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execPlayAllMojoCutscenes);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execPlayMojoCutscene);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execHavokGetNextFreeSystemLayer);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execHavokSetCollisionLayerEnabled);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetGameSpyManager);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetMapTextureExtent);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetMapTextureOrigin);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetMapTexture);
AUTOGENERATE_FUNCTION(UMessage,-1,execAllocate);
AUTOGENERATE_FUNCTION(UMessageDispatcher,-1,execdeleteMessage);
AUTOGENERATE_FUNCTION(UMessageDispatcher,-1,execdispatch);
AUTOGENERATE_FUNCTION(UMessageDispatcher,-1,execregisterReceiver);
AUTOGENERATE_FUNCTION(AMirrorCamera,-1,execCreateNewScriptedTexture);
AUTOGENERATE_FUNCTION(AMirrorCamera,-1,execInitialize);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execcalculateExtents);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execwake);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execaddForce);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execsetAcceleration);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execaddImpulse);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execAddVelocity);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execsetVelocity);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execgetAccumulator);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execsetAccumulator);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execgetEndPosition);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execgetStartPosition);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execsetStartPosition);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execsetEndPosition);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execsetPosition);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execforceMovementState);
AUTOGENERATE_FUNCTION(UMovementObject,-1,execsetInput);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execResetParticles);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execTrigger);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execSpawnParticle);
AUTOGENERATE_FUNCTION(APawn,-1,execNotifyPawnDeathListeners);
AUTOGENERATE_FUNCTION(APawn,-1,execLineOfSightTo);
AUTOGENERATE_FUNCTION(APawn,-1,execForceCrouch);
AUTOGENERATE_FUNCTION(APawn,-1,execReachedDestination);
AUTOGENERATE_FUNCTION(APawn,-1,execCanSee);
AUTOGENERATE_FUNCTION(APawn,-1,execGetViewPoint);
AUTOGENERATE_FUNCTION(APawn,-1,execGetViewDirection);
AUTOGENERATE_FUNCTION(APawn,-1,execRemovePawn);
AUTOGENERATE_FUNCTION(APawn,-1,execAddPawn);
AUTOGENERATE_FUNCTION(UPlayInfo,-1,execSplitStringToArray);
AUTOGENERATE_FUNCTION(UPlayInfo,-1,execFindIndex);
AUTOGENERATE_FUNCTION(UPlayInfo,-1,execStoreSetting);
AUTOGENERATE_FUNCTION(UPlayInfo,-1,execSaveSettings);
AUTOGENERATE_FUNCTION(UPlayInfo,-1,execAddSetting);
AUTOGENERATE_FUNCTION(UPlayInfo,-1,execPopClass);
AUTOGENERATE_FUNCTION(UPlayInfo,-1,execAddClass);
AUTOGENERATE_FUNCTION(UPlayInfo,-1,execClear);
AUTOGENERATE_FUNCTION(APlayerController,-1,execChangeVoiceChatter);
AUTOGENERATE_FUNCTION(APlayerController,-1,execLeaveVoiceChat);
AUTOGENERATE_FUNCTION(APlayerController,-1,execSaveGameExists);
AUTOGENERATE_FUNCTION(APlayerController,-1,execCheckCullDistance);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientHearSound);
AUTOGENERATE_FUNCTION(APlayerController,-1,execServerValidationResponse);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientValidate);
AUTOGENERATE_FUNCTION(APlayerController,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetURLProtocol);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execSetViewTarget);
AUTOGENERATE_FUNCTION(APlayerController,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetServerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetPlayerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerController,-1,execSetNetSpeed);
AUTOGENERATE_FUNCTION(AProjector,-1,execUpdateMatrix);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachActor);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachActor);
AUTOGENERATE_FUNCTION(AProjector,-1,execAbandonProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachProjector);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execDrawPortal);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execDrawTile);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execTextSize);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execDrawText);
AUTOGENERATE_FUNCTION(UScriptedTexture,-1,execSetSize);
AUTOGENERATE_FUNCTION(ASecurity,-1,execNativePerform);
AUTOGENERATE_FUNCTION(UShadowBitmapMaterial,-1,execSetResolution);
AUTOGENERATE_FUNCTION(UShadowBitmapMaterial,-1,execGetShadowLocation);
AUTOGENERATE_FUNCTION(AShadowProjector,-1,execUpdateShadow);
AUTOGENERATE_FUNCTION(AShadowProjector,-1,execUpdateDetailSetting);
AUTOGENERATE_FUNCTION(USpeechManager,-1,execCancelSpeech);
AUTOGENERATE_FUNCTION(USpeechManager,-1,execPlayMovementSpeech);
AUTOGENERATE_FUNCTION(USpeechManager,-1,execPlayAnnouncerSpeech);
AUTOGENERATE_FUNCTION(USpeechManager,-1,execPlayScriptedSpeech);
AUTOGENERATE_FUNCTION(USpeechManager,-1,execPlayQuickChatSpeech);
AUTOGENERATE_FUNCTION(USpeechManager,-1,execPlayDynamicSpeech);
AUTOGENERATE_FUNCTION(ATriggers,-1,execTriggerMojoCutscene);
AUTOGENERATE_FUNCTION(UTyrion_ResourceBase,-1,execTick);
AUTOGENERATE_FUNCTION(ATyrion_Setup,-1,execcopyParameters);
AUTOGENERATE_FUNCTION(ATyrion_Setup,-1,execmakeSafeOuter);
AUTOGENERATE_FUNCTION(ATyrion_Setup,-1,execshutDownVision);
AUTOGENERATE_FUNCTION(ATyrion_Setup,-1,execsetAILOD);
AUTOGENERATE_FUNCTION(AVolume,-1,execEncompasses);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,315,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,314,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack	(pop)
#endif

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(AActor)
VERIFY_CLASS_SIZE_NODIE(UAdminBase)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_DestroyEffect)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_Effect)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_LIPSinc)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_Script)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_Scripted)
VERIFY_CLASS_SIZE_NODIE(UAnimNotify_Sound)
VERIFY_CLASS_SIZE_NODIE(AAntiPortalActor)
VERIFY_CLASS_SIZE_NODIE(AAutoDoor)
VERIFY_CLASS_SIZE_NODIE(AAutoLadder)
VERIFY_CLASS_SIZE_NODIE(UBaseGUIController)
VERIFY_CLASS_SIZE_NODIE(UBeamEmitter)
VERIFY_CLASS_SIZE_NODIE(ABlockingVolume)
VERIFY_CLASS_SIZE_NODIE(ABrush)
VERIFY_CLASS_SIZE_NODIE(ACamera)
VERIFY_CLASS_SIZE_NODIE(UCheatManager)
VERIFY_CLASS_SIZE_NODIE(AClipMarker)
VERIFY_CLASS_SIZE_NODIE(UColorModifier)
VERIFY_CLASS_SIZE_NODIE(UCombiner)
VERIFY_CLASS_SIZE_NODIE(UConstantColor)
VERIFY_CLASS_SIZE_NODIE(UConstantMaterial)
VERIFY_CLASS_SIZE_NODIE(AController)
VERIFY_CLASS_SIZE_NODIE(ADamageType)
VERIFY_CLASS_SIZE_NODIE(ADecoVolumeObject)
VERIFY_CLASS_SIZE_NODIE(ADecoration)
VERIFY_CLASS_SIZE_NODIE(ADecorationList)
VERIFY_CLASS_SIZE_NODIE(ADefaultPhysicsVolume)
VERIFY_CLASS_SIZE_NODIE(ADoor)
VERIFY_CLASS_SIZE_NODIE(AEmitter)
VERIFY_CLASS_SIZE_NODIE(UFadeColor)
VERIFY_CLASS_SIZE_NODIE(AFileLog)
VERIFY_CLASS_SIZE_NODIE(UFinalBlend)
VERIFY_CLASS_SIZE_NODIE(AFluidSurfaceOscillator)
VERIFY_CLASS_SIZE_NODIE(UFluidSurfaceParamaters)
VERIFY_CLASS_SIZE_NODIE(AFluidVolume)
VERIFY_CLASS_SIZE_NODIE(AGameInfo)
VERIFY_CLASS_SIZE_NODIE(AGameReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(UGameSpyManager)
VERIFY_CLASS_SIZE_NODIE(AGameStats)
VERIFY_CLASS_SIZE_NODIE(AGenericExternalCamera)
VERIFY_CLASS_SIZE_NODIE(AHUD)
VERIFY_CLASS_SIZE_NODIE(AHavok6DOFConstraint)
VERIFY_CLASS_SIZE_NODIE(AHavokActor)
VERIFY_CLASS_SIZE_NODIE(AHavokBSConstraint)
VERIFY_CLASS_SIZE_NODIE(AHavokConeLimitConstraint)
VERIFY_CLASS_SIZE_NODIE(AHavokConstraint)
VERIFY_CLASS_SIZE_NODIE(AHavokHingeConstraint)
VERIFY_CLASS_SIZE_NODIE(UHavokObject)
VERIFY_CLASS_SIZE_NODIE(AHavokPrismaticConstraint)
VERIFY_CLASS_SIZE_NODIE(UHavokRigidBody)
VERIFY_CLASS_SIZE_NODIE(UHavokSkeletalSystem)
VERIFY_CLASS_SIZE_NODIE(AHavokVehicle)
VERIFY_CLASS_SIZE_NODIE(UHavokVehicleWheel)
VERIFY_CLASS_SIZE_NODIE(AHavokWeakOrientationConstraint)
VERIFY_CLASS_SIZE_NODIE(UI3DL2Listener)
VERIFY_CLASS_SIZE_NODIE(IIEffectObserver)
VERIFY_CLASS_SIZE_NODIE(UIGEffectsSystemBase)
VERIFY_CLASS_SIZE_NODIE(IIInterestedActorDestroyed)
VERIFY_CLASS_SIZE_NODIE(IIInterestedPawnDied)
VERIFY_CLASS_SIZE_NODIE(AInfo)
VERIFY_CLASS_SIZE_NODIE(UInteraction)
VERIFY_CLASS_SIZE_NODIE(UInteractionMaster)
VERIFY_CLASS_SIZE_NODIE(UInteractions)
VERIFY_CLASS_SIZE_NODIE(AInternetInfo)
VERIFY_CLASS_SIZE_NODIE(AJumpDest)
VERIFY_CLASS_SIZE_NODIE(AJumpPad)
VERIFY_CLASS_SIZE_NODIE(AKActor)
VERIFY_CLASS_SIZE_NODIE(AKBSJoint)
VERIFY_CLASS_SIZE_NODIE(AKCarWheelJoint)
VERIFY_CLASS_SIZE_NODIE(AKConeLimit)
VERIFY_CLASS_SIZE_NODIE(AKConstraint)
VERIFY_CLASS_SIZE_NODIE(AKHinge)
VERIFY_CLASS_SIZE_NODIE(AKRPROJoint)
VERIFY_CLASS_SIZE_NODIE(AKRepulsor)
VERIFY_CLASS_SIZE_NODIE(AKTire)
VERIFY_CLASS_SIZE_NODIE(AKVehicle)
VERIFY_CLASS_SIZE_NODIE(UKarmaParams)
VERIFY_CLASS_SIZE_NODIE(UKarmaParamsCollision)
VERIFY_CLASS_SIZE_NODIE(UKarmaParamsRBFull)
VERIFY_CLASS_SIZE_NODIE(UKarmaParamsSkel)
VERIFY_CLASS_SIZE_NODIE(AKeypoint)
VERIFY_CLASS_SIZE_NODIE(ALadder)
VERIFY_CLASS_SIZE_NODIE(ALadderVolume)
VERIFY_CLASS_SIZE_NODIE(ALevelInfo)
VERIFY_CLASS_SIZE_NODIE(ULevelSummary)
VERIFY_CLASS_SIZE_NODIE(ALiftCenter)
VERIFY_CLASS_SIZE_NODIE(ALiftExit)
VERIFY_CLASS_SIZE_NODIE(ALight)
VERIFY_CLASS_SIZE_NODIE(ALineOfSightTrigger)
VERIFY_CLASS_SIZE_NODIE(AMapList)
VERIFY_CLASS_SIZE_NODIE(UMaterialSequence)
VERIFY_CLASS_SIZE_NODIE(UMaterialSwitch)
VERIFY_CLASS_SIZE_NODIE(UMeshEmitter)
VERIFY_CLASS_SIZE_NODIE(UMeshObject)
VERIFY_CLASS_SIZE_NODIE(UMessage)
VERIFY_CLASS_SIZE_NODIE(UMessageDispatcher)
VERIFY_CLASS_SIZE_NODIE(UMessagePostRender)
VERIFY_CLASS_SIZE_NODIE(UMessagePostRenderFinal)
VERIFY_CLASS_SIZE_NODIE(UMessagePreRender)
VERIFY_CLASS_SIZE_NODIE(AMirror)
VERIFY_CLASS_SIZE_NODIE(AMirrorCamera)
VERIFY_CLASS_SIZE_NODIE(UModifier)
VERIFY_CLASS_SIZE_NODIE(UMovementObject)
VERIFY_CLASS_SIZE_NODIE(AMover)
VERIFY_CLASS_SIZE_NODIE(AMusicManagerBase)
VERIFY_CLASS_SIZE_NODIE(AMutator)
VERIFY_CLASS_SIZE_NODIE(ANavigationPoint)
VERIFY_CLASS_SIZE_NODIE(ANote)
VERIFY_CLASS_SIZE_NODIE(UOpacityModifier)
VERIFY_CLASS_SIZE_NODIE(UParticleEmitter)
VERIFY_CLASS_SIZE_NODIE(UParticleMaterial)
VERIFY_CLASS_SIZE_NODIE(APathNode)
VERIFY_CLASS_SIZE_NODIE(IPathfindingObstacle)
VERIFY_CLASS_SIZE_NODIE(APawn)
VERIFY_CLASS_SIZE_NODIE(APhysicsVolume)
VERIFY_CLASS_SIZE_NODIE(UPlayInfo)
VERIFY_CLASS_SIZE_NODIE(APlayerController)
VERIFY_CLASS_SIZE_NODIE(UPlayerInput)
VERIFY_CLASS_SIZE_NODIE(APlayerReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(APlayerStart)
VERIFY_CLASS_SIZE_NODIE(APolyMarker)
VERIFY_CLASS_SIZE_NODIE(APotentialClimbWatcher)
VERIFY_CLASS_SIZE_NODIE(AProjector)
VERIFY_CLASS_SIZE_NODIE(UProjectorMaterial)
VERIFY_CLASS_SIZE_NODIE(UReachSpec)
VERIFY_CLASS_SIZE_NODIE(AReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(URibbonEmitter)
VERIFY_CLASS_SIZE_NODIE(ASVehicle)
VERIFY_CLASS_SIZE_NODIE(USVehicleWheel)
VERIFY_CLASS_SIZE_NODIE(AScout)
VERIFY_CLASS_SIZE_NODIE(UScriptedTexture)
VERIFY_CLASS_SIZE_NODIE(ASecurity)
VERIFY_CLASS_SIZE_NODIE(UShader)
VERIFY_CLASS_SIZE_NODIE(UShadowBitmapMaterial)
VERIFY_CLASS_SIZE_NODIE(AShadowProjector)
VERIFY_CLASS_SIZE_NODIE(ASkyZoneInfo)
VERIFY_CLASS_SIZE_NODIE(ASmallNavigationPoint)
VERIFY_CLASS_SIZE_NODIE(USparkEmitter)
VERIFY_CLASS_SIZE_NODIE(USpeechManager)
VERIFY_CLASS_SIZE_NODIE(USpriteEmitter)
VERIFY_CLASS_SIZE_NODIE(AStaticMeshActor)
VERIFY_CLASS_SIZE_NODIE(ATeleporter)
VERIFY_CLASS_SIZE_NODIE(UTerrainMaterial)
VERIFY_CLASS_SIZE_NODIE(UTexCoordSource)
VERIFY_CLASS_SIZE_NODIE(UTexEnvMap)
VERIFY_CLASS_SIZE_NODIE(UTexMatrix)
VERIFY_CLASS_SIZE_NODIE(UTexModifier)
VERIFY_CLASS_SIZE_NODIE(UTexOscillator)
VERIFY_CLASS_SIZE_NODIE(UTexOscillatorTriggered)
VERIFY_CLASS_SIZE_NODIE(UTexPanner)
VERIFY_CLASS_SIZE_NODIE(UTexPannerTriggered)
VERIFY_CLASS_SIZE_NODIE(UTexRotator)
VERIFY_CLASS_SIZE_NODIE(UTexScaler)
VERIFY_CLASS_SIZE_NODIE(UTrailEmitter)
VERIFY_CLASS_SIZE_NODIE(ATrigger)
VERIFY_CLASS_SIZE_NODIE(ATriggers)
VERIFY_CLASS_SIZE_NODIE(UTyrion_ActionBase)
VERIFY_CLASS_SIZE_NODIE(UTyrion_GoalBase)
VERIFY_CLASS_SIZE_NODIE(UTyrion_ResourceBase)
VERIFY_CLASS_SIZE_NODIE(ATyrion_Setup)
VERIFY_CLASS_SIZE_NODIE(UVertexColor)
VERIFY_CLASS_SIZE_NODIE(AVolume)
VERIFY_CLASS_SIZE_NODIE(AWarpZoneInfo)
VERIFY_CLASS_SIZE_NODIE(AWarpZoneMarker)
VERIFY_CLASS_SIZE_NODIE(AZoneInfo)
VERIFY_CLASS_SIZE_NODIE(AxWeatherEffect)
#endif // VERIFY_CLASS_SIZES
